
CameraTutoF7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e44  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e58  0800900c  0800900c  0001900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae64  0800ae64  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae64  0800ae64  0001ae64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae6c  0800ae6c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae6c  0800ae6c  0001ae6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae70  0800ae70  0001ae70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800ae74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004b5ac  2000002c  0800aea0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004b5d8  0800aea0  0002b5d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019581  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032d5  00000000  00000000  000395dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001708  00000000  00000000  0003c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000277e6  00000000  00000000  0003dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00013450  00000000  00000000  000657a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000fbc4a  00000000  00000000  00078bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00174840  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001558  00000000  00000000  001748c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00006134  00000000  00000000  00175e18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008ff4 	.word	0x08008ff4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000030 	.word	0x20000030
 8000204:	08008ff4 	.word	0x08008ff4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Draw_Blue_Cross>:
 */

#include <stdint.h>
#include "arm_math.h"

void Draw_Blue_Cross(int x, int y, int thickness, uint16_t* photo_buffer){
 8000508:	b480      	push	{r7}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	603b      	str	r3, [r7, #0]
	//Horizontal blue line
	if(y < thickness) y = thickness;
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	429a      	cmp	r2, r3
 800051c:	da01      	bge.n	8000522 <Draw_Blue_Cross+0x1a>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<320;i++){
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
 8000526:	e01c      	b.n	8000562 <Draw_Blue_Cross+0x5a>
		for(int j=-thickness; j<thickness; j++){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	425b      	negs	r3, r3
 800052c:	61bb      	str	r3, [r7, #24]
 800052e:	e011      	b.n	8000554 <Draw_Blue_Cross+0x4c>
			photo_buffer[((y+j)*320)+i] = 0x001F;
 8000530:	68ba      	ldr	r2, [r7, #8]
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	441a      	add	r2, r3
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	019b      	lsls	r3, r3, #6
 800053e:	461a      	mov	r2, r3
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	4413      	add	r3, r2
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	4413      	add	r3, r2
 800054a:	221f      	movs	r2, #31
 800054c:	801a      	strh	r2, [r3, #0]
		for(int j=-thickness; j<thickness; j++){
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	3301      	adds	r3, #1
 8000552:	61bb      	str	r3, [r7, #24]
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbe9      	blt.n	8000530 <Draw_Blue_Cross+0x28>
	for(int i=0; i<320;i++){
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	3301      	adds	r3, #1
 8000560:	61fb      	str	r3, [r7, #28]
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000568:	dbde      	blt.n	8000528 <Draw_Blue_Cross+0x20>
		}
	}
	//Vertical blue line
	for(int i=0; i<240;i++){
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	e01b      	b.n	80005a8 <Draw_Blue_Cross+0xa0>
	  for(int j=-thickness; j<thickness; j++){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	425b      	negs	r3, r3
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	e010      	b.n	800059a <Draw_Blue_Cross+0x92>
		  photo_buffer[(x+j)+(320*i)] = 0x001F;
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	18d1      	adds	r1, r2, r3
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	019b      	lsls	r3, r3, #6
 8000588:	440b      	add	r3, r1
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	4413      	add	r3, r2
 8000590:	221f      	movs	r2, #31
 8000592:	801a      	strh	r2, [r3, #0]
	  for(int j=-thickness; j<thickness; j++){
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	3301      	adds	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dbea      	blt.n	8000578 <Draw_Blue_Cross+0x70>
	for(int i=0; i<240;i++){
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	2bef      	cmp	r3, #239	; 0xef
 80005ac:	dde0      	ble.n	8000570 <Draw_Blue_Cross+0x68>
	  }
	}
}
 80005ae:	bf00      	nop
 80005b0:	3724      	adds	r7, #36	; 0x24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <Filter_Colors_And_Get_Center>:

void Filter_Colors_And_Get_Center(uint16_t r_threshold, uint16_t g_threshold, uint16_t b_threshold, int nb_pixels, uint16_t* photo_buffer, int* px, int* py, int* pcount){
 80005bc:	b480      	push	{r7}
 80005be:	b08d      	sub	sp, #52	; 0x34
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4603      	mov	r3, r0
 80005c6:	81fb      	strh	r3, [r7, #14]
 80005c8:	460b      	mov	r3, r1
 80005ca:	81bb      	strh	r3, [r7, #12]
 80005cc:	4613      	mov	r3, r2
 80005ce:	817b      	strh	r3, [r7, #10]
	int x = 0, y = 0, nb_red_pix = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
	int a;
	for(int i=0;i<nb_pixels; i++){
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
 80005e0:	e05e      	b.n	80006a0 <Filter_Colors_And_Get_Center+0xe4>
	  uint16_t rouge = photo_buffer[i] & 0xF800;
 80005e2:	6a3b      	ldr	r3, [r7, #32]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005e8:	4413      	add	r3, r2
 80005ea:	881a      	ldrh	r2, [r3, #0]
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <Filter_Colors_And_Get_Center+0x120>)
 80005ee:	4013      	ands	r3, r2
 80005f0:	83fb      	strh	r3, [r7, #30]
	  uint16_t vert = photo_buffer[i] & 0x07E0;
 80005f2:	6a3b      	ldr	r3, [r7, #32]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005f8:	4413      	add	r3, r2
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000600:	83bb      	strh	r3, [r7, #28]
	  uint16_t bleu = photo_buffer[i] & 0x001F;
 8000602:	6a3b      	ldr	r3, [r7, #32]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000608:	4413      	add	r3, r2
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	f003 031f 	and.w	r3, r3, #31
 8000610:	837b      	strh	r3, [r7, #26]

	  //if pixel is too green & too blue, set it to black
	  if(vert > g_threshold || bleu > b_threshold){
 8000612:	8bba      	ldrh	r2, [r7, #28]
 8000614:	89bb      	ldrh	r3, [r7, #12]
 8000616:	429a      	cmp	r2, r3
 8000618:	d803      	bhi.n	8000622 <Filter_Colors_And_Get_Center+0x66>
 800061a:	8b7a      	ldrh	r2, [r7, #26]
 800061c:	897b      	ldrh	r3, [r7, #10]
 800061e:	429a      	cmp	r2, r3
 8000620:	d906      	bls.n	8000630 <Filter_Colors_And_Get_Center+0x74>
		  photo_buffer[i] = 0;
 8000622:	6a3b      	ldr	r3, [r7, #32]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000628:	4413      	add	r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	801a      	strh	r2, [r3, #0]
 800062e:	e034      	b.n	800069a <Filter_Colors_And_Get_Center+0xde>
	  }
	  //if pixel isn't red enough, set it to black
	  else if(rouge < r_threshold ){
 8000630:	8bfa      	ldrh	r2, [r7, #30]
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	429a      	cmp	r2, r3
 8000636:	d206      	bcs.n	8000646 <Filter_Colors_And_Get_Center+0x8a>
		  photo_buffer[i] = 0;
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800063e:	4413      	add	r3, r2
 8000640:	2200      	movs	r2, #0
 8000642:	801a      	strh	r2, [r3, #0]
 8000644:	e029      	b.n	800069a <Filter_Colors_And_Get_Center+0xde>
	  }
	  else{
		  a = rouge/100;
 8000646:	8bfb      	ldrh	r3, [r7, #30]
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <Filter_Colors_And_Get_Center+0x124>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	b29b      	uxth	r3, r3
 8000652:	617b      	str	r3, [r7, #20]
		  //Translate i into x and y coordinates
		  x += i%320 * a;
 8000654:	6a39      	ldr	r1, [r7, #32]
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <Filter_Colors_And_Get_Center+0x128>)
 8000658:	fb83 2301 	smull	r2, r3, r3, r1
 800065c:	11da      	asrs	r2, r3, #7
 800065e:	17cb      	asrs	r3, r1, #31
 8000660:	1ad2      	subs	r2, r2, r3
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	019b      	lsls	r3, r3, #6
 800066a:	1aca      	subs	r2, r1, r3
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	fb03 f302 	mul.w	r3, r3, r2
 8000672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000674:	4413      	add	r3, r2
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
		  y += i/320 * a;
 8000678:	6a3b      	ldr	r3, [r7, #32]
 800067a:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <Filter_Colors_And_Get_Center+0x128>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	11d2      	asrs	r2, r2, #7
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800068e:	4413      	add	r3, r2
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
		  nb_red_pix += a;
 8000692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4413      	add	r3, r2
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0;i<nb_pixels; i++){
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	3301      	adds	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	6a3a      	ldr	r2, [r7, #32]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	db9c      	blt.n	80005e2 <Filter_Colors_And_Get_Center+0x26>
	  }
	}
	//Divide by the number of pixels to get the average of the positions
	x /= nb_red_pix;
 80006a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	y /= nb_red_pix;
 80006b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28

	//"returning" the values
	*px = x;
 80006bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006c0:	601a      	str	r2, [r3, #0]
	*py = y;
 80006c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006c6:	601a      	str	r2, [r3, #0]
	*pcount = nb_red_pix;
 80006c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006cc:	601a      	str	r2, [r3, #0]

}
 80006ce:	bf00      	nop
 80006d0:	3734      	adds	r7, #52	; 0x34
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	fffff800 	.word	0xfffff800
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	66666667 	.word	0x66666667

080006e8 <Gaussian_Filter>:

void Gaussian_Filter(uint16_t* photo_buffer, uint16_t* photo_blurred, int nb_pixels){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b092      	sub	sp, #72	; 0x48
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
	float filter[3][3] = {
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2224      	movs	r2, #36	; 0x24
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f008 fc71 	bl	8008fe4 <memset>
		{1/9, 1/9, 1/9}
	};
	int x, y;
	int sum;
	uint16_t r, g, b;
	for(int i=0;i<nb_pixels; i++){
 8000702:	2300      	movs	r3, #0
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
 8000706:	e0d2      	b.n	80008ae <Gaussian_Filter+0x1c6>
		x = i%320;
 8000708:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800070a:	4b6d      	ldr	r3, [pc, #436]	; (80008c0 <Gaussian_Filter+0x1d8>)
 800070c:	fb83 1302 	smull	r1, r3, r3, r2
 8000710:	11d9      	asrs	r1, r3, #7
 8000712:	17d3      	asrs	r3, r2, #31
 8000714:	1ac9      	subs	r1, r1, r3
 8000716:	460b      	mov	r3, r1
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	019b      	lsls	r3, r3, #6
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	643b      	str	r3, [r7, #64]	; 0x40
		y = i/320;
 8000722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000724:	4a66      	ldr	r2, [pc, #408]	; (80008c0 <Gaussian_Filter+0x1d8>)
 8000726:	fb82 1203 	smull	r1, r2, r2, r3
 800072a:	11d2      	asrs	r2, r2, #7
 800072c:	17db      	asrs	r3, r3, #31
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(x > 3 && y > 3 && x < 320 - 3 && y < 240 - 3){
 8000732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000734:	2b03      	cmp	r3, #3
 8000736:	f340 80ad 	ble.w	8000894 <Gaussian_Filter+0x1ac>
 800073a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800073c:	2b03      	cmp	r3, #3
 800073e:	f340 80a9 	ble.w	8000894 <Gaussian_Filter+0x1ac>
 8000742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000744:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8000748:	f300 80a4 	bgt.w	8000894 <Gaussian_Filter+0x1ac>
 800074c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800074e:	2bec      	cmp	r3, #236	; 0xec
 8000750:	f300 80a0 	bgt.w	8000894 <Gaussian_Filter+0x1ac>
			sum = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38

			//sum += photo_buffer[i+321]*filter[0][0];
			//sum += photo_buffer[i+320]*filter[0][1];
			//sum += photo_buffer[i+319]*filter[0][2];

			sum += (photo_buffer[i] & 0xF800)/3;
 8000758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8000766:	4a57      	ldr	r2, [pc, #348]	; (80008c4 <Gaussian_Filter+0x1dc>)
 8000768:	fb82 1203 	smull	r1, r2, r2, r3
 800076c:	17db      	asrs	r3, r3, #31
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000772:	4413      	add	r3, r2
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
			sum += (photo_buffer[i] & 0x07E0)/3;
 8000776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000784:	4a4f      	ldr	r2, [pc, #316]	; (80008c4 <Gaussian_Filter+0x1dc>)
 8000786:	fb82 1203 	smull	r1, r2, r2, r3
 800078a:	17db      	asrs	r3, r3, #31
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000790:	4413      	add	r3, r2
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
			sum += (photo_buffer[i] & 0x001F)/3;
 8000794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	f003 031f 	and.w	r3, r3, #31
 80007a2:	4a48      	ldr	r2, [pc, #288]	; (80008c4 <Gaussian_Filter+0x1dc>)
 80007a4:	fb82 1203 	smull	r1, r2, r2, r3
 80007a8:	17db      	asrs	r3, r3, #31
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007ae:	4413      	add	r3, r2
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38

			sum += (photo_buffer[i+1] & 0xF800)/3;
 80007b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007b4:	3301      	adds	r3, #1
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	4413      	add	r3, r2
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80007c2:	4a40      	ldr	r2, [pc, #256]	; (80008c4 <Gaussian_Filter+0x1dc>)
 80007c4:	fb82 1203 	smull	r1, r2, r2, r3
 80007c8:	17db      	asrs	r3, r3, #31
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007ce:	4413      	add	r3, r2
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
			sum += (photo_buffer[i+1] & 0x07E0)/3;
 80007d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007d4:	3301      	adds	r3, #1
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80007e2:	4a38      	ldr	r2, [pc, #224]	; (80008c4 <Gaussian_Filter+0x1dc>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	17db      	asrs	r3, r3, #31
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007ee:	4413      	add	r3, r2
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
			sum += (photo_buffer[i+1] & 0x001F)/3;
 80007f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007f4:	3301      	adds	r3, #1
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	f003 031f 	and.w	r3, r3, #31
 8000802:	4a30      	ldr	r2, [pc, #192]	; (80008c4 <Gaussian_Filter+0x1dc>)
 8000804:	fb82 1203 	smull	r1, r2, r2, r3
 8000808:	17db      	asrs	r3, r3, #31
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800080e:	4413      	add	r3, r2
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38

			sum += (photo_buffer[i-1] & 0xF800)/3;
 8000812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000814:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000818:	4413      	add	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8000826:	4a27      	ldr	r2, [pc, #156]	; (80008c4 <Gaussian_Filter+0x1dc>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	17db      	asrs	r3, r3, #31
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000832:	4413      	add	r3, r2
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
			sum += (photo_buffer[i-1] & 0x07E0)/3;
 8000836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000838:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800083c:	4413      	add	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	68fa      	ldr	r2, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <Gaussian_Filter+0x1dc>)
 800084c:	fb82 1203 	smull	r1, r2, r2, r3
 8000850:	17db      	asrs	r3, r3, #31
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000856:	4413      	add	r3, r2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
			sum += (photo_buffer[i-1] & 0x001F)/3;
 800085a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800085c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000860:	4413      	add	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	f003 031f 	and.w	r3, r3, #31
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <Gaussian_Filter+0x1dc>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	17db      	asrs	r3, r3, #31
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800087a:	4413      	add	r3, r2
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38

			//sum += photo_buffer[i-319]*filter[2][0];
			//sum += photo_buffer[i-320]*filter[2][1];
			//sum += photo_buffer[i-321]*filter[2][2];

			photo_blurred[i] = photo_buffer[i];
 800087e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	441a      	add	r2, r3
 8000886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	440b      	add	r3, r1
 800088e:	8812      	ldrh	r2, [r2, #0]
 8000890:	801a      	strh	r2, [r3, #0]
 8000892:	e009      	b.n	80008a8 <Gaussian_Filter+0x1c0>

		}
		else{
			photo_blurred[i] = photo_buffer[i];
 8000894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	441a      	add	r2, r3
 800089c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	440b      	add	r3, r1
 80008a4:	8812      	ldrh	r2, [r2, #0]
 80008a6:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<nb_pixels; i++){
 80008a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008aa:	3301      	adds	r3, #1
 80008ac:	647b      	str	r3, [r7, #68]	; 0x44
 80008ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	f6ff af28 	blt.w	8000708 <Gaussian_Filter+0x20>
		}
	}
}
 80008b8:	bf00      	nop
 80008ba:	3748      	adds	r7, #72	; 0x48
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	66666667 	.word	0x66666667
 80008c4:	55555556 	.word	0x55555556

080008c8 <TIM2_IRQHandler>:
int old_freq = 1;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TIM2_IRQHandler(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
	if(position>30 || position < -30){
 80008ce:	4b56      	ldr	r3, [pc, #344]	; (8000a28 <TIM2_IRQHandler+0x160>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b1e      	cmp	r3, #30
 80008d4:	dc04      	bgt.n	80008e0 <TIM2_IRQHandler+0x18>
 80008d6:	4b54      	ldr	r3, [pc, #336]	; (8000a28 <TIM2_IRQHandler+0x160>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f113 0f1e 	cmn.w	r3, #30
 80008de:	da19      	bge.n	8000914 <TIM2_IRQHandler+0x4c>
		if(position>0){
 80008e0:	4b51      	ldr	r3, [pc, #324]	; (8000a28 <TIM2_IRQHandler+0x160>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	dd08      	ble.n	80008fa <TIM2_IRQHandler+0x32>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
 80008e8:	2140      	movs	r1, #64	; 0x40
 80008ea:	4850      	ldr	r0, [pc, #320]	; (8000a2c <TIM2_IRQHandler+0x164>)
 80008ec:	f004 fffd 	bl	80058ea <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2180      	movs	r1, #128	; 0x80
 80008f4:	484d      	ldr	r0, [pc, #308]	; (8000a2c <TIM2_IRQHandler+0x164>)
 80008f6:	f004 ffdf 	bl	80058b8 <HAL_GPIO_WritePin>
		}
		if(position<0){
 80008fa:	4b4b      	ldr	r3, [pc, #300]	; (8000a28 <TIM2_IRQHandler+0x160>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	da08      	bge.n	8000914 <TIM2_IRQHandler+0x4c>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	4849      	ldr	r0, [pc, #292]	; (8000a2c <TIM2_IRQHandler+0x164>)
 8000906:	f004 fff0 	bl	80058ea <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	4847      	ldr	r0, [pc, #284]	; (8000a2c <TIM2_IRQHandler+0x164>)
 8000910:	f004 ffd2 	bl	80058b8 <HAL_GPIO_WritePin>
		}
	}
	if(position<30 && position > -30){
 8000914:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <TIM2_IRQHandler+0x160>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b1d      	cmp	r3, #29
 800091a:	dc0e      	bgt.n	800093a <TIM2_IRQHandler+0x72>
 800091c:	4b42      	ldr	r3, [pc, #264]	; (8000a28 <TIM2_IRQHandler+0x160>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f113 0f1d 	cmn.w	r3, #29
 8000924:	db09      	blt.n	800093a <TIM2_IRQHandler+0x72>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	4840      	ldr	r0, [pc, #256]	; (8000a2c <TIM2_IRQHandler+0x164>)
 800092c:	f004 ffc4 	bl	80058b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2140      	movs	r1, #64	; 0x40
 8000934:	483d      	ldr	r0, [pc, #244]	; (8000a2c <TIM2_IRQHandler+0x164>)
 8000936:	f004 ffbf 	bl	80058b8 <HAL_GPIO_WritePin>
	}
	//Calcul de freq
	absposition = (float)position;
 800093a:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <TIM2_IRQHandler+0x160>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000946:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <TIM2_IRQHandler+0x168>)
 8000948:	edc3 7a00 	vstr	s15, [r3]
	if(absposition<0) absposition = -absposition;
 800094c:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <TIM2_IRQHandler+0x168>)
 800094e:	edd3 7a00 	vldr	s15, [r3]
 8000952:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800095a:	d507      	bpl.n	800096c <TIM2_IRQHandler+0xa4>
 800095c:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <TIM2_IRQHandler+0x168>)
 800095e:	edd3 7a00 	vldr	s15, [r3]
 8000962:	eef1 7a67 	vneg.f32	s15, s15
 8000966:	4b32      	ldr	r3, [pc, #200]	; (8000a30 <TIM2_IRQHandler+0x168>)
 8000968:	edc3 7a00 	vstr	s15, [r3]
	freq = 10*((float)(absposition/160));
 800096c:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <TIM2_IRQHandler+0x168>)
 800096e:	ed93 7a00 	vldr	s14, [r3]
 8000972:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000a34 <TIM2_IRQHandler+0x16c>
 8000976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800097a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800097e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000986:	ee17 2a90 	vmov	r2, s15
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <TIM2_IRQHandler+0x170>)
 800098c:	601a      	str	r2, [r3, #0]
	if(freq < 2){
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <TIM2_IRQHandler+0x170>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	dc02      	bgt.n	800099c <TIM2_IRQHandler+0xd4>
		freq = 2;
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <TIM2_IRQHandler+0x170>)
 8000998:	2202      	movs	r2, #2
 800099a:	601a      	str	r2, [r3, #0]
	}
	if(old_freq != freq){
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <TIM2_IRQHandler+0x174>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <TIM2_IRQHandler+0x170>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d033      	beq.n	8000a10 <TIM2_IRQHandler+0x148>
		//Update de TIM2
		__TIM2_CLK_ENABLE();
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <TIM2_IRQHandler+0x178>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a24      	ldr	r2, [pc, #144]	; (8000a40 <TIM2_IRQHandler+0x178>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <TIM2_IRQHandler+0x178>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
		htim2.Instance = TIM2;
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <TIM2_IRQHandler+0x17c>)
 80009c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c6:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 10800-1;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <TIM2_IRQHandler+0x17c>)
 80009ca:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80009ce:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <TIM2_IRQHandler+0x17c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 9999/freq;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <TIM2_IRQHandler+0x170>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f242 720f 	movw	r2, #9999	; 0x270f
 80009de:	fb92 f3f3 	sdiv	r3, r2, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <TIM2_IRQHandler+0x17c>)
 80009e6:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <TIM2_IRQHandler+0x17c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <TIM2_IRQHandler+0x17c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
		HAL_TIM_Base_Init(&htim2);
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <TIM2_IRQHandler+0x17c>)
 80009f6:	f007 f92a 	bl	8007c4e <HAL_TIM_Base_Init>
		HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	201c      	movs	r0, #28
 8000a00:	f002 fc7b 	bl	80032fa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a04:	201c      	movs	r0, #28
 8000a06:	f002 fc94 	bl	8003332 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Start_IT(&htim2);
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <TIM2_IRQHandler+0x17c>)
 8000a0c:	f007 f94a 	bl	8007ca4 <HAL_TIM_Base_Start_IT>
	}

	old_freq = freq;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <TIM2_IRQHandler+0x170>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <TIM2_IRQHandler+0x174>)
 8000a16:	6013      	str	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim2);
 8000a18:	480a      	ldr	r0, [pc, #40]	; (8000a44 <TIM2_IRQHandler+0x17c>)
 8000a1a:	f007 f96d 	bl	8007cf8 <HAL_TIM_IRQHandler>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000048 	.word	0x20000048
 8000a2c:	40021800 	.word	0x40021800
 8000a30:	200002b0 	.word	0x200002b0
 8000a34:	43200000 	.word	0x43200000
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	2000000c 	.word	0x2000000c
 8000a40:	40023800 	.word	0x40023800
 8000a44:	20025cec 	.word	0x20025cec

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b097      	sub	sp, #92	; 0x5c
 8000a4c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	//TIM2
	__TIM2_CLK_ENABLE();
 8000a4e:	4b9c      	ldr	r3, [pc, #624]	; (8000cc0 <main+0x278>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a9b      	ldr	r2, [pc, #620]	; (8000cc0 <main+0x278>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b99      	ldr	r3, [pc, #612]	; (8000cc0 <main+0x278>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
	htim2.Instance = TIM2;
 8000a66:	4b97      	ldr	r3, [pc, #604]	; (8000cc4 <main+0x27c>)
 8000a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10800-1;
 8000a6e:	4b95      	ldr	r3, [pc, #596]	; (8000cc4 <main+0x27c>)
 8000a70:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000a74:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b93      	ldr	r3, [pc, #588]	; (8000cc4 <main+0x27c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9999/freq;
 8000a7c:	4b92      	ldr	r3, [pc, #584]	; (8000cc8 <main+0x280>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b8e      	ldr	r3, [pc, #568]	; (8000cc4 <main+0x27c>)
 8000a8c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b8d      	ldr	r3, [pc, #564]	; (8000cc4 <main+0x27c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b8b      	ldr	r3, [pc, #556]	; (8000cc4 <main+0x27c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 8000a9a:	488a      	ldr	r0, [pc, #552]	; (8000cc4 <main+0x27c>)
 8000a9c:	f007 f8d7 	bl	8007c4e <HAL_TIM_Base_Init>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	201c      	movs	r0, #28
 8000aa6:	f002 fc28 	bl	80032fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aaa:	201c      	movs	r0, #28
 8000aac:	f002 fc41 	bl	8003332 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 8000ab0:	4884      	ldr	r0, [pc, #528]	; (8000cc4 <main+0x27c>)
 8000ab2:	f007 f8f7 	bl	8007ca4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f002 fac6 	bl	8003046 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f917 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abe:	f000 fbeb 	bl	8001298 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ac2:	f000 fb7d 	bl	80011c0 <MX_DMA_Init>
  MX_DCMI_Init();
 8000ac6:	f000 f9ad 	bl	8000e24 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000aca:	f000 f9df 	bl	8000e8c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000ace:	f000 fb95 	bl	80011fc <MX_FMC_Init>
  MX_USART1_UART_Init();
 8000ad2:	f000 fb45 	bl	8001160 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8000ad6:	f000 fa0b 	bl	8000ef0 <MX_LTDC_Init>
  MX_TIM6_Init();
 8000ada:	f000 fb0b 	bl	80010f4 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000ade:	f000 fab9 	bl	8001054 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LTDC_Init(SDRAM_BANK_1_LTCD, 0, 0, 320, 240);
 8000ae2:	23f0      	movs	r3, #240	; 0xf0
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	4877      	ldr	r0, [pc, #476]	; (8000ccc <main+0x284>)
 8000af0:	f000 fff6 	bl	8001ae0 <LTDC_Init>
  BSP_SDRAM_Init();
 8000af4:	f001 fcd0 	bl	8002498 <BSP_SDRAM_Init>
  CAMERA_Init(CAMERA_R320x240);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f001 f8bd 	bl	8001c78 <CAMERA_Init>
  HAL_Delay(1000); //Delay for the camera to output correct data
 8000afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b02:	f002 fafd 	bl	8003100 <HAL_Delay>
  Im_size = 0x9600; //size=320*240*2/4
 8000b06:	4b72      	ldr	r3, [pc, #456]	; (8000cd0 <main+0x288>)
 8000b08:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b0c:	601a      	str	r2, [r3, #0]

  /* uncomment the following line in case of snapshot mode */
  //HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, SDRAM_BANK_1_DCMI, Im_size);
  /* uncomment the following line in case of continuous mode */
  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS , SDRAM_BANK_1_DCMI, Im_size);
 8000b0e:	4b70      	ldr	r3, [pc, #448]	; (8000cd0 <main+0x288>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000b16:	2100      	movs	r1, #0
 8000b18:	486e      	ldr	r0, [pc, #440]	; (8000cd4 <main+0x28c>)
 8000b1a:	f002 fc9f 	bl	800345c <HAL_DCMI_Start_DMA>

  // seuilBleu, seuilVert = partie qui passe
  uint16_t seuilRouge = 50, seuilVert = 50, seuilBleu = 50;
 8000b1e:	2332      	movs	r3, #50	; 0x32
 8000b20:	877b      	strh	r3, [r7, #58]	; 0x3a
 8000b22:	2332      	movs	r3, #50	; 0x32
 8000b24:	873b      	strh	r3, [r7, #56]	; 0x38
 8000b26:	2332      	movs	r3, #50	; 0x32
 8000b28:	86fb      	strh	r3, [r7, #54]	; 0x36

  seuilVert = (uint16_t) seuilVert*2016/100;
 8000b2a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	019b      	lsls	r3, r3, #6
 8000b30:	1a9b      	subs	r3, r3, r2
 8000b32:	015b      	lsls	r3, r3, #5
 8000b34:	4a68      	ldr	r2, [pc, #416]	; (8000cd8 <main+0x290>)
 8000b36:	fb82 1203 	smull	r1, r2, r2, r3
 8000b3a:	1152      	asrs	r2, r2, #5
 8000b3c:	17db      	asrs	r3, r3, #31
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	873b      	strh	r3, [r7, #56]	; 0x38
  seuilBleu = (uint16_t) seuilBleu*31/100;
 8000b42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000b44:	4613      	mov	r3, r2
 8000b46:	015b      	lsls	r3, r3, #5
 8000b48:	1a9b      	subs	r3, r3, r2
 8000b4a:	4a63      	ldr	r2, [pc, #396]	; (8000cd8 <main+0x290>)
 8000b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b50:	1152      	asrs	r2, r2, #5
 8000b52:	17db      	asrs	r3, r3, #31
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	86fb      	strh	r3, [r7, #54]	; 0x36
  seuilRouge = (uint16_t) (100-seuilRouge)*63488/100;
 8000b58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b5a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	4613      	mov	r3, r2
 8000b64:	015b      	lsls	r3, r3, #5
 8000b66:	1a9b      	subs	r3, r3, r2
 8000b68:	02db      	lsls	r3, r3, #11
 8000b6a:	4a5b      	ldr	r2, [pc, #364]	; (8000cd8 <main+0x290>)
 8000b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b70:	1152      	asrs	r2, r2, #5
 8000b72:	17db      	asrs	r3, r3, #31
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	877b      	strh	r3, [r7, #58]	; 0x3a
  HAL_TIM_Base_Start_IT(&htim3);
 8000b78:	4858      	ldr	r0, [pc, #352]	; (8000cdc <main+0x294>)
 8000b7a:	f007 f893 	bl	8007ca4 <HAL_TIM_Base_Start_IT>

  // Init the kernel
  int largeur_kernel = 3;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t size_kernel = (largeur_kernel - 1)*320+largeur_kernel;
 8000b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b84:	1e5a      	subs	r2, r3, #1
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	019b      	lsls	r3, r3, #6
 8000b8e:	461a      	mov	r2, r3
 8000b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b92:	4413      	add	r3, r2
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  float kernel[size_kernel];
 8000b96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b98:	4603      	mov	r3, r0
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	f04f 0400 	mov.w	r4, #0
 8000bac:	0154      	lsls	r4, r2, #5
 8000bae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000bb2:	014b      	lsls	r3, r1, #5
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	f04f 0200 	mov.w	r2, #0
 8000bba:	f04f 0300 	mov.w	r3, #0
 8000bbe:	f04f 0400 	mov.w	r4, #0
 8000bc2:	0154      	lsls	r4, r2, #5
 8000bc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000bc8:	014b      	lsls	r3, r1, #5
 8000bca:	0083      	lsls	r3, r0, #2
 8000bcc:	3303      	adds	r3, #3
 8000bce:	3307      	adds	r3, #7
 8000bd0:	08db      	lsrs	r3, r3, #3
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	ebad 0d03 	sub.w	sp, sp, r3
 8000bd8:	ab04      	add	r3, sp, #16
 8000bda:	3303      	adds	r3, #3
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  for(int i=0; i<size_kernel; i++){
 8000be2:	2300      	movs	r3, #0
 8000be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000be6:	e009      	b.n	8000bfc <main+0x1b4>
	kernel[i] = 0;
 8000be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
  for(int i=0; i<size_kernel; i++){
 8000bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f1      	bhi.n	8000be8 <main+0x1a0>
  }
  for(int i=0;i<largeur_kernel; i++){
 8000c04:	2300      	movs	r3, #0
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40
 8000c08:	e01a      	b.n	8000c40 <main+0x1f8>
	  for(int j=0;j<largeur_kernel; j++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8000c0e:	e010      	b.n	8000c32 <main+0x1ea>
		  kernel[i + 320*j] = 1/9;
 8000c10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c12:	4613      	mov	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c1e:	4413      	add	r3, r2
 8000c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4413      	add	r3, r2
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
	  for(int j=0;j<largeur_kernel; j++){
 8000c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c2e:	3301      	adds	r3, #1
 8000c30:	647b      	str	r3, [r7, #68]	; 0x44
 8000c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dbea      	blt.n	8000c10 <main+0x1c8>
  for(int i=0;i<largeur_kernel; i++){
 8000c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8000c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbe0      	blt.n	8000c0a <main+0x1c2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_SDRAM_ReadData(SDRAM_BANK_1_DCMI, (uint32_t*)photo_buffer_32, SIZE_BUFFER_32);
 8000c48:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000c4c:	4924      	ldr	r1, [pc, #144]	; (8000ce0 <main+0x298>)
 8000c4e:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8000c52:	f001 fcdf 	bl	8002614 <BSP_SDRAM_ReadData>
	  uint16_t* photo_buffer_16 = (uint16_t*) photo_buffer_32;
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <main+0x298>)
 8000c58:	623b      	str	r3, [r7, #32]

	  int x, y, k;
	  int* px = &x; int* py = &y; int* pk = &k;
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	61fb      	str	r3, [r7, #28]
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	463b      	mov	r3, r7
 8000c66:	617b      	str	r3, [r7, #20]

	  uint16_t* photo_treated_buffer_16 = (uint16_t*) photo_treated_buffer_32;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <main+0x29c>)
 8000c6a:	613b      	str	r3, [r7, #16]
	  Gaussian_Filter(photo_buffer_16, photo_buffer_16, NB_PIXELS);
 8000c6c:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8000c70:	6a39      	ldr	r1, [r7, #32]
 8000c72:	6a38      	ldr	r0, [r7, #32]
 8000c74:	f7ff fd38 	bl	80006e8 <Gaussian_Filter>
	  Filter_Colors_And_Get_Center(seuilRouge,  seuilVert, seuilBleu, NB_PIXELS, photo_buffer_16, px, py, pk);
 8000c78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c7a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8000c7c:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	9303      	str	r3, [sp, #12]
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000c92:	f7ff fc93 	bl	80005bc <Filter_Colors_And_Get_Center>
	  position = x - 160;
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	3ba0      	subs	r3, #160	; 0xa0
 8000c9a:	4a13      	ldr	r2, [pc, #76]	; (8000ce8 <main+0x2a0>)
 8000c9c:	6013      	str	r3, [r2, #0]
	  Draw_Blue_Cross(x, y, 1, photo_buffer_16);
 8000c9e:	68b8      	ldr	r0, [r7, #8]
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f7ff fc2f 	bl	8000508 <Draw_Blue_Cross>

	  //Gaussian_Filter_Fast(photo_buffer_16, kernel, size_kernel, photo_buffer_16, NB_PIXELS);

	  BSP_SDRAM_WriteData(SDRAM_BANK_1_LTCD, (uint32_t*)photo_buffer_32, SIZE_BUFFER_32);
 8000caa:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000cae:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <main+0x298>)
 8000cb0:	4806      	ldr	r0, [pc, #24]	; (8000ccc <main+0x284>)
 8000cb2:	f001 fcc7 	bl	8002644 <BSP_SDRAM_WriteData>

	  HAL_Delay(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f002 fa22 	bl	8003100 <HAL_Delay>
  {
 8000cbc:	e7c4      	b.n	8000c48 <main+0x200>
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	20025cec 	.word	0x20025cec
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	c0200000 	.word	0xc0200000
 8000cd0:	200000ec 	.word	0x200000ec
 8000cd4:	2000039c 	.word	0x2000039c
 8000cd8:	51eb851f 	.word	0x51eb851f
 8000cdc:	200002b4 	.word	0x200002b4
 8000ce0:	200004ac 	.word	0x200004ac
 8000ce4:	20025da0 	.word	0x20025da0
 8000ce8:	20000048 	.word	0x20000048

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0b4      	sub	sp, #208	; 0xd0
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000cf6:	2230      	movs	r2, #48	; 0x30
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f008 f972 	bl	8008fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	2284      	movs	r2, #132	; 0x84
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f008 f963 	bl	8008fe4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <SystemClock_Config+0x130>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a3e      	ldr	r2, [pc, #248]	; (8000e1c <SystemClock_Config+0x130>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <SystemClock_Config+0x130>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d36:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <SystemClock_Config+0x134>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a39      	ldr	r2, [pc, #228]	; (8000e20 <SystemClock_Config+0x134>)
 8000d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <SystemClock_Config+0x134>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d72:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f005 fdfa 	bl	8006984 <HAL_RCC_OscConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d96:	f000 ffad 	bl	8001cf4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d9a:	f005 fda3 	bl	80068e4 <HAL_PWREx_EnableOverDrive>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000da4:	f000 ffa6 	bl	8001cf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da8:	230f      	movs	r3, #15
 8000daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dae:	2302      	movs	r3, #2
 8000db0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000dca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dce:	2106      	movs	r1, #6
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f006 f87b 	bl	8006ecc <HAL_RCC_ClockConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000ddc:	f000 ff8a 	bl	8001cf4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 8000de0:	2348      	movs	r3, #72	; 0x48
 8000de2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000de4:	23c0      	movs	r3, #192	; 0xc0
 8000de6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	4618      	mov	r0, r3
 8000e06:	f006 fa33 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000e10:	f000 ff70 	bl	8001cf4 <Error_Handler>
  }
}
 8000e14:	bf00      	nop
 8000e16:	37d0      	adds	r7, #208	; 0xd0
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <MX_DCMI_Init+0x64>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e36:	2220      	movs	r2, #32
 8000e38:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_DCMI_Init+0x60>)
 8000e72:	f002 fa79 	bl	8003368 <HAL_DCMI_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000e7c:	f000 ff3a 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000039c 	.word	0x2000039c
 8000e88:	50050000 	.word	0x50050000

08000e8c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_DMA2D_Init+0x5c>)
 8000e92:	4a16      	ldr	r2, [pc, #88]	; (8000eec <MX_DMA2D_Init+0x60>)
 8000e94:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_DMA2D_Init+0x5c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_DMA2D_Init+0x5c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_DMA2D_Init+0x5c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_DMA2D_Init+0x5c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_DMA2D_Init+0x5c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_DMA2D_Init+0x5c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_DMA2D_Init+0x5c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <MX_DMA2D_Init+0x5c>)
 8000ec2:	f003 f8fd 	bl	80040c0 <HAL_DMA2D_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ecc:	f000 ff12 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_DMA2D_Init+0x5c>)
 8000ed4:	f003 f93e 	bl	8004154 <HAL_DMA2D_ConfigLayer>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ede:	f000 ff09 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20025cac 	.word	0x20025cac
 8000eec:	4002b000 	.word	0x4002b000

08000ef0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09a      	sub	sp, #104	; 0x68
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ef6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000efa:	2234      	movs	r2, #52	; 0x34
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f008 f870 	bl	8008fe4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2234      	movs	r2, #52	; 0x34
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f008 f86a 	bl	8008fe4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f10:	4b4e      	ldr	r3, [pc, #312]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f12:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <MX_LTDC_Init+0x160>)
 8000f14:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f16:	4b4d      	ldr	r3, [pc, #308]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f22:	4b4a      	ldr	r3, [pc, #296]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f28:	4b48      	ldr	r3, [pc, #288]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f34:	4b45      	ldr	r3, [pc, #276]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f3a:	4b44      	ldr	r3, [pc, #272]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f3c:	220e      	movs	r2, #14
 8000f3e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f40:	4b42      	ldr	r3, [pc, #264]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f42:	2205      	movs	r2, #5
 8000f44:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f48:	f240 228e 	movw	r2, #654	; 0x28e
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f50:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f58:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f60:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f76:	4b35      	ldr	r3, [pc, #212]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f7e:	4833      	ldr	r0, [pc, #204]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f80:	f005 f9fa 	bl	8006378 <HAL_LTDC_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000f8a:	f000 feb3 	bl	8001cf4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fae:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481c      	ldr	r0, [pc, #112]	; (800104c <MX_LTDC_Init+0x15c>)
 8000fdc:	f005 fa9c 	bl	8006518 <HAL_LTDC_ConfigLayer>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000fe6:	f000 fe85 	bl	8001cf4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800100c:	2305      	movs	r3, #5
 800100e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_LTDC_Init+0x15c>)
 8001036:	f005 fa6f 	bl	8006518 <HAL_LTDC_ConfigLayer>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001040:	f000 fe58 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3768      	adds	r7, #104	; 0x68
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200002f4 	.word	0x200002f4
 8001050:	40016800 	.word	0x40016800

08001054 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <MX_TIM3_Init+0x98>)
 8001074:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <MX_TIM3_Init+0x9c>)
 8001076:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <MX_TIM3_Init+0x98>)
 800107a:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800107e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_TIM3_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_TIM3_Init+0x98>)
 8001088:	f242 720f 	movw	r2, #9999	; 0x270f
 800108c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_TIM3_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_TIM3_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800109a:	4814      	ldr	r0, [pc, #80]	; (80010ec <MX_TIM3_Init+0x98>)
 800109c:	f006 fdd7 	bl	8007c4e <HAL_TIM_Base_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80010a6:	f000 fe25 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_TIM3_Init+0x98>)
 80010b8:	f006 ff3e 	bl	8007f38 <HAL_TIM_ConfigClockSource>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80010c2:	f000 fe17 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <MX_TIM3_Init+0x98>)
 80010d4:	f007 f94c 	bl	8008370 <HAL_TIMEx_MasterConfigSynchronization>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80010de:	f000 fe09 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200002b4 	.word	0x200002b4
 80010f0:	40000400 	.word	0x40000400

080010f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_TIM6_Init+0x64>)
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <MX_TIM6_Init+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_TIM6_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_TIM6_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_TIM6_Init+0x64>)
 8001118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_TIM6_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <MX_TIM6_Init+0x64>)
 8001126:	f006 fd92 	bl	8007c4e <HAL_TIM_Base_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001130:	f000 fde0 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_TIM6_Init+0x64>)
 8001142:	f007 f915 	bl	8008370 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800114c:	f000 fdd2 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000046c 	.word	0x2000046c
 800115c:	40001000 	.word	0x40001000

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <MX_USART1_UART_Init+0x5c>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_USART1_UART_Init+0x58>)
 80011a4:	f007 f990 	bl	80084c8 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 fda1 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200003ec 	.word	0x200003ec
 80011bc:	40011000 	.word	0x40011000

080011c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_DMA_Init+0x38>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <MX_DMA_Init+0x38>)
 80011cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_DMA_Init+0x38>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2039      	movs	r0, #57	; 0x39
 80011e4:	f002 f889 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011e8:	2039      	movs	r0, #57	; 0x39
 80011ea:	f002 f8a2 	bl	8003332 <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <MX_FMC_Init+0x94>)
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <MX_FMC_Init+0x98>)
 8001218:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_FMC_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_FMC_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_FMC_Init+0x94>)
 8001228:	2204      	movs	r2, #4
 800122a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_FMC_Init+0x94>)
 800122e:	2210      	movs	r2, #16
 8001230:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_FMC_Init+0x94>)
 8001234:	2240      	movs	r2, #64	; 0x40
 8001236:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_FMC_Init+0x94>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_FMC_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_FMC_Init+0x94>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_FMC_Init+0x94>)
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_FMC_Init+0x94>)
 8001252:	2200      	movs	r2, #0
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001256:	2310      	movs	r3, #16
 8001258:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800125a:	2310      	movs	r3, #16
 800125c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800125e:	2310      	movs	r3, #16
 8001260:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001262:	2310      	movs	r3, #16
 8001264:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001266:	2310      	movs	r3, #16
 8001268:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800126a:	2310      	movs	r3, #16
 800126c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800126e:	2310      	movs	r3, #16
 8001270:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_FMC_Init+0x94>)
 8001278:	f006 fbe8 	bl	8007a4c <HAL_SDRAM_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001282:	f000 fd37 	bl	8001cf4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20025d2c 	.word	0x20025d2c
 8001294:	a0000140 	.word	0xa0000140

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b090      	sub	sp, #64	; 0x40
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ae:	4bae      	ldr	r3, [pc, #696]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4aad      	ldr	r2, [pc, #692]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4bab      	ldr	r3, [pc, #684]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c6:	4ba8      	ldr	r3, [pc, #672]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4aa7      	ldr	r2, [pc, #668]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4ba5      	ldr	r3, [pc, #660]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4ba2      	ldr	r3, [pc, #648]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4aa1      	ldr	r2, [pc, #644]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b9f      	ldr	r3, [pc, #636]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4b9c      	ldr	r3, [pc, #624]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a9b      	ldr	r2, [pc, #620]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b99      	ldr	r3, [pc, #612]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b96      	ldr	r3, [pc, #600]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a95      	ldr	r2, [pc, #596]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b93      	ldr	r3, [pc, #588]	; (8001568 <MX_GPIO_Init+0x2d0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b90      	ldr	r3, [pc, #576]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a8f      	ldr	r2, [pc, #572]	; (8001568 <MX_GPIO_Init+0x2d0>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b8d      	ldr	r3, [pc, #564]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800133e:	4b8a      	ldr	r3, [pc, #552]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a89      	ldr	r2, [pc, #548]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b87      	ldr	r3, [pc, #540]	; (8001568 <MX_GPIO_Init+0x2d0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001356:	4b84      	ldr	r3, [pc, #528]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a83      	ldr	r2, [pc, #524]	; (8001568 <MX_GPIO_Init+0x2d0>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b81      	ldr	r3, [pc, #516]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800136e:	4b7e      	ldr	r3, [pc, #504]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a7d      	ldr	r2, [pc, #500]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b7b      	ldr	r3, [pc, #492]	; (8001568 <MX_GPIO_Init+0x2d0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001386:	4b78      	ldr	r3, [pc, #480]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a77      	ldr	r2, [pc, #476]	; (8001568 <MX_GPIO_Init+0x2d0>)
 800138c:	f043 0320 	orr.w	r3, r3, #32
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b75      	ldr	r3, [pc, #468]	; (8001568 <MX_GPIO_Init+0x2d0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0320 	and.w	r3, r3, #32
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	4b72      	ldr	r3, [pc, #456]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a71      	ldr	r2, [pc, #452]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80013a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b6f      	ldr	r3, [pc, #444]	; (8001568 <MX_GPIO_Init+0x2d0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2120      	movs	r1, #32
 80013ba:	486c      	ldr	r0, [pc, #432]	; (800156c <MX_GPIO_Init+0x2d4>)
 80013bc:	f004 fa7c 	bl	80058b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f241 010c 	movw	r1, #4108	; 0x100c
 80013c6:	486a      	ldr	r0, [pc, #424]	; (8001570 <MX_GPIO_Init+0x2d8>)
 80013c8:	f004 fa76 	bl	80058b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2108      	movs	r1, #8
 80013d0:	4868      	ldr	r0, [pc, #416]	; (8001574 <MX_GPIO_Init+0x2dc>)
 80013d2:	f004 fa71 	bl	80058b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013dc:	4866      	ldr	r0, [pc, #408]	; (8001578 <MX_GPIO_Init+0x2e0>)
 80013de:	f004 fa6b 	bl	80058b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	21c8      	movs	r1, #200	; 0xc8
 80013e6:	4865      	ldr	r0, [pc, #404]	; (800157c <MX_GPIO_Init+0x2e4>)
 80013e8:	f004 fa66 	bl	80058b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80013ec:	2308      	movs	r3, #8
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fc:	4619      	mov	r1, r3
 80013fe:	4860      	ldr	r0, [pc, #384]	; (8001580 <MX_GPIO_Init+0x2e8>)
 8001400:	f004 f8b0 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001404:	2304      	movs	r3, #4
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001414:	2309      	movs	r3, #9
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141c:	4619      	mov	r1, r3
 800141e:	4858      	ldr	r0, [pc, #352]	; (8001580 <MX_GPIO_Init+0x2e8>)
 8001420:	f004 f8a0 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001424:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001436:	230b      	movs	r3, #11
 8001438:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143e:	4619      	mov	r1, r3
 8001440:	484e      	ldr	r0, [pc, #312]	; (800157c <MX_GPIO_Init+0x2e4>)
 8001442:	f004 f88f 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001446:	f44f 7340 	mov.w	r3, #768	; 0x300
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144c:	2312      	movs	r3, #18
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001450:	2301      	movs	r3, #1
 8001452:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001458:	2304      	movs	r3, #4
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001460:	4619      	mov	r1, r3
 8001462:	4848      	ldr	r0, [pc, #288]	; (8001584 <MX_GPIO_Init+0x2ec>)
 8001464:	f004 f87e 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001468:	f643 4323 	movw	r3, #15395	; 0x3c23
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800147a:	230a      	movs	r3, #10
 800147c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001482:	4619      	mov	r1, r3
 8001484:	483f      	ldr	r0, [pc, #252]	; (8001584 <MX_GPIO_Init+0x2ec>)
 8001486:	f004 f86d 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800149a:	2308      	movs	r3, #8
 800149c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a2:	4619      	mov	r1, r3
 80014a4:	4831      	ldr	r0, [pc, #196]	; (800156c <MX_GPIO_Init+0x2d4>)
 80014a6:	f004 f85d 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80014aa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014bc:	230c      	movs	r3, #12
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c4:	4619      	mov	r1, r3
 80014c6:	4830      	ldr	r0, [pc, #192]	; (8001588 <MX_GPIO_Init+0x2f0>)
 80014c8:	f004 f84c 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80014cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014de:	2301      	movs	r3, #1
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e6:	4619      	mov	r1, r3
 80014e8:	4828      	ldr	r0, [pc, #160]	; (800158c <MX_GPIO_Init+0x2f4>)
 80014ea:	f004 f83b 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80014ee:	2340      	movs	r3, #64	; 0x40
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014fe:	230a      	movs	r3, #10
 8001500:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001506:	4619      	mov	r1, r3
 8001508:	481e      	ldr	r0, [pc, #120]	; (8001584 <MX_GPIO_Init+0x2ec>)
 800150a:	f004 f82b 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001520:	4619      	mov	r1, r3
 8001522:	481b      	ldr	r0, [pc, #108]	; (8001590 <MX_GPIO_Init+0x2f8>)
 8001524:	f004 f81e 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001528:	2340      	movs	r3, #64	; 0x40
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_GPIO_Init+0x2fc>)
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001538:	4619      	mov	r1, r3
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <MX_GPIO_Init+0x2d4>)
 800153c:	f004 f812 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001540:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001552:	230a      	movs	r3, #10
 8001554:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155a:	4619      	mov	r1, r3
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <MX_GPIO_Init+0x2f4>)
 800155e:	f004 f801 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001562:	23f0      	movs	r3, #240	; 0xf0
 8001564:	e018      	b.n	8001598 <MX_GPIO_Init+0x300>
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40022000 	.word	0x40022000
 8001574:	40022800 	.word	0x40022800
 8001578:	40021c00 	.word	0x40021c00
 800157c:	40021800 	.word	0x40021800
 8001580:	40021000 	.word	0x40021000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020000 	.word	0x40020000
 8001590:	40022400 	.word	0x40022400
 8001594:	10120000 	.word	0x10120000
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015a6:	230a      	movs	r3, #10
 80015a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ae:	4619      	mov	r1, r3
 80015b0:	48bb      	ldr	r0, [pc, #748]	; (80018a0 <MX_GPIO_Init+0x608>)
 80015b2:	f003 ffd7 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80015b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015c8:	230a      	movs	r3, #10
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d0:	4619      	mov	r1, r3
 80015d2:	48b4      	ldr	r0, [pc, #720]	; (80018a4 <MX_GPIO_Init+0x60c>)
 80015d4:	f003 ffc6 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015d8:	2320      	movs	r3, #32
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ec:	4619      	mov	r1, r3
 80015ee:	48ae      	ldr	r0, [pc, #696]	; (80018a8 <MX_GPIO_Init+0x610>)
 80015f0:	f003 ffb8 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80015f4:	f241 030c 	movw	r3, #4108	; 0x100c
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160a:	4619      	mov	r1, r3
 800160c:	48a4      	ldr	r0, [pc, #656]	; (80018a0 <MX_GPIO_Init+0x608>)
 800160e:	f003 ffa9 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001624:	4619      	mov	r1, r3
 8001626:	48a1      	ldr	r0, [pc, #644]	; (80018ac <MX_GPIO_Init+0x614>)
 8001628:	f003 ff9c 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800162c:	2308      	movs	r3, #8
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001640:	4619      	mov	r1, r3
 8001642:	489b      	ldr	r0, [pc, #620]	; (80018b0 <MX_GPIO_Init+0x618>)
 8001644:	f003 ff8e 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001648:	2310      	movs	r3, #16
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001658:	4619      	mov	r1, r3
 800165a:	4893      	ldr	r0, [pc, #588]	; (80018a8 <MX_GPIO_Init+0x610>)
 800165c:	f003 ff82 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001660:	2304      	movs	r3, #4
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001670:	230c      	movs	r3, #12
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001678:	4619      	mov	r1, r3
 800167a:	488b      	ldr	r0, [pc, #556]	; (80018a8 <MX_GPIO_Init+0x610>)
 800167c:	f003 ff72 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001680:	f248 0304 	movw	r3, #32772	; 0x8004
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001686:	2300      	movs	r3, #0
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800168e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001692:	4619      	mov	r1, r3
 8001694:	4887      	ldr	r0, [pc, #540]	; (80018b4 <MX_GPIO_Init+0x61c>)
 8001696:	f003 ff65 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800169a:	2302      	movs	r3, #2
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016aa:	2305      	movs	r3, #5
 80016ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b2:	4619      	mov	r1, r3
 80016b4:	487a      	ldr	r0, [pc, #488]	; (80018a0 <MX_GPIO_Init+0x608>)
 80016b6:	f003 ff55 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80016ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	2302      	movs	r3, #2
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d0:	4619      	mov	r1, r3
 80016d2:	4878      	ldr	r0, [pc, #480]	; (80018b4 <MX_GPIO_Init+0x61c>)
 80016d4:	f003 ff46 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80016d8:	2301      	movs	r3, #1
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80016e8:	2302      	movs	r3, #2
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f0:	4619      	mov	r1, r3
 80016f2:	486b      	ldr	r0, [pc, #428]	; (80018a0 <MX_GPIO_Init+0x608>)
 80016f4:	f003 ff36 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80016f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800170a:	2301      	movs	r3, #1
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001712:	4619      	mov	r1, r3
 8001714:	4868      	ldr	r0, [pc, #416]	; (80018b8 <MX_GPIO_Init+0x620>)
 8001716:	f003 ff25 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800171a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001720:	4b66      	ldr	r3, [pc, #408]	; (80018bc <MX_GPIO_Init+0x624>)
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172c:	4619      	mov	r1, r3
 800172e:	485c      	ldr	r0, [pc, #368]	; (80018a0 <MX_GPIO_Init+0x608>)
 8001730:	f003 ff18 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001734:	23c0      	movs	r3, #192	; 0xc0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001744:	2308      	movs	r3, #8
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174c:	4619      	mov	r1, r3
 800174e:	4857      	ldr	r0, [pc, #348]	; (80018ac <MX_GPIO_Init+0x614>)
 8001750:	f003 ff08 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001754:	2310      	movs	r3, #16
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001764:	230a      	movs	r3, #10
 8001766:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176c:	4619      	mov	r1, r3
 800176e:	4851      	ldr	r0, [pc, #324]	; (80018b4 <MX_GPIO_Init+0x61c>)
 8001770:	f003 fef8 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin;
 8001774:	23c0      	movs	r3, #192	; 0xc0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001780:	2301      	movs	r3, #1
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001788:	4619      	mov	r1, r3
 800178a:	4846      	ldr	r0, [pc, #280]	; (80018a4 <MX_GPIO_Init+0x60c>)
 800178c:	f003 feea 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001790:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001796:	2303      	movs	r3, #3
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800179e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a2:	4619      	mov	r1, r3
 80017a4:	4846      	ldr	r0, [pc, #280]	; (80018c0 <MX_GPIO_Init+0x628>)
 80017a6:	f003 fedd 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80017aa:	2305      	movs	r3, #5
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017ba:	230a      	movs	r3, #10
 80017bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c2:	4619      	mov	r1, r3
 80017c4:	4839      	ldr	r0, [pc, #228]	; (80018ac <MX_GPIO_Init+0x614>)
 80017c6:	f003 fecd 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017ca:	2332      	movs	r3, #50	; 0x32
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017da:	230b      	movs	r3, #11
 80017dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e2:	4619      	mov	r1, r3
 80017e4:	4831      	ldr	r0, [pc, #196]	; (80018ac <MX_GPIO_Init+0x614>)
 80017e6:	f003 febd 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017ea:	2304      	movs	r3, #4
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017fa:	2309      	movs	r3, #9
 80017fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001802:	4619      	mov	r1, r3
 8001804:	482f      	ldr	r0, [pc, #188]	; (80018c4 <MX_GPIO_Init+0x62c>)
 8001806:	f003 fead 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800180a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800181c:	2309      	movs	r3, #9
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001824:	4619      	mov	r1, r3
 8001826:	4820      	ldr	r0, [pc, #128]	; (80018a8 <MX_GPIO_Init+0x610>)
 8001828:	f003 fe9c 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800182c:	2308      	movs	r3, #8
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	4818      	ldr	r0, [pc, #96]	; (80018a4 <MX_GPIO_Init+0x60c>)
 8001844:	f003 fe8e 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001848:	2304      	movs	r3, #4
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001858:	4619      	mov	r1, r3
 800185a:	4812      	ldr	r0, [pc, #72]	; (80018a4 <MX_GPIO_Init+0x60c>)
 800185c:	f003 fe82 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001860:	2386      	movs	r3, #134	; 0x86
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001870:	230b      	movs	r3, #11
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001878:	4619      	mov	r1, r3
 800187a:	480f      	ldr	r0, [pc, #60]	; (80018b8 <MX_GPIO_Init+0x620>)
 800187c:	f003 fe72 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001880:	2301      	movs	r3, #1
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001884:	2303      	movs	r3, #3
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001890:	4619      	mov	r1, r3
 8001892:	4809      	ldr	r0, [pc, #36]	; (80018b8 <MX_GPIO_Init+0x620>)
 8001894:	f003 fe66 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001898:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800189e:	e013      	b.n	80018c8 <MX_GPIO_Init+0x630>
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40021800 	.word	0x40021800
 80018a8:	40020c00 	.word	0x40020c00
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40022800 	.word	0x40022800
 80018b4:	40021c00 	.word	0x40021c00
 80018b8:	40020000 	.word	0x40020000
 80018bc:	10120000 	.word	0x10120000
 80018c0:	40021400 	.word	0x40021400
 80018c4:	40020400 	.word	0x40020400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c8:	2312      	movs	r3, #18
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018d4:	2304      	movs	r3, #4
 80018d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018dc:	4619      	mov	r1, r3
 80018de:	481c      	ldr	r0, [pc, #112]	; (8001950 <MX_GPIO_Init+0x6b8>)
 80018e0:	f003 fe40 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80018e4:	2328      	movs	r3, #40	; 0x28
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018f4:	230a      	movs	r3, #10
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fc:	4619      	mov	r1, r3
 80018fe:	4815      	ldr	r0, [pc, #84]	; (8001954 <MX_GPIO_Init+0x6bc>)
 8001900:	f003 fe30 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001904:	2340      	movs	r3, #64	; 0x40
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001914:	2309      	movs	r3, #9
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191c:	4619      	mov	r1, r3
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_GPIO_Init+0x6b8>)
 8001920:	f003 fe20 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001924:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001936:	2305      	movs	r3, #5
 8001938:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_GPIO_Init+0x6c0>)
 8001942:	f003 fe0f 	bl	8005564 <HAL_GPIO_Init>

}
 8001946:	bf00      	nop
 8001948:	3740      	adds	r7, #64	; 0x40
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40021c00 	.word	0x40021c00
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400

0800195c <LCD_GPIO_Init>:

/* USER CODE BEGIN 4 */
void LCD_GPIO_Init(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08e      	sub	sp, #56	; 0x38
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
 GPIO_InitTypeDef gpio_init_structure;
 /* Enable the LTDC and DMA2D clocks */
 __HAL_RCC_LTDC_CLK_ENABLE();
 8001966:	4b58      	ldr	r3, [pc, #352]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a57      	ldr	r2, [pc, #348]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 800196c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b55      	ldr	r3, [pc, #340]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	6a3b      	ldr	r3, [r7, #32]
 __HAL_RCC_DMA2D_CLK_ENABLE();
 800197e:	4b52      	ldr	r3, [pc, #328]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 8001984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 /* Enable GPIOs clock */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ae:	4b46      	ldr	r3, [pc, #280]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a45      	ldr	r2, [pc, #276]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
 __HAL_RCC_GPIOI_CLK_ENABLE();
 80019c6:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
 __HAL_RCC_GPIOJ_CLK_ENABLE();
 80019de:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a39      	ldr	r2, [pc, #228]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOK_CLK_ENABLE();
 80019f6:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a33      	ldr	r2, [pc, #204]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 80019fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <LCD_GPIO_Init+0x16c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 /*** LTDC Pins configuration ***/
 /* GPIOE configuration */
 gpio_init_structure.Pin = GPIO_PIN_4;
 8001a0e:	2310      	movs	r3, #16
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001a1e:	230e      	movs	r3, #14
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a26:	4619      	mov	r1, r3
 8001a28:	4828      	ldr	r0, [pc, #160]	; (8001acc <LCD_GPIO_Init+0x170>)
 8001a2a:	f003 fd9b 	bl	8005564 <HAL_GPIO_Init>
 /* GPIOG configuration */
 gpio_init_structure.Pin = GPIO_PIN_12;
 8001a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001a38:	2309      	movs	r3, #9
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	4823      	ldr	r0, [pc, #140]	; (8001ad0 <LCD_GPIO_Init+0x174>)
 8001a44:	f003 fd8e 	bl	8005564 <HAL_GPIO_Init>
 /* GPIOI LTDC alternate configuration */
 gpio_init_structure.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_13 |
 8001a48:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_PIN_14 | GPIO_PIN_15;
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001a52:	230e      	movs	r3, #14
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	481d      	ldr	r0, [pc, #116]	; (8001ad4 <LCD_GPIO_Init+0x178>)
 8001a5e:	f003 fd81 	bl	8005564 <HAL_GPIO_Init>
 /* GPIOJ configuration */
 gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 8001a62:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_5
| GPIO_PIN_6 | GPIO_PIN_7 |GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001a6c:	230e      	movs	r3, #14
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a74:	4619      	mov	r1, r3
 8001a76:	4818      	ldr	r0, [pc, #96]	; (8001ad8 <LCD_GPIO_Init+0x17c>)
 8001a78:	f003 fd74 	bl	8005564 <HAL_GPIO_Init>
 /* GPIOK configuration */
 gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 8001a7c:	23f7      	movs	r3, #247	; 0xf7
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001a84:	230e      	movs	r3, #14
 8001a86:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4813      	ldr	r0, [pc, #76]	; (8001adc <LCD_GPIO_Init+0x180>)
 8001a90:	f003 fd68 	bl	8005564 <HAL_GPIO_Init>
 /* LCD_DISP GPIO configuration */
 gpio_init_structure.Pin = GPIO_PIN_12; /* LCD_DISP pin has to be
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
manually controlled */
 gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <LCD_GPIO_Init+0x178>)
 8001aa6:	f003 fd5d 	bl	8005564 <HAL_GPIO_Init>
 /* LCD_BL_CTRL GPIO configuration */
 gpio_init_structure.Pin = GPIO_PIN_3; /* LCD_BL_CTRL pin has to be
 8001aaa:	2308      	movs	r3, #8
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
manually controlled */
 gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 HAL_GPIO_Init(GPIOK, &gpio_init_structure);}
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4808      	ldr	r0, [pc, #32]	; (8001adc <LCD_GPIO_Init+0x180>)
 8001aba:	f003 fd53 	bl	8005564 <HAL_GPIO_Init>
 8001abe:	bf00      	nop
 8001ac0:	3738      	adds	r7, #56	; 0x38
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40022400 	.word	0x40022400
 8001adc:	40022800 	.word	0x40022800

08001ae0 <LTDC_Init>:
static void LTDC_Init(uint32_t FB_Address, uint16_t Xpos, uint16_t Ypos,
uint16_t Width, uint16_t Height)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	817b      	strh	r3, [r7, #10]
 8001af2:	460b      	mov	r3, r1
 8001af4:	813b      	strh	r3, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	80fb      	strh	r3, [r7, #6]
/* Timing Configuration */
 hltdc.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001afa:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <LTDC_Init+0x178>)
 8001afc:	2228      	movs	r2, #40	; 0x28
 8001afe:	615a      	str	r2, [r3, #20]
 hltdc.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001b00:	4b55      	ldr	r3, [pc, #340]	; (8001c58 <LTDC_Init+0x178>)
 8001b02:	2209      	movs	r2, #9
 8001b04:	619a      	str	r2, [r3, #24]
 hltdc.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001b06:	4b54      	ldr	r3, [pc, #336]	; (8001c58 <LTDC_Init+0x178>)
 8001b08:	2235      	movs	r2, #53	; 0x35
 8001b0a:	61da      	str	r2, [r3, #28]
 hltdc.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001b0c:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <LTDC_Init+0x178>)
 8001b0e:	220b      	movs	r2, #11
 8001b10:	621a      	str	r2, [r3, #32]
 hltdc.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC +
 8001b12:	4b51      	ldr	r3, [pc, #324]	; (8001c58 <LTDC_Init+0x178>)
 8001b14:	f240 121b 	movw	r2, #283	; 0x11b
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
RK043FN48H_VBP - 1);
 hltdc.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC +
 8001b1a:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <LTDC_Init+0x178>)
 8001b1c:	f240 2215 	movw	r2, #533	; 0x215
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
RK043FN48H_HBP - 1);
 hltdc.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC +
 8001b22:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <LTDC_Init+0x178>)
 8001b24:	f240 121d 	movw	r2, #285	; 0x11d
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
RK043FN48H_VBP + RK043FN48H_VFP - 1);
 hltdc.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC +
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <LTDC_Init+0x178>)
 8001b2c:	f240 2235 	movw	r2, #565	; 0x235
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
RK043FN48H_HBP + RK043FN48H_HFP - 1);
 /* LCD clock configuration */
 periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <LTDC_Init+0x17c>)
 8001b34:	2208      	movs	r2, #8
 8001b36:	601a      	str	r2, [r3, #0]
 periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <LTDC_Init+0x17c>)
 8001b3a:	22c0      	movs	r2, #192	; 0xc0
 8001b3c:	615a      	str	r2, [r3, #20]
 periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <LTDC_Init+0x17c>)
 8001b40:	2205      	movs	r2, #5
 8001b42:	61da      	str	r2, [r3, #28]
 periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001b44:	4b45      	ldr	r3, [pc, #276]	; (8001c5c <LTDC_Init+0x17c>)
 8001b46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
 HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001b4c:	4843      	ldr	r0, [pc, #268]	; (8001c5c <LTDC_Init+0x17c>)
 8001b4e:	f005 fb8f 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 /* Initialize the LCD pixel width and pixel height */
 hltdc.LayerCfg->ImageWidth = RK043FN48H_WIDTH;
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <LTDC_Init+0x178>)
 8001b54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b58:	661a      	str	r2, [r3, #96]	; 0x60
 hltdc.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <LTDC_Init+0x178>)
 8001b5c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001b60:	665a      	str	r2, [r3, #100]	; 0x64
 hltdc.Init.Backcolor.Blue = 0;/* Background value */
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <LTDC_Init+0x178>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 hltdc.Init.Backcolor.Green = 0;
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <LTDC_Init+0x178>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 hltdc.Init.Backcolor.Red = 0;
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <LTDC_Init+0x178>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 /* Polarity */
 hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b7a:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <LTDC_Init+0x178>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	605a      	str	r2, [r3, #4]
 hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <LTDC_Init+0x178>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
 hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <LTDC_Init+0x178>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
 hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <LTDC_Init+0x178>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
 hltdc.Instance = LTDC;
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <LTDC_Init+0x178>)
 8001b94:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <LTDC_Init+0x180>)
 8001b96:	601a      	str	r2, [r3, #0]
 if(HAL_LTDC_GetState(&hltdc) == HAL_LTDC_STATE_RESET)
 8001b98:	482f      	ldr	r0, [pc, #188]	; (8001c58 <LTDC_Init+0x178>)
 8001b9a:	f004 fcfb 	bl	8006594 <HAL_LTDC_GetState>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d103      	bne.n	8001bac <LTDC_Init+0xcc>
 {
 LCD_GPIO_Init(&hltdc, NULL);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	482c      	ldr	r0, [pc, #176]	; (8001c58 <LTDC_Init+0x178>)
 8001ba8:	f7ff fed8 	bl	800195c <LCD_GPIO_Init>
 }
 HAL_LTDC_Init(&hltdc);
 8001bac:	482a      	ldr	r0, [pc, #168]	; (8001c58 <LTDC_Init+0x178>)
 8001bae:	f004 fbe3 	bl	8006378 <HAL_LTDC_Init>
 /* Assert display enable LCD_DISP pin */
 HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb8:	482a      	ldr	r0, [pc, #168]	; (8001c64 <LTDC_Init+0x184>)
 8001bba:	f003 fe7d 	bl	80058b8 <HAL_GPIO_WritePin>
 /* Assert backlight LCD_BL_CTRL pin */
 HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2108      	movs	r1, #8
 8001bc2:	4829      	ldr	r0, [pc, #164]	; (8001c68 <LTDC_Init+0x188>)
 8001bc4:	f003 fe78 	bl	80058b8 <HAL_GPIO_WritePin>
 DrawProp[0].pFont = &Font24 ;
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <LTDC_Init+0x18c>)
 8001bca:	4a29      	ldr	r2, [pc, #164]	; (8001c70 <LTDC_Init+0x190>)
 8001bcc:	609a      	str	r2, [r3, #8]
 /* Layer Init */
  layer_cfg.WindowX0 = Xpos;
 8001bce:	897b      	ldrh	r3, [r7, #10]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	; (8001c74 <LTDC_Init+0x194>)
 8001bd2:	6013      	str	r3, [r2, #0]
  layer_cfg.WindowX1 = Width;
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <LTDC_Init+0x194>)
 8001bd8:	6053      	str	r3, [r2, #4]
  layer_cfg.WindowY0 = Ypos;
 8001bda:	893b      	ldrh	r3, [r7, #8]
 8001bdc:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <LTDC_Init+0x194>)
 8001bde:	6093      	str	r3, [r2, #8]
  layer_cfg.WindowY1 = Height;
 8001be0:	8b3b      	ldrh	r3, [r7, #24]
 8001be2:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <LTDC_Init+0x194>)
 8001be4:	60d3      	str	r3, [r2, #12]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <LTDC_Init+0x194>)
 8001be8:	2202      	movs	r2, #2
 8001bea:	611a      	str	r2, [r3, #16]
  layer_cfg.FBStartAdress = FB_Address;
 8001bec:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <LTDC_Init+0x194>)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6253      	str	r3, [r2, #36]	; 0x24
  layer_cfg.Alpha = 255;
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <LTDC_Init+0x194>)
 8001bf4:	22ff      	movs	r2, #255	; 0xff
 8001bf6:	615a      	str	r2, [r3, #20]
  layer_cfg.Alpha0 = 0;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <LTDC_Init+0x194>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  layer_cfg.Backcolor.Blue = 0;
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <LTDC_Init+0x194>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  layer_cfg.Backcolor.Green = 0;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <LTDC_Init+0x194>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  layer_cfg.Backcolor.Red = 0;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <LTDC_Init+0x194>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <LTDC_Init+0x194>)
 8001c18:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c1c:	61da      	str	r2, [r3, #28]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <LTDC_Init+0x194>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	621a      	str	r2, [r3, #32]
  layer_cfg.ImageWidth = Width;
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <LTDC_Init+0x194>)
 8001c28:	6293      	str	r3, [r2, #40]	; 0x28
  layer_cfg.ImageHeight = Height;
 8001c2a:	8b3b      	ldrh	r3, [r7, #24]
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <LTDC_Init+0x194>)
 8001c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, 1);
 8001c30:	2201      	movs	r2, #1
 8001c32:	4910      	ldr	r1, [pc, #64]	; (8001c74 <LTDC_Init+0x194>)
 8001c34:	4808      	ldr	r0, [pc, #32]	; (8001c58 <LTDC_Init+0x178>)
 8001c36:	f004 fc6f 	bl	8006518 <HAL_LTDC_ConfigLayer>
  DrawProp[1].BackColor = ((uint32_t)0xFFFFFFFF);
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <LTDC_Init+0x18c>)
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	611a      	str	r2, [r3, #16]
  DrawProp[1].pFont = &Font24;
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <LTDC_Init+0x18c>)
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <LTDC_Init+0x190>)
 8001c46:	615a      	str	r2, [r3, #20]
  DrawProp[1].TextColor = ((uint32_t)0xFF000000);
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <LTDC_Init+0x18c>)
 8001c4a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001c4e:	60da      	str	r2, [r3, #12]
 }
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200002f4 	.word	0x200002f4
 8001c5c:	20000064 	.word	0x20000064
 8001c60:	40016800 	.word	0x40016800
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40022800 	.word	0x40022800
 8001c6c:	2000004c 	.word	0x2000004c
 8001c70:	20000000 	.word	0x20000000
 8001c74:	2000027c 	.word	0x2000027c

08001c78 <CAMERA_Init>:
 uint8_t CAMERA_Init(uint32_t Resolution) /*Camera initialization*/
 {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint8_t status = CAMERA_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
  /* Read ID of Camera module via I2C */
  if(ov9655_ReadID(CAMERA_I2C_ADDRESS) == OV9655_ID)
 8001c84:	2060      	movs	r0, #96	; 0x60
 8001c86:	f000 f95b 	bl	8001f40 <ov9655_ReadID>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b96      	cmp	r3, #150	; 0x96
 8001c8e:	d117      	bne.n	8001cc0 <CAMERA_Init+0x48>
  {
  camera_driv = &ov9655_drv;/* Initialize the camera driver structure */
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <CAMERA_Init+0x58>)
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <CAMERA_Init+0x5c>)
 8001c94:	601a      	str	r2, [r3, #0]
  CameraHwAddress = CAMERA_I2C_ADDRESS;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <CAMERA_Init+0x60>)
 8001c98:	2260      	movs	r2, #96	; 0x60
 8001c9a:	601a      	str	r2, [r3, #0]
  if (Resolution == CAMERA_R320x240)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10b      	bne.n	8001cba <CAMERA_Init+0x42>
  {
  camera_driv->Init(CameraHwAddress, Resolution);
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <CAMERA_Init+0x58>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <CAMERA_Init+0x60>)
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	b292      	uxth	r2, r2
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4798      	blx	r3
  HAL_DCMI_DisableCROP(&hdcmi);
 8001cb4:	4809      	ldr	r0, [pc, #36]	; (8001cdc <CAMERA_Init+0x64>)
 8001cb6:	f001 fd31 	bl	800371c <HAL_DCMI_DisableCrop>
  }
  status = CAMERA_OK; /* Return CAMERA_OK status */
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	e001      	b.n	8001cc4 <CAMERA_Init+0x4c>
  }
  else
  {
  status = CAMERA_NOT_SUPPORTED; /* Return CAMERA_NOT_SUPPORTED status */
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 }
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000218 	.word	0x20000218
 8001cd4:	20000010 	.word	0x20000010
 8001cd8:	200000e8 	.word	0x200000e8
 8001cdc:	2000039c 	.word	0x2000039c

08001ce0 <HAL_TIM_PeriodElapsedCallback>:
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
     if (htim->Instance == htim3.Instance)
     {

     }
 }
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <ov9655_Init>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  resolution: Camera resolution
  * @retval None
  */
void ov9655_Init(uint16_t DeviceAddr, uint32_t resolution)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	80fb      	strh	r3, [r7, #6]
  uint32_t index;

  /* Initialize I2C */
  CAMERA_IO_Init();
 8001d10:	f000 fb74 	bl	80023fc <CAMERA_IO_Init>

  /* Prepare the camera to be configured by resetting all its registers */
  CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_COM7, 0x80);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	2112      	movs	r1, #18
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fb77 	bl	8002410 <CAMERA_IO_Write>
  CAMERA_Delay(200);
 8001d22:	20c8      	movs	r0, #200	; 0xc8
 8001d24:	f000 fbac 	bl	8002480 <CAMERA_Delay>

  /* Initialize OV9655 */
  switch (resolution)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d85b      	bhi.n	8001de6 <ov9655_Init+0xe2>
 8001d2e:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <ov9655_Init+0x30>)
 8001d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d34:	08001d45 	.word	0x08001d45
 8001d38:	08001d7b 	.word	0x08001d7b
 8001d3c:	08001de7 	.word	0x08001de7
 8001d40:	08001db1 	.word	0x08001db1
  {
  case CAMERA_R160x120:
    {
      for(index=0; index<(sizeof(OV9655_QQVGA)/2); index++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	e013      	b.n	8001d72 <ov9655_Init+0x6e>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_QQVGA[index][0], OV9655_QQVGA[index][1]);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	b2d8      	uxtb	r0, r3
 8001d4e:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <ov9655_Init+0xec>)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001d56:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <ov9655_Init+0xec>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f000 fb55 	bl	8002410 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 8001d66:	2002      	movs	r0, #2
 8001d68:	f000 fb8a 	bl	8002480 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2); index++)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b95      	cmp	r3, #149	; 0x95
 8001d76:	d9e8      	bls.n	8001d4a <ov9655_Init+0x46>
      }
      break;
 8001d78:	e036      	b.n	8001de8 <ov9655_Init+0xe4>
    }
  case CAMERA_R320x240:
    {
      for(index=0; index<(sizeof(OV9655_QVGA)/2); index++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e013      	b.n	8001da8 <ov9655_Init+0xa4>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_QVGA[index][0], OV9655_QVGA[index][1]);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	b2d8      	uxtb	r0, r3
 8001d84:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <ov9655_Init+0xf0>)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <ov9655_Init+0xf0>)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	785b      	ldrb	r3, [r3, #1]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f000 fb3a 	bl	8002410 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f000 fb6f 	bl	8002480 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_QVGA)/2); index++)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b95      	cmp	r3, #149	; 0x95
 8001dac:	d9e8      	bls.n	8001d80 <ov9655_Init+0x7c>
      }
      break;
 8001dae:	e01b      	b.n	8001de8 <ov9655_Init+0xe4>
      /* Not supported resolution */
      break;
    }
  case CAMERA_R640x480:
    {
      for(index=0; index<(sizeof(OV9655_VGA)/2); index++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e013      	b.n	8001dde <ov9655_Init+0xda>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_VGA[index][0], OV9655_VGA[index][1]);
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	b2d8      	uxtb	r0, r3
 8001dba:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <ov9655_Init+0xf4>)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001dc2:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <ov9655_Init+0xf4>)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f000 fb1f 	bl	8002410 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f000 fb54 	bl	8002480 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_VGA)/2); index++)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b92      	cmp	r3, #146	; 0x92
 8001de2:	d9e8      	bls.n	8001db6 <ov9655_Init+0xb2>
      }
      break;
 8001de4:	e000      	b.n	8001de8 <ov9655_Init+0xe4>
    }
  default:
    {
      break;
 8001de6:	bf00      	nop
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	0800ad18 	.word	0x0800ad18
 8001df4:	0800abec 	.word	0x0800abec
 8001df8:	0800aac4 	.word	0x0800aac4

08001dfc <ov9655_Config>:
  * @param  value: Value to be configured
  * @param  brightness_value: Brightness value to be configured
  * @retval None
  */
void ov9655_Config(uint16_t DeviceAddr, uint32_t feature, uint32_t value, uint32_t brightness_value)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b08b      	sub	sp, #44	; 0x2c
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	4603      	mov	r3, r0
 8001e0a:	81fb      	strh	r3, [r7, #14]
  uint8_t tslb, mtx1, mtx2, mtx3, mtx4, mtx5, mtx6;
  uint64_t value_tmp;
  uint32_t br_value;

  /* Convert the input value into ov9655 parameters */
  value_tmp = ov9655_ConvertValue(feature, value);
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	68b8      	ldr	r0, [r7, #8]
 8001e10:	f000 f8aa 	bl	8001f68 <ov9655_ConvertValue>
 8001e14:	e9c7 0108 	strd	r0, r1, [r7, #32]
  br_value = (uint32_t)ov9655_ConvertValue(CAMERA_CONTRAST_BRIGHTNESS, brightness_value);
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f8a4 	bl	8001f68 <ov9655_ConvertValue>
 8001e20:	4603      	mov	r3, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	61fb      	str	r3, [r7, #28]

  switch(feature)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d015      	beq.n	8001e58 <ov9655_Config+0x5c>
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d302      	bcc.n	8001e36 <ov9655_Config+0x3a>
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d011      	beq.n	8001e58 <ov9655_Config+0x5c>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX6, mtx6);
      break;
    }
  default:
    {
      break;
 8001e34:	e080      	b.n	8001f38 <ov9655_Config+0x13c>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_BRTN, br_value);
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	2155      	movs	r1, #85	; 0x55
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fae5 	bl	8002410 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_CNST1, value_tmp);
 8001e46:	89fb      	ldrh	r3, [r7, #14]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e4e:	2156      	movs	r1, #86	; 0x56
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fadd 	bl	8002410 <CAMERA_IO_Write>
      break;
 8001e56:	e06f      	b.n	8001f38 <ov9655_Config+0x13c>
      tslb = (uint8_t)(value_tmp >> 48);
 8001e58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	f04f 0400 	mov.w	r4, #0
 8001e64:	0c13      	lsrs	r3, r2, #16
 8001e66:	2400      	movs	r4, #0
 8001e68:	76fb      	strb	r3, [r7, #27]
      mtx1 = (uint8_t)(value_tmp >> 40);
 8001e6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	f04f 0400 	mov.w	r4, #0
 8001e76:	0a13      	lsrs	r3, r2, #8
 8001e78:	2400      	movs	r4, #0
 8001e7a:	76bb      	strb	r3, [r7, #26]
      mtx2 = (uint8_t)(value_tmp >> 32);
 8001e7c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	f04f 0400 	mov.w	r4, #0
 8001e88:	0013      	movs	r3, r2
 8001e8a:	2400      	movs	r4, #0
 8001e8c:	767b      	strb	r3, [r7, #25]
      mtx3 = (uint8_t)(value_tmp >> 24);
 8001e8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	f04f 0400 	mov.w	r4, #0
 8001e9a:	0e0b      	lsrs	r3, r1, #24
 8001e9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ea0:	0e14      	lsrs	r4, r2, #24
 8001ea2:	763b      	strb	r3, [r7, #24]
      mtx4 = (uint8_t)(value_tmp >> 16);
 8001ea4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	f04f 0400 	mov.w	r4, #0
 8001eb0:	0c0b      	lsrs	r3, r1, #16
 8001eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001eb6:	0c14      	lsrs	r4, r2, #16
 8001eb8:	75fb      	strb	r3, [r7, #23]
      mtx5 = (uint8_t)(value_tmp >> 8);
 8001eba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	f04f 0400 	mov.w	r4, #0
 8001ec6:	0a0b      	lsrs	r3, r1, #8
 8001ec8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ecc:	0a14      	lsrs	r4, r2, #8
 8001ece:	75bb      	strb	r3, [r7, #22]
      mtx6 = (uint8_t)(value_tmp);
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	757b      	strb	r3, [r7, #21]
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_TSLB, tslb);
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	7efa      	ldrb	r2, [r7, #27]
 8001eda:	213a      	movs	r1, #58	; 0x3a
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fa97 	bl	8002410 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX1, mtx1);
 8001ee2:	89fb      	ldrh	r3, [r7, #14]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	7eba      	ldrb	r2, [r7, #26]
 8001ee8:	214f      	movs	r1, #79	; 0x4f
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fa90 	bl	8002410 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX2, mtx2);
 8001ef0:	89fb      	ldrh	r3, [r7, #14]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	7e7a      	ldrb	r2, [r7, #25]
 8001ef6:	2150      	movs	r1, #80	; 0x50
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fa89 	bl	8002410 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX3, mtx3);
 8001efe:	89fb      	ldrh	r3, [r7, #14]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	7e3a      	ldrb	r2, [r7, #24]
 8001f04:	2151      	movs	r1, #81	; 0x51
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fa82 	bl	8002410 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX4, mtx4);
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	7dfa      	ldrb	r2, [r7, #23]
 8001f12:	2152      	movs	r1, #82	; 0x52
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fa7b 	bl	8002410 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX5, mtx5);
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	7dba      	ldrb	r2, [r7, #22]
 8001f20:	2153      	movs	r1, #83	; 0x53
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fa74 	bl	8002410 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX6, mtx6);
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	7d7a      	ldrb	r2, [r7, #21]
 8001f2e:	2154      	movs	r1, #84	; 0x54
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fa6d 	bl	8002410 <CAMERA_IO_Write>
      break;
 8001f36:	bf00      	nop
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	372c      	adds	r7, #44	; 0x2c
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}

08001f40 <ov9655_ReadID>:
  * @brief  Read the OV9655 Camera identity.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval the OV9655 ID
  */
uint16_t ov9655_ReadID(uint16_t DeviceAddr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C */
  CAMERA_IO_Init();
 8001f4a:	f000 fa57 	bl	80023fc <CAMERA_IO_Init>

  /* Get the camera ID */
  return (CAMERA_IO_Read(DeviceAddr, OV9655_SENSOR_PIDH));
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	210a      	movs	r1, #10
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fa75 	bl	8002444 <CAMERA_IO_Read>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29b      	uxth	r3, r3
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <ov9655_ConvertValue>:
  * @param  feature: Camera feature to be configured
  * @param  value: Value to be configured
  * @retval The converted value
  */
static uint64_t ov9655_ConvertValue(uint32_t feature, uint32_t value)
{
 8001f68:	b490      	push	{r4, r7}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint64_t ret = 0;
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	f04f 0400 	mov.w	r4, #0
 8001f7a:	e9c7 3402 	strd	r3, r4, [r7, #8]

  switch(feature)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <ov9655_ConvertValue+0x28>
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d332      	bcc.n	8001fee <ov9655_ConvertValue+0x86>
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	f000 8099 	beq.w	80020c0 <ov9655_ConvertValue+0x158>
 8001f8e:	e0c8      	b.n	8002122 <ov9655_ConvertValue+0x1ba>
  {
  case CAMERA_BLACK_WHITE:
    {
      switch(value)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d824      	bhi.n	8001fe0 <ov9655_ConvertValue+0x78>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <ov9655_ConvertValue+0x34>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fad 	.word	0x08001fad
 8001fa0:	08001fbb 	.word	0x08001fbb
 8001fa4:	08001fc7 	.word	0x08001fc7
 8001fa8:	08001fd5 	.word	0x08001fd5
      {
      case CAMERA_BLACK_WHITE_BW:
        {
          ret =  OV9655_BLACK_WHITE_BW;
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 8001fb4:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001fb8:	e018      	b.n	8001fec <ov9655_ConvertValue+0x84>
        }
      case CAMERA_BLACK_WHITE_NEGATIVE:
        {
          ret =  OV9655_BLACK_WHITE_NEGATIVE;
 8001fba:	f248 0380 	movw	r3, #32896	; 0x8080
 8001fbe:	4c60      	ldr	r4, [pc, #384]	; (8002140 <ov9655_ConvertValue+0x1d8>)
 8001fc0:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001fc4:	e012      	b.n	8001fec <ov9655_ConvertValue+0x84>
        }
      case CAMERA_BLACK_WHITE_BW_NEGATIVE:
        {
          ret =  OV9655_BLACK_WHITE_BW_NEGATIVE;
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	f44f 046c 	mov.w	r4, #15466496	; 0xec0000
 8001fce:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001fd2:	e00b      	b.n	8001fec <ov9655_ConvertValue+0x84>
        }
      case CAMERA_BLACK_WHITE_NORMAL:
        {
          ret =  OV9655_BLACK_WHITE_NORMAL;
 8001fd4:	f248 0380 	movw	r3, #32896	; 0x8080
 8001fd8:	4c5a      	ldr	r4, [pc, #360]	; (8002144 <ov9655_ConvertValue+0x1dc>)
 8001fda:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001fde:	e005      	b.n	8001fec <ov9655_ConvertValue+0x84>
        }
      default:
        {
          ret =  OV9655_BLACK_WHITE_NORMAL;
 8001fe0:	f248 0380 	movw	r3, #32896	; 0x8080
 8001fe4:	4c57      	ldr	r4, [pc, #348]	; (8002144 <ov9655_ConvertValue+0x1dc>)
 8001fe6:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001fea:	bf00      	nop
        }
      }
      break;
 8001fec:	e0a0      	b.n	8002130 <ov9655_ConvertValue+0x1c8>
    }
  case CAMERA_CONTRAST_BRIGHTNESS:
    {
      switch(value)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b09      	cmp	r3, #9
 8001ff2:	d85d      	bhi.n	80020b0 <ov9655_ConvertValue+0x148>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <ov9655_ConvertValue+0x94>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002025 	.word	0x08002025
 8002000:	08002033 	.word	0x08002033
 8002004:	08002041 	.word	0x08002041
 8002008:	0800204f 	.word	0x0800204f
 800200c:	0800205d 	.word	0x0800205d
 8002010:	0800206b 	.word	0x0800206b
 8002014:	08002079 	.word	0x08002079
 8002018:	08002087 	.word	0x08002087
 800201c:	08002095 	.word	0x08002095
 8002020:	080020a3 	.word	0x080020a3
      {
      case CAMERA_BRIGHTNESS_LEVEL0:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL0;
 8002024:	f04f 03b0 	mov.w	r3, #176	; 0xb0
 8002028:	f04f 0400 	mov.w	r4, #0
 800202c:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8002030:	e045      	b.n	80020be <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL1:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL1;
 8002032:	f04f 0398 	mov.w	r3, #152	; 0x98
 8002036:	f04f 0400 	mov.w	r4, #0
 800203a:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 800203e:	e03e      	b.n	80020be <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL2:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL2;
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	f04f 0400 	mov.w	r4, #0
 8002048:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 800204c:	e037      	b.n	80020be <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL3:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL3;
 800204e:	f04f 0318 	mov.w	r3, #24
 8002052:	f04f 0400 	mov.w	r4, #0
 8002056:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 800205a:	e030      	b.n	80020be <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL4:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL4;
 800205c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8002060:	f04f 0400 	mov.w	r4, #0
 8002064:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8002068:	e029      	b.n	80020be <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL0:
        {
          ret =  OV9655_CONTRAST_LEVEL0;
 800206a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800206e:	f04f 0400 	mov.w	r4, #0
 8002072:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8002076:	e022      	b.n	80020be <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL1:
        {
          ret =  OV9655_CONTRAST_LEVEL1;
 8002078:	f04f 0338 	mov.w	r3, #56	; 0x38
 800207c:	f04f 0400 	mov.w	r4, #0
 8002080:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8002084:	e01b      	b.n	80020be <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL2:
        {
          ret =  OV9655_CONTRAST_LEVEL2;
 8002086:	f04f 0340 	mov.w	r3, #64	; 0x40
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8002092:	e014      	b.n	80020be <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL3:
        {
          ret =  OV9655_CONTRAST_LEVEL3;
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f04f 0400 	mov.w	r4, #0
 800209c:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80020a0:	e00d      	b.n	80020be <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL4:
        {
          ret =  OV9655_CONTRAST_LEVEL4;
 80020a2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80020a6:	f04f 0400 	mov.w	r4, #0
 80020aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80020ae:	e006      	b.n	80020be <ov9655_ConvertValue+0x156>
        }
      default:
        {
          ret =  OV9655_CONTRAST_LEVEL0;
 80020b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80020b4:	f04f 0400 	mov.w	r4, #0
 80020b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80020bc:	bf00      	nop
        }
      }
      break;
 80020be:	e037      	b.n	8002130 <ov9655_ConvertValue+0x1c8>
    }
  case CAMERA_COLOR_EFFECT:
    {
      switch(value)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d825      	bhi.n	8002114 <ov9655_ConvertValue+0x1ac>
 80020c8:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <ov9655_ConvertValue+0x168>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020ed 	.word	0x080020ed
 80020d4:	080020fb 	.word	0x080020fb
 80020d8:	08002109 	.word	0x08002109
 80020dc:	080020e1 	.word	0x080020e1
      {
      case CAMERA_COLOR_EFFECT_ANTIQUE:
        {
          ret =  OV9655_COLOR_EFFECT_ANTIQUE;
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <ov9655_ConvertValue+0x1e0>)
 80020e2:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 80020e6:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80020ea:	e019      	b.n	8002120 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_BLUE:
        {
          ret =  OV9655_COLOR_EFFECT_BLUE;
 80020ec:	f04f 0360 	mov.w	r3, #96	; 0x60
 80020f0:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 80020f4:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80020f8:	e012      	b.n	8002120 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_GREEN:
        {
          ret =  OV9655_COLOR_EFFECT_GREEN;
 80020fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fe:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 8002102:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8002106:	e00b      	b.n	8002120 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_RED:
        {
          ret =  OV9655_COLOR_EFFECT_RED;
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	4c0f      	ldr	r4, [pc, #60]	; (800214c <ov9655_ConvertValue+0x1e4>)
 800210e:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8002112:	e005      	b.n	8002120 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_NONE:
      default:
        {
          ret =  OV9655_COLOR_EFFECT_NONE;
 8002114:	f248 0380 	movw	r3, #32896	; 0x8080
 8002118:	4c0a      	ldr	r4, [pc, #40]	; (8002144 <ov9655_ConvertValue+0x1dc>)
 800211a:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 800211e:	bf00      	nop
        }
      }
      break;
 8002120:	e006      	b.n	8002130 <ov9655_ConvertValue+0x1c8>
    default:
      {
        ret = 0;
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	f04f 0400 	mov.w	r4, #0
 800212a:	e9c7 3402 	strd	r3, r4, [r7, #8]
        break;
 800212e:	bf00      	nop
      }
    }
  }

  return ret;
 8002130:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8002134:	4618      	mov	r0, r3
 8002136:	4621      	mov	r1, r4
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bc90      	pop	{r4, r7}
 800213e:	4770      	bx	lr
 8002140:	00ec8080 	.word	0x00ec8080
 8002144:	00cc8080 	.word	0x00cc8080
 8002148:	20f00000 	.word	0x20f00000
 800214c:	00cc6000 	.word	0x00cc6000

08002150 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	; 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a51      	ldr	r2, [pc, #324]	; (80022a0 <I2Cx_MspInit+0x150>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d14d      	bne.n	80021fc <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002160:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <I2Cx_MspInit+0x154>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	4a4f      	ldr	r2, [pc, #316]	; (80022a4 <I2Cx_MspInit+0x154>)
 8002166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216a:	6313      	str	r3, [r2, #48]	; 0x30
 800216c:	4b4d      	ldr	r3, [pc, #308]	; (80022a4 <I2Cx_MspInit+0x154>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800217c:	2312      	movs	r3, #18
 800217e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002184:	2302      	movs	r3, #2
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002188:	2304      	movs	r3, #4
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4619      	mov	r1, r3
 8002192:	4845      	ldr	r0, [pc, #276]	; (80022a8 <I2Cx_MspInit+0x158>)
 8002194:	f003 f9e6 	bl	8005564 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4619      	mov	r1, r3
 80021a4:	4840      	ldr	r0, [pc, #256]	; (80022a8 <I2Cx_MspInit+0x158>)
 80021a6:	f003 f9dd 	bl	8005564 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80021aa:	4b3e      	ldr	r3, [pc, #248]	; (80022a4 <I2Cx_MspInit+0x154>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a3d      	ldr	r2, [pc, #244]	; (80022a4 <I2Cx_MspInit+0x154>)
 80021b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <I2Cx_MspInit+0x154>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <I2Cx_MspInit+0x154>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a37      	ldr	r2, [pc, #220]	; (80022a4 <I2Cx_MspInit+0x154>)
 80021c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021cc:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80021ce:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <I2Cx_MspInit+0x154>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a34      	ldr	r2, [pc, #208]	; (80022a4 <I2Cx_MspInit+0x154>)
 80021d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021d8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	210f      	movs	r1, #15
 80021de:	2048      	movs	r0, #72	; 0x48
 80021e0:	f001 f88b 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80021e4:	2048      	movs	r0, #72	; 0x48
 80021e6:	f001 f8a4 	bl	8003332 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	210f      	movs	r1, #15
 80021ee:	2049      	movs	r0, #73	; 0x49
 80021f0:	f001 f883 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80021f4:	2049      	movs	r0, #73	; 0x49
 80021f6:	f001 f89c 	bl	8003332 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80021fa:	e04d      	b.n	8002298 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021fc:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <I2Cx_MspInit+0x154>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <I2Cx_MspInit+0x154>)
 8002202:	f043 0302 	orr.w	r3, r3, #2
 8002206:	6313      	str	r3, [r2, #48]	; 0x30
 8002208:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <I2Cx_MspInit+0x154>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002218:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800221a:	2312      	movs	r3, #18
 800221c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002222:	2302      	movs	r3, #2
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002226:	2304      	movs	r3, #4
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	481e      	ldr	r0, [pc, #120]	; (80022ac <I2Cx_MspInit+0x15c>)
 8002232:	f003 f997 	bl	8005564 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800223a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	481a      	ldr	r0, [pc, #104]	; (80022ac <I2Cx_MspInit+0x15c>)
 8002244:	f003 f98e 	bl	8005564 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <I2Cx_MspInit+0x154>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <I2Cx_MspInit+0x154>)
 800224e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002252:	6413      	str	r3, [r2, #64]	; 0x40
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <I2Cx_MspInit+0x154>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <I2Cx_MspInit+0x154>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <I2Cx_MspInit+0x154>)
 8002266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800226a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <I2Cx_MspInit+0x154>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <I2Cx_MspInit+0x154>)
 8002272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002276:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	210f      	movs	r1, #15
 800227c:	201f      	movs	r0, #31
 800227e:	f001 f83c 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002282:	201f      	movs	r0, #31
 8002284:	f001 f855 	bl	8003332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	210f      	movs	r1, #15
 800228c:	2020      	movs	r0, #32
 800228e:	f001 f834 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002292:	2020      	movs	r0, #32
 8002294:	f001 f84d 	bl	8003332 <HAL_NVIC_EnableIRQ>
}
 8002298:	bf00      	nop
 800229a:	3730      	adds	r7, #48	; 0x30
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200000f0 	.word	0x200000f0
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40021c00 	.word	0x40021c00
 80022ac:	40020400 	.word	0x40020400

080022b0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f003 fe33 	bl	8005f24 <HAL_I2C_GetState>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d125      	bne.n	8002310 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a14      	ldr	r2, [pc, #80]	; (8002318 <I2Cx_Init+0x68>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d103      	bne.n	80022d4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a13      	ldr	r2, [pc, #76]	; (800231c <I2Cx_Init+0x6c>)
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e002      	b.n	80022da <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <I2Cx_Init+0x70>)
 80022d8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a11      	ldr	r2, [pc, #68]	; (8002324 <I2Cx_Init+0x74>)
 80022de:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff23 	bl	8002150 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f003 fb08 	bl	8005920 <HAL_I2C_Init>
  }
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200000f0 	.word	0x200000f0
 800231c:	40005c00 	.word	0x40005c00
 8002320:	40005400 	.word	0x40005400
 8002324:	40912732 	.word	0x40912732

08002328 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af04      	add	r7, sp, #16
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4603      	mov	r3, r0
 8002338:	72fb      	strb	r3, [r7, #11]
 800233a:	460b      	mov	r3, r1
 800233c:	813b      	strh	r3, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002346:	7afb      	ldrb	r3, [r7, #11]
 8002348:	b299      	uxth	r1, r3
 800234a:	88f8      	ldrh	r0, [r7, #6]
 800234c:	893a      	ldrh	r2, [r7, #8]
 800234e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002352:	9302      	str	r3, [sp, #8]
 8002354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4603      	mov	r3, r0
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f003 fcc6 	bl	8005cf0 <HAL_I2C_Mem_Read>
 8002364:	4603      	mov	r3, r0
 8002366:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800236e:	7afb      	ldrb	r3, [r7, #11]
 8002370:	4619      	mov	r1, r3
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f832 	bl	80023dc <I2Cx_Error>
  }
  return status;    
 8002378:	7dfb      	ldrb	r3, [r7, #23]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b08a      	sub	sp, #40	; 0x28
 8002386:	af04      	add	r7, sp, #16
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	4608      	mov	r0, r1
 800238c:	4611      	mov	r1, r2
 800238e:	461a      	mov	r2, r3
 8002390:	4603      	mov	r3, r0
 8002392:	72fb      	strb	r3, [r7, #11]
 8002394:	460b      	mov	r3, r1
 8002396:	813b      	strh	r3, [r7, #8]
 8002398:	4613      	mov	r3, r2
 800239a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023a0:	7afb      	ldrb	r3, [r7, #11]
 80023a2:	b299      	uxth	r1, r3
 80023a4:	88f8      	ldrh	r0, [r7, #6]
 80023a6:	893a      	ldrh	r2, [r7, #8]
 80023a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	4603      	mov	r3, r0
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f003 fb85 	bl	8005ac8 <HAL_I2C_Mem_Write>
 80023be:	4603      	mov	r3, r0
 80023c0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d004      	beq.n	80023d2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80023c8:	7afb      	ldrb	r3, [r7, #11]
 80023ca:	4619      	mov	r1, r3
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f805 	bl	80023dc <I2Cx_Error>
  }
  return status;
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f003 fb29 	bl	8005a40 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ff5e 	bl	80022b0 <I2Cx_Init>
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <CAMERA_IO_Init>:
/**
  * @brief  Initializes Camera low level.
  * @retval None
  */
void CAMERA_IO_Init(void) 
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cExtHandler);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <CAMERA_IO_Init+0x10>)
 8002402:	f7ff ff55 	bl	80022b0 <I2Cx_Init>
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000013c 	.word	0x2000013c

08002410 <CAMERA_IO_Write>:
  * @param  Reg: Register address 
  * @param  Value: Data to be written
  * @retval None
  */
void CAMERA_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af02      	add	r7, sp, #8
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
 800241a:	460b      	mov	r3, r1
 800241c:	71bb      	strb	r3, [r7, #6]
 800241e:	4613      	mov	r3, r2
 8002420:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002422:	79bb      	ldrb	r3, [r7, #6]
 8002424:	b29a      	uxth	r2, r3
 8002426:	79f9      	ldrb	r1, [r7, #7]
 8002428:	2301      	movs	r3, #1
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	1d7b      	adds	r3, r7, #5
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2301      	movs	r3, #1
 8002432:	4803      	ldr	r0, [pc, #12]	; (8002440 <CAMERA_IO_Write+0x30>)
 8002434:	f7ff ffa5 	bl	8002382 <I2Cx_WriteMultiple>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	2000013c 	.word	0x2000013c

08002444 <CAMERA_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address 
  * @retval Read data
  */
uint8_t CAMERA_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af02      	add	r7, sp, #8
 800244a:	4603      	mov	r3, r0
 800244c:	460a      	mov	r2, r1
 800244e:	71fb      	strb	r3, [r7, #7]
 8002450:	4613      	mov	r3, r2
 8002452:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cExtHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002458:	79bb      	ldrb	r3, [r7, #6]
 800245a:	b29a      	uxth	r2, r3
 800245c:	79f9      	ldrb	r1, [r7, #7]
 800245e:	2301      	movs	r3, #1
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	f107 030f 	add.w	r3, r7, #15
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	4804      	ldr	r0, [pc, #16]	; (800247c <CAMERA_IO_Read+0x38>)
 800246c:	f7ff ff5c 	bl	8002328 <I2Cx_ReadMultiple>

  return read_value;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000013c 	.word	0x2000013c

08002480 <CAMERA_Delay>:
  * @brief  Camera delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void CAMERA_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fe39 	bl	8003100 <HAL_Delay>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <BSP_SDRAM_Init+0xac>)
 800249e:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <BSP_SDRAM_Init+0xb0>)
 80024a0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <BSP_SDRAM_Init+0xb4>)
 80024a4:	2202      	movs	r2, #2
 80024a6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <BSP_SDRAM_Init+0xb4>)
 80024aa:	2207      	movs	r2, #7
 80024ac:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <BSP_SDRAM_Init+0xb4>)
 80024b0:	2204      	movs	r2, #4
 80024b2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <BSP_SDRAM_Init+0xb4>)
 80024b6:	2207      	movs	r2, #7
 80024b8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <BSP_SDRAM_Init+0xb4>)
 80024bc:	2202      	movs	r2, #2
 80024be:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <BSP_SDRAM_Init+0xb4>)
 80024c2:	2202      	movs	r2, #2
 80024c4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80024c6:	4b21      	ldr	r3, [pc, #132]	; (800254c <BSP_SDRAM_Init+0xb4>)
 80024c8:	2202      	movs	r2, #2
 80024ca:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <BSP_SDRAM_Init+0xac>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <BSP_SDRAM_Init+0xac>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <BSP_SDRAM_Init+0xac>)
 80024da:	2204      	movs	r2, #4
 80024dc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <BSP_SDRAM_Init+0xac>)
 80024e0:	2210      	movs	r2, #16
 80024e2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <BSP_SDRAM_Init+0xac>)
 80024e6:	2240      	movs	r2, #64	; 0x40
 80024e8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <BSP_SDRAM_Init+0xac>)
 80024ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024f0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <BSP_SDRAM_Init+0xac>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <BSP_SDRAM_Init+0xac>)
 80024fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024fe:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <BSP_SDRAM_Init+0xac>)
 8002502:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <BSP_SDRAM_Init+0xac>)
 800250a:	2200      	movs	r2, #0
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800250e:	2100      	movs	r1, #0
 8002510:	480c      	ldr	r0, [pc, #48]	; (8002544 <BSP_SDRAM_Init+0xac>)
 8002512:	f000 f8af 	bl	8002674 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002516:	490d      	ldr	r1, [pc, #52]	; (800254c <BSP_SDRAM_Init+0xb4>)
 8002518:	480a      	ldr	r0, [pc, #40]	; (8002544 <BSP_SDRAM_Init+0xac>)
 800251a:	f005 fa97 	bl	8007a4c <HAL_SDRAM_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <BSP_SDRAM_Init+0xb8>)
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	e002      	b.n	8002532 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <BSP_SDRAM_Init+0xb8>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002532:	f240 6003 	movw	r0, #1539	; 0x603
 8002536:	f000 f80d 	bl	8002554 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <BSP_SDRAM_Init+0xb8>)
 800253c:	781b      	ldrb	r3, [r3, #0]
}
 800253e:	4618      	mov	r0, r3
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2004b5a0 	.word	0x2004b5a0
 8002548:	a0000140 	.word	0xa0000140
 800254c:	20000188 	.word	0x20000188
 8002550:	2000001c 	.word	0x2000001c

08002554 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002568:	2210      	movs	r2, #16
 800256a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800256e:	2201      	movs	r2, #1
 8002570:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800257c:	4923      	ldr	r1, [pc, #140]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800257e:	4824      	ldr	r0, [pc, #144]	; (8002610 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002580:	f005 fb1a 	bl	8007bb8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002584:	2001      	movs	r0, #1
 8002586:	f000 fdbb 	bl	8003100 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002592:	2210      	movs	r2, #16
 8002594:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002598:	2201      	movs	r2, #1
 800259a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80025a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a6:	4919      	ldr	r1, [pc, #100]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025a8:	4819      	ldr	r0, [pc, #100]	; (8002610 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80025aa:	f005 fb05 	bl	8007bb8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025b0:	2203      	movs	r2, #3
 80025b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025b6:	2210      	movs	r2, #16
 80025b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025bc:	2208      	movs	r2, #8
 80025be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80025c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ca:	4910      	ldr	r1, [pc, #64]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025cc:	4810      	ldr	r0, [pc, #64]	; (8002610 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80025ce:	f005 faf3 	bl	8007bb8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80025d2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80025d6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025da:	2204      	movs	r2, #4
 80025dc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025e0:	2210      	movs	r2, #16
 80025e2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025ee:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80025f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f4:	4905      	ldr	r1, [pc, #20]	; (800260c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025f6:	4806      	ldr	r0, [pc, #24]	; (8002610 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80025f8:	f005 fade 	bl	8007bb8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4804      	ldr	r0, [pc, #16]	; (8002610 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002600:	f005 fb05 	bl	8007c0e <HAL_SDRAM_ProgramRefreshRate>
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	200001a4 	.word	0x200001a4
 8002610:	2004b5a0 	.word	0x2004b5a0

08002614 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  if(HAL_SDRAM_Read_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8002620:	68f9      	ldr	r1, [r7, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	4806      	ldr	r0, [pc, #24]	; (8002640 <BSP_SDRAM_ReadData+0x2c>)
 8002628:	f005 fa44 	bl	8007ab4 <HAL_SDRAM_Read_32b>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <BSP_SDRAM_ReadData+0x22>
  {
    return SDRAM_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <BSP_SDRAM_ReadData+0x24>
  }
  else
  {
    return SDRAM_OK;
 8002636:	2300      	movs	r3, #0
  } 
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	2004b5a0 	.word	0x2004b5a0

08002644 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  if(HAL_SDRAM_Write_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	4806      	ldr	r0, [pc, #24]	; (8002670 <BSP_SDRAM_WriteData+0x2c>)
 8002658:	f005 fa6b 	bl	8007b32 <HAL_SDRAM_Write_32b>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <BSP_SDRAM_WriteData+0x22>
  {
    return SDRAM_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <BSP_SDRAM_WriteData+0x24>
  }
  else
  {
    return SDRAM_OK;
 8002666:	2300      	movs	r3, #0
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2004b5a0 	.word	0x2004b5a0

08002674 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002674:	b580      	push	{r7, lr}
 8002676:	b090      	sub	sp, #64	; 0x40
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800267e:	4b70      	ldr	r3, [pc, #448]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	4a6f      	ldr	r2, [pc, #444]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6393      	str	r3, [r2, #56]	; 0x38
 800268a:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002696:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a69      	ldr	r2, [pc, #420]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 800269c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b67      	ldr	r3, [pc, #412]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ae:	4b64      	ldr	r3, [pc, #400]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a63      	ldr	r2, [pc, #396]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b61      	ldr	r3, [pc, #388]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	623b      	str	r3, [r7, #32]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c6:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a5d      	ldr	r2, [pc, #372]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026de:	4b58      	ldr	r3, [pc, #352]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a57      	ldr	r2, [pc, #348]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026e4:	f043 0310 	orr.w	r3, r3, #16
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b55      	ldr	r3, [pc, #340]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026f6:	4b52      	ldr	r3, [pc, #328]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a51      	ldr	r2, [pc, #324]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 80026fc:	f043 0320 	orr.w	r3, r3, #32
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800270e:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a4b      	ldr	r2, [pc, #300]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 8002714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002726:	4b46      	ldr	r3, [pc, #280]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a45      	ldr	r2, [pc, #276]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 800272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b43      	ldr	r3, [pc, #268]	; (8002840 <BSP_SDRAM_MspInit+0x1cc>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002742:	2301      	movs	r3, #1
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002746:	2302      	movs	r3, #2
 8002748:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800274a:	230c      	movs	r3, #12
 800274c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800274e:	2308      	movs	r3, #8
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002756:	4619      	mov	r1, r3
 8002758:	483a      	ldr	r0, [pc, #232]	; (8002844 <BSP_SDRAM_MspInit+0x1d0>)
 800275a:	f002 ff03 	bl	8005564 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800275e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002768:	4619      	mov	r1, r3
 800276a:	4837      	ldr	r0, [pc, #220]	; (8002848 <BSP_SDRAM_MspInit+0x1d4>)
 800276c:	f002 fefa 	bl	8005564 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002770:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800277a:	4619      	mov	r1, r3
 800277c:	4833      	ldr	r0, [pc, #204]	; (800284c <BSP_SDRAM_MspInit+0x1d8>)
 800277e:	f002 fef1 	bl	8005564 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002782:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800278c:	4619      	mov	r1, r3
 800278e:	4830      	ldr	r0, [pc, #192]	; (8002850 <BSP_SDRAM_MspInit+0x1dc>)
 8002790:	f002 fee8 	bl	8005564 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002794:	f248 1333 	movw	r3, #33075	; 0x8133
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800279a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800279e:	4619      	mov	r1, r3
 80027a0:	482c      	ldr	r0, [pc, #176]	; (8002854 <BSP_SDRAM_MspInit+0x1e0>)
 80027a2:	f002 fedf 	bl	8005564 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80027a6:	2328      	movs	r3, #40	; 0x28
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80027aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ae:	4619      	mov	r1, r3
 80027b0:	4829      	ldr	r0, [pc, #164]	; (8002858 <BSP_SDRAM_MspInit+0x1e4>)
 80027b2:	f002 fed7 	bl	8005564 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80027c2:	4b26      	ldr	r3, [pc, #152]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027d8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027e0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80027e2:	4b1e      	ldr	r3, [pc, #120]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ee:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027f8:	2203      	movs	r2, #3
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 80027fe:	2200      	movs	r2, #0
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 800280a:	4a15      	ldr	r2, [pc, #84]	; (8002860 <BSP_SDRAM_MspInit+0x1ec>)
 800280c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a12      	ldr	r2, [pc, #72]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
 8002814:	4a11      	ldr	r2, [pc, #68]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800281a:	4810      	ldr	r0, [pc, #64]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 800281c:	f001 f908 	bl	8003a30 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002820:	480e      	ldr	r0, [pc, #56]	; (800285c <BSP_SDRAM_MspInit+0x1e8>)
 8002822:	f001 f857 	bl	80038d4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	210f      	movs	r1, #15
 800282a:	2038      	movs	r0, #56	; 0x38
 800282c:	f000 fd65 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002830:	2038      	movs	r0, #56	; 0x38
 8002832:	f000 fd7e 	bl	8003332 <HAL_NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3740      	adds	r7, #64	; 0x40
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40020800 	.word	0x40020800
 8002848:	40020c00 	.word	0x40020c00
 800284c:	40021000 	.word	0x40021000
 8002850:	40021400 	.word	0x40021400
 8002854:	40021800 	.word	0x40021800
 8002858:	40021c00 	.word	0x40021c00
 800285c:	200001b4 	.word	0x200001b4
 8002860:	40026410 	.word	0x40026410

08002864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_MspInit+0x44>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <HAL_MspInit+0x44>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_MspInit+0x44>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_MspInit+0x44>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <HAL_MspInit+0x44>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_MspInit+0x44>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	; 0x38
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a72      	ldr	r2, [pc, #456]	; (8002a94 <HAL_DCMI_MspInit+0x1e8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f040 80de 	bne.w	8002a8c <HAL_DCMI_MspInit+0x1e0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80028d0:	4b71      	ldr	r3, [pc, #452]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	4a70      	ldr	r2, [pc, #448]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6353      	str	r3, [r2, #52]	; 0x34
 80028dc:	4b6e      	ldr	r3, [pc, #440]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 80028de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	623b      	str	r3, [r7, #32]
 80028e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e8:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	4a6a      	ldr	r2, [pc, #424]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 80028ee:	f043 0310 	orr.w	r3, r3, #16
 80028f2:	6313      	str	r3, [r2, #48]	; 0x30
 80028f4:	4b68      	ldr	r3, [pc, #416]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002900:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	4a64      	ldr	r2, [pc, #400]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 8002906:	f043 0308 	orr.w	r3, r3, #8
 800290a:	6313      	str	r3, [r2, #48]	; 0x30
 800290c:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002918:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	4a5e      	ldr	r2, [pc, #376]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 800291e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002922:	6313      	str	r3, [r2, #48]	; 0x30
 8002924:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 8002936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293a:	6313      	str	r3, [r2, #48]	; 0x30
 800293c:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6313      	str	r3, [r2, #48]	; 0x30
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_DCMI_MspInit+0x1ec>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002960:	2360      	movs	r3, #96	; 0x60
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002970:	230d      	movs	r3, #13
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002978:	4619      	mov	r1, r3
 800297a:	4848      	ldr	r0, [pc, #288]	; (8002a9c <HAL_DCMI_MspInit+0x1f0>)
 800297c:	f002 fdf2 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002980:	2308      	movs	r3, #8
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002990:	230d      	movs	r3, #13
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002998:	4619      	mov	r1, r3
 800299a:	4841      	ldr	r0, [pc, #260]	; (8002aa0 <HAL_DCMI_MspInit+0x1f4>)
 800299c:	f002 fde2 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80029a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029b2:	230d      	movs	r3, #13
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80029b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ba:	4619      	mov	r1, r3
 80029bc:	4839      	ldr	r0, [pc, #228]	; (8002aa4 <HAL_DCMI_MspInit+0x1f8>)
 80029be:	f002 fdd1 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80029c2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	2302      	movs	r3, #2
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029d4:	230d      	movs	r3, #13
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029dc:	4619      	mov	r1, r3
 80029de:	4832      	ldr	r0, [pc, #200]	; (8002aa8 <HAL_DCMI_MspInit+0x1fc>)
 80029e0:	f002 fdc0 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80029e4:	2350      	movs	r3, #80	; 0x50
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029f4:	230d      	movs	r3, #13
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fc:	4619      	mov	r1, r3
 80029fe:	482b      	ldr	r0, [pc, #172]	; (8002aac <HAL_DCMI_MspInit+0x200>)
 8002a00:	f002 fdb0 	bl	8005564 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002a04:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a06:	4a2b      	ldr	r2, [pc, #172]	; (8002ab4 <HAL_DCMI_MspInit+0x208>)
 8002a08:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002a0a:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a10:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a12:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002a1e:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a24:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a2c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a34:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8002a36:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a3c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a44:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a48:	2204      	movs	r2, #4
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a4e:	2203      	movs	r2, #3
 8002a50:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002a60:	4813      	ldr	r0, [pc, #76]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a62:	f000 ff37 	bl	80038d4 <HAL_DMA_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_DCMI_MspInit+0x1c4>
    {
      Error_Handler();
 8002a6c:	f7ff f942 	bl	8001cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a0f      	ldr	r2, [pc, #60]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a74:	649a      	str	r2, [r3, #72]	; 0x48
 8002a76:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <HAL_DCMI_MspInit+0x204>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	204e      	movs	r0, #78	; 0x4e
 8002a82:	f000 fc3a 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002a86:	204e      	movs	r0, #78	; 0x4e
 8002a88:	f000 fc53 	bl	8003332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002a8c:	bf00      	nop
 8002a8e:	3738      	adds	r7, #56	; 0x38
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	50050000 	.word	0x50050000
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40020c00 	.word	0x40020c00
 8002aa4:	40021800 	.word	0x40021800
 8002aa8:	40021c00 	.word	0x40021c00
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	2000021c 	.word	0x2000021c
 8002ab4:	40026428 	.word	0x40026428

08002ab8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_DMA2D_MspInit+0x38>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_DMA2D_MspInit+0x3c>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_DMA2D_MspInit+0x3c>)
 8002ad0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_DMA2D_MspInit+0x3c>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	4002b000 	.word	0x4002b000
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08e      	sub	sp, #56	; 0x38
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a51      	ldr	r2, [pc, #324]	; (8002c5c <HAL_LTDC_MspInit+0x164>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	f040 809b 	bne.w	8002c52 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002b1c:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b26:	6453      	str	r3, [r2, #68]	; 0x44
 8002b28:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a49      	ldr	r2, [pc, #292]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b3a:	f043 0310 	orr.w	r3, r3, #16
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b4c:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	4a43      	ldr	r2, [pc, #268]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b56:	6313      	str	r3, [r2, #48]	; 0x30
 8002b58:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b64:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	4a3d      	ldr	r2, [pc, #244]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b70:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b7c:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	4a37      	ldr	r2, [pc, #220]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b86:	6313      	str	r3, [r2, #48]	; 0x30
 8002b88:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	4a31      	ldr	r2, [pc, #196]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba0:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_LTDC_MspInit+0x168>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002bac:	2310      	movs	r3, #16
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bbc:	230e      	movs	r3, #14
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4827      	ldr	r0, [pc, #156]	; (8002c64 <HAL_LTDC_MspInit+0x16c>)
 8002bc8:	f002 fccc 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002bcc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bde:	230e      	movs	r3, #14
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be6:	4619      	mov	r1, r3
 8002be8:	481f      	ldr	r0, [pc, #124]	; (8002c68 <HAL_LTDC_MspInit+0x170>)
 8002bea:	f002 fcbb 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002bee:	23f7      	movs	r3, #247	; 0xf7
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bfe:	230e      	movs	r3, #14
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c06:	4619      	mov	r1, r3
 8002c08:	4818      	ldr	r0, [pc, #96]	; (8002c6c <HAL_LTDC_MspInit+0x174>)
 8002c0a:	f002 fcab 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c20:	2309      	movs	r3, #9
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4811      	ldr	r0, [pc, #68]	; (8002c70 <HAL_LTDC_MspInit+0x178>)
 8002c2c:	f002 fc9a 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002c30:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c42:	230e      	movs	r3, #14
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4809      	ldr	r0, [pc, #36]	; (8002c74 <HAL_LTDC_MspInit+0x17c>)
 8002c4e:	f002 fc89 	bl	8005564 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002c52:	bf00      	nop
 8002c54:	3738      	adds	r7, #56	; 0x38
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40016800 	.word	0x40016800
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40022400 	.word	0x40022400
 8002c6c:	40022800 	.word	0x40022800
 8002c70:	40021800 	.word	0x40021800
 8002c74:	40022000 	.word	0x40022000

08002c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a24      	ldr	r2, [pc, #144]	; (8002d28 <HAL_TIM_Base_MspInit+0xb0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d130      	bne.n	8002cfc <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_TIM_Base_MspInit+0xb4>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <HAL_TIM_Base_MspInit+0xb4>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_TIM_Base_MspInit+0xb4>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_TIM_Base_MspInit+0xb4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <HAL_TIM_Base_MspInit+0xb4>)
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_TIM_Base_MspInit+0xb4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002cca:	2310      	movs	r3, #16
 8002ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4812      	ldr	r0, [pc, #72]	; (8002d30 <HAL_TIM_Base_MspInit+0xb8>)
 8002ce6:	f002 fc3d 	bl	8005564 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	201d      	movs	r0, #29
 8002cf0:	f000 fb03 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cf4:	201d      	movs	r0, #29
 8002cf6:	f000 fb1c 	bl	8003332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002cfa:	e010      	b.n	8002d1e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <HAL_TIM_Base_MspInit+0xbc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10b      	bne.n	8002d1e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_TIM_Base_MspInit+0xb4>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <HAL_TIM_Base_MspInit+0xb4>)
 8002d0c:	f043 0310 	orr.w	r3, r3, #16
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_TIM_Base_MspInit+0xb4>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
}
 8002d1e:	bf00      	nop
 8002d20:	3728      	adds	r7, #40	; 0x28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40001000 	.word	0x40001000

08002d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a25      	ldr	r2, [pc, #148]	; (8002dec <HAL_UART_MspInit+0xb4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d144      	bne.n	8002de4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d5a:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_UART_MspInit+0xb8>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <HAL_UART_MspInit+0xb8>)
 8002d60:	f043 0310 	orr.w	r3, r3, #16
 8002d64:	6453      	str	r3, [r2, #68]	; 0x44
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <HAL_UART_MspInit+0xb8>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_UART_MspInit+0xb8>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_UART_MspInit+0xb8>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <HAL_UART_MspInit+0xb8>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_UART_MspInit+0xb8>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <HAL_UART_MspInit+0xb8>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <HAL_UART_MspInit+0xb8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002db2:	2307      	movs	r3, #7
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480d      	ldr	r0, [pc, #52]	; (8002df4 <HAL_UART_MspInit+0xbc>)
 8002dbe:	f002 fbd1 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dd4:	2307      	movs	r3, #7
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4806      	ldr	r0, [pc, #24]	; (8002df8 <HAL_UART_MspInit+0xc0>)
 8002de0:	f002 fbc0 	bl	8005564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002de4:	bf00      	nop
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40011000 	.word	0x40011000
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020000 	.word	0x40020000

08002dfc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002e10:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <HAL_FMC_MspInit+0x100>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d16d      	bne.n	8002ef4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002e18:	4b38      	ldr	r3, [pc, #224]	; (8002efc <HAL_FMC_MspInit+0x100>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e1e:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_FMC_MspInit+0x104>)
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	4a37      	ldr	r2, [pc, #220]	; (8002f00 <HAL_FMC_MspInit+0x104>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6393      	str	r3, [r2, #56]	; 0x38
 8002e2a:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <HAL_FMC_MspInit+0x104>)
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002e36:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002e3a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e44:	2303      	movs	r3, #3
 8002e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e48:	230c      	movs	r3, #12
 8002e4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	482c      	ldr	r0, [pc, #176]	; (8002f04 <HAL_FMC_MspInit+0x108>)
 8002e52:	f002 fb87 	bl	8005564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002e56:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e5a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e68:	230c      	movs	r3, #12
 8002e6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4825      	ldr	r0, [pc, #148]	; (8002f08 <HAL_FMC_MspInit+0x10c>)
 8002e72:	f002 fb77 	bl	8005564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002e76:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e7a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e88:	230c      	movs	r3, #12
 8002e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	481e      	ldr	r0, [pc, #120]	; (8002f0c <HAL_FMC_MspInit+0x110>)
 8002e92:	f002 fb67 	bl	8005564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002e96:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e9a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4817      	ldr	r0, [pc, #92]	; (8002f10 <HAL_FMC_MspInit+0x114>)
 8002eb2:	f002 fb57 	bl	8005564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002eb6:	2328      	movs	r3, #40	; 0x28
 8002eb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4811      	ldr	r0, [pc, #68]	; (8002f14 <HAL_FMC_MspInit+0x118>)
 8002ed0:	f002 fb48 	bl	8005564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ee4:	230c      	movs	r3, #12
 8002ee6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	480a      	ldr	r0, [pc, #40]	; (8002f18 <HAL_FMC_MspInit+0x11c>)
 8002eee:	f002 fb39 	bl	8005564 <HAL_GPIO_Init>
 8002ef2:	e000      	b.n	8002ef6 <HAL_FMC_MspInit+0xfa>
    return;
 8002ef4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000214 	.word	0x20000214
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40021800 	.word	0x40021800
 8002f0c:	40020c00 	.word	0x40020c00
 8002f10:	40021400 	.word	0x40021400
 8002f14:	40021c00 	.word	0x40021c00
 8002f18:	40020800 	.word	0x40020800

08002f1c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002f24:	f7ff ff6a 	bl	8002dfc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f42:	e7fe      	b.n	8002f42 <HardFault_Handler+0x4>

08002f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <MemManage_Handler+0x4>

08002f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f4e:	e7fe      	b.n	8002f4e <BusFault_Handler+0x4>

08002f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <UsageFault_Handler+0x4>

08002f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f84:	f000 f89c 	bl	80030c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <TIM3_IRQHandler+0x10>)
 8002f92:	f004 feb1 	bl	8007cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200002b4 	.word	0x200002b4

08002fa0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <DMA2_Stream1_IRQHandler+0x10>)
 8002fa6:	f000 fe23 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	2000021c 	.word	0x2000021c

08002fb4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002fb8:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <DCMI_IRQHandler+0x10>)
 8002fba:	f000 fafd 	bl	80035b8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2000039c 	.word	0x2000039c

08002fc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <SystemInit+0x28>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <SystemInit+0x28>)
 8002fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <SystemInit+0x28>)
 8002fde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fe2:	609a      	str	r2, [r3, #8]
#endif
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800302c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ff8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ffa:	e003      	b.n	8003004 <LoopCopyDataInit>

08002ffc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ffe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003000:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003002:	3104      	adds	r1, #4

08003004 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003004:	480b      	ldr	r0, [pc, #44]	; (8003034 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003008:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800300a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800300c:	d3f6      	bcc.n	8002ffc <CopyDataInit>
  ldr  r2, =_sbss
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003010:	e002      	b.n	8003018 <LoopFillZerobss>

08003012 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003012:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003014:	f842 3b04 	str.w	r3, [r2], #4

08003018 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800301a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800301c:	d3f9      	bcc.n	8003012 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800301e:	f7ff ffd3 	bl	8002fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003022:	f005 ffbb 	bl	8008f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003026:	f7fd fd0f 	bl	8000a48 <main>
  bx  lr    
 800302a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800302c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003030:	0800ae74 	.word	0x0800ae74
  ldr  r0, =_sdata
 8003034:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003038:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 800303c:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8003040:	2004b5d8 	.word	0x2004b5d8

08003044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003044:	e7fe      	b.n	8003044 <ADC_IRQHandler>

08003046 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800304a:	2003      	movs	r0, #3
 800304c:	f000 f94a 	bl	80032e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003050:	2000      	movs	r0, #0
 8003052:	f000 f805 	bl	8003060 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003056:	f7ff fc05 	bl	8002864 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003068:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_InitTick+0x54>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_InitTick+0x58>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003076:	fbb3 f3f1 	udiv	r3, r3, r1
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	4618      	mov	r0, r3
 8003080:	f000 f965 	bl	800334e <HAL_SYSTICK_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e00e      	b.n	80030ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b0f      	cmp	r3, #15
 8003092:	d80a      	bhi.n	80030aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003094:	2200      	movs	r2, #0
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	f04f 30ff 	mov.w	r0, #4294967295
 800309c:	f000 f92d 	bl	80032fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030a0:	4a06      	ldr	r2, [pc, #24]	; (80030bc <HAL_InitTick+0x5c>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000020 	.word	0x20000020
 80030b8:	20000028 	.word	0x20000028
 80030bc:	20000024 	.word	0x20000024

080030c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_IncTick+0x20>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_IncTick+0x24>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4413      	add	r3, r2
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_IncTick+0x24>)
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000028 	.word	0x20000028
 80030e4:	2004b5d4 	.word	0x2004b5d4

080030e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return uwTick;
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <HAL_GetTick+0x14>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	2004b5d4 	.word	0x2004b5d4

08003100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff ffee 	bl	80030e8 <HAL_GetTick>
 800310c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d005      	beq.n	8003126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_Delay+0x40>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003126:	bf00      	nop
 8003128:	f7ff ffde 	bl	80030e8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	429a      	cmp	r2, r3
 8003136:	d8f7      	bhi.n	8003128 <HAL_Delay+0x28>
  {
  }
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000028 	.word	0x20000028

08003144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <__NVIC_SetPriorityGrouping+0x40>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003160:	4013      	ands	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 800316e:	4313      	orrs	r3, r2
 8003170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003172:	4a04      	ldr	r2, [pc, #16]	; (8003184 <__NVIC_SetPriorityGrouping+0x40>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00
 8003188:	05fa0000 	.word	0x05fa0000

0800318c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 0307 	and.w	r3, r3, #7
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	db0b      	blt.n	80031d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	4907      	ldr	r1, [pc, #28]	; (80031e0 <__NVIC_EnableIRQ+0x38>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2001      	movs	r0, #1
 80031ca:	fa00 f202 	lsl.w	r2, r0, r2
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	; (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
         );
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b0:	d301      	bcc.n	80032b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00f      	b.n	80032d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <SysTick_Config+0x40>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032be:	210f      	movs	r1, #15
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	f7ff ff8e 	bl	80031e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <SysTick_Config+0x40>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <SysTick_Config+0x40>)
 80032d0:	2207      	movs	r2, #7
 80032d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000e010 	.word	0xe000e010

080032e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff29 	bl	8003144 <__NVIC_SetPriorityGrouping>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800330c:	f7ff ff3e 	bl	800318c <__NVIC_GetPriorityGrouping>
 8003310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff8e 	bl	8003238 <NVIC_EncodePriority>
 800331c:	4602      	mov	r2, r0
 800331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff5d 	bl	80031e4 <__NVIC_SetPriority>
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff31 	bl	80031a8 <__NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffa2 	bl	80032a0 <SysTick_Config>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e069      	b.n	800344e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fa90 	bl	80028ac <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_DCMI_Init+0xf0>)
 80033ae:	400b      	ands	r3, r1
 80033b0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6819      	ldr	r1, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80033c6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80033d2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80033de:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80033ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80033f6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b10      	cmp	r3, #16
 8003406:	d112      	bne.n	800342e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7f1b      	ldrb	r3, [r3, #28]
 800340c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	7f5b      	ldrb	r3, [r3, #29]
 8003412:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003414:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	7f9b      	ldrb	r3, [r3, #30]
 800341a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800341c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7fdb      	ldrb	r3, [r3, #31]
 8003424:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800342a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800342c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 021e 	orr.w	r2, r2, #30
 800343c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	ffe0f007 	.word	0xffe0f007

0800345c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_DCMI_Start_DMA+0x20>
 8003478:	2302      	movs	r3, #2
 800347a:	e095      	b.n	80035a8 <HAL_DCMI_Start_DMA+0x14c>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800349a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0202 	bic.w	r2, r2, #2
 80034aa:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	4a3b      	ldr	r2, [pc, #236]	; (80035b0 <HAL_DCMI_Start_DMA+0x154>)
 80034c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c8:	4a3a      	ldr	r2, [pc, #232]	; (80035b4 <HAL_DCMI_Start_DMA+0x158>)
 80034ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d0:	2200      	movs	r2, #0
 80034d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f2:	d20e      	bcs.n	8003512 <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3328      	adds	r3, #40	; 0x28
 80034fe:	4619      	mov	r1, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	f000 faf2 	bl	8003aec <HAL_DMA_Start_IT>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d03f      	beq.n	800358e <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e04a      	b.n	80035a8 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003516:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <HAL_DCMI_Start_DMA+0x154>)
 8003518:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800352c:	e009      	b.n	8003542 <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003532:	085a      	lsrs	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	005a      	lsls	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d2f0      	bcs.n	800352e <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	1e9a      	subs	r2, r3, #2
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3328      	adds	r3, #40	; 0x28
 8003574:	4619      	mov	r1, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	f000 fe7a 	bl	8004278 <HAL_DMAEx_MultiBufferStart_IT>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e00c      	b.n	80035a8 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	08003771 	.word	0x08003771
 80035b4:	0800389b 	.word	0x0800389b

080035b8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2204      	movs	r2, #4
 80035d8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	f043 0202 	orr.w	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2204      	movs	r2, #4
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	4a35      	ldr	r2, [pc, #212]	; (80036c8 <HAL_DCMI_IRQHandler+0x110>)
 80035f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fad6 	bl	8003bac <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01e      	beq.n	8003648 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2202      	movs	r2, #2
 8003610:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362a:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <HAL_DCMI_IRQHandler+0x110>)
 800362c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003632:	4618      	mov	r0, r3
 8003634:	f000 faba 	bl	8003bac <HAL_DMA_Abort_IT>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f929 	bl	800389a <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2210      	movs	r2, #16
 8003658:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f840 	bl	80036e0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2208      	movs	r2, #8
 8003670:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f83e 	bl	80036f4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01d      	beq.n	80036be <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d107      	bne.n	80036a0 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 021e 	bic.w	r2, r2, #30
 800369e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f825 	bl	8003708 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	0800389b 	.word	0x0800389b

080036cc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_DCMI_DisableCrop+0x16>
 800372e:	2302      	movs	r3, #2
 8003730:	e018      	b.n	8003764 <HAL_DCMI_DisableCrop+0x48>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0204 	bic.w	r2, r2, #4
 8003750:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	2b00      	cmp	r3, #0
 8003788:	d043      	beq.n	8003812 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003796:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d118      	bne.n	80037d6 <DCMI_DMAXferCplt+0x66>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d015      	beq.n	80037d6 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	00da      	lsls	r2, r3, #3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	4619      	mov	r1, r3
 80037c6:	f001 fe8d 	bl	80054e4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	1e5a      	subs	r2, r3, #1
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
 80037d4:	e044      	b.n	8003860 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d13c      	bne.n	8003860 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	00da      	lsls	r2, r3, #3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4413      	add	r3, r2
 80037fe:	2201      	movs	r2, #1
 8003800:	4619      	mov	r1, r3
 8003802:	f001 fe6f 	bl	80054e4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	1e5a      	subs	r2, r3, #1
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
 8003810:	e026      	b.n	8003860 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	e017      	b.n	8003860 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10f      	bne.n	8003860 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	0099      	lsls	r1, r3, #2
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	440a      	add	r2, r1
 8003856:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	429a      	cmp	r2, r3
 800386a:	d112      	bne.n	8003892 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d103      	bne.n	8003892 <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d009      	beq.n	80038c6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff ff00 	bl	80036cc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038e0:	f7ff fc02 	bl	80030e8 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e099      	b.n	8003a24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003910:	e00f      	b.n	8003932 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003912:	f7ff fbe9 	bl	80030e8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b05      	cmp	r3, #5
 800391e:	d908      	bls.n	8003932 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2203      	movs	r2, #3
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e078      	b.n	8003a24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e8      	bne.n	8003912 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <HAL_DMA_Init+0x158>)
 800394c:	4013      	ands	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800395e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	4313      	orrs	r3, r2
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d117      	bne.n	80039f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 faf7 	bl	8003fcc <DMA_CheckFifoParam>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039f2:	2301      	movs	r3, #1
 80039f4:	e016      	b.n	8003a24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 faae 	bl	8003f60 <DMA_CalcBaseAndBitshift>
 8003a04:	4603      	mov	r3, r0
 8003a06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	223f      	movs	r2, #63	; 0x3f
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	f010803f 	.word	0xf010803f

08003a30 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e050      	b.n	8003ae4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d101      	bne.n	8003a52 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e048      	b.n	8003ae4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2221      	movs	r2, #33	; 0x21
 8003a90:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa64 	bl	8003f60 <DMA_CalcBaseAndBitshift>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	223f      	movs	r2, #63	; 0x3f
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_DMA_Start_IT+0x26>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e048      	b.n	8003ba4 <HAL_DMA_Start_IT+0xb8>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d137      	bne.n	8003b96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f9e2 	bl	8003f04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	223f      	movs	r2, #63	; 0x3f
 8003b46:	409a      	lsls	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0216 	orr.w	r2, r2, #22
 8003b5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b6a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0208 	orr.w	r2, r2, #8
 8003b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e005      	b.n	8003ba2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e00c      	b.n	8003be4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2205      	movs	r2, #5
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003bfc:	4b92      	ldr	r3, [pc, #584]	; (8003e48 <HAL_DMA_IRQHandler+0x258>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a92      	ldr	r2, [pc, #584]	; (8003e4c <HAL_DMA_IRQHandler+0x25c>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0a9b      	lsrs	r3, r3, #10
 8003c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01a      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0204 	bic.w	r2, r2, #4
 8003c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	2208      	movs	r2, #8
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f043 0201 	orr.w	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	2201      	movs	r2, #1
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	2201      	movs	r2, #1
 8003c80:	409a      	lsls	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	f043 0202 	orr.w	r2, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c96:	2204      	movs	r2, #4
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d012      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f043 0204 	orr.w	r2, r3, #4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	2210      	movs	r2, #16
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d043      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d03c      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	2210      	movs	r2, #16
 8003cec:	409a      	lsls	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d018      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d024      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
 8003d1e:	e01f      	b.n	8003d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01b      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
 8003d30:	e016      	b.n	8003d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d107      	bne.n	8003d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0208 	bic.w	r2, r2, #8
 8003d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	2220      	movs	r2, #32
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 808e 	beq.w	8003e8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8086 	beq.w	8003e8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	2220      	movs	r2, #32
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b05      	cmp	r3, #5
 8003d98:	d136      	bne.n	8003e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0216 	bic.w	r2, r2, #22
 8003da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_DMA_IRQHandler+0x1da>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0208 	bic.w	r2, r2, #8
 8003dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	223f      	movs	r2, #63	; 0x3f
 8003de0:	409a      	lsls	r2, r3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d07d      	beq.n	8003efa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
        }
        return;
 8003e06:	e078      	b.n	8003efa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01c      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d108      	bne.n	8003e36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d030      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
 8003e34:	e02b      	b.n	8003e8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d027      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	4798      	blx	r3
 8003e46:	e022      	b.n	8003e8e <HAL_DMA_IRQHandler+0x29e>
 8003e48:	20000020 	.word	0x20000020
 8003e4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0210 	bic.w	r2, r2, #16
 8003e6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d032      	beq.n	8003efc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d022      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d307      	bcc.n	8003ed6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f2      	bne.n	8003eba <HAL_DMA_IRQHandler+0x2ca>
 8003ed4:	e000      	b.n	8003ed8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ed6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
 8003ef8:	e000      	b.n	8003efc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003efa:	bf00      	nop
    }
  }
}
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop

08003f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d108      	bne.n	8003f44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f42:	e007      	b.n	8003f54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	3b10      	subs	r3, #16
 8003f70:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <DMA_CalcBaseAndBitshift+0x60>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f7a:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <DMA_CalcBaseAndBitshift+0x64>)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d908      	bls.n	8003fa0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	1d1a      	adds	r2, r3, #4
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	659a      	str	r2, [r3, #88]	; 0x58
 8003f9e:	e006      	b.n	8003fae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	aaaaaaab 	.word	0xaaaaaaab
 8003fc4:	0800ae5c 	.word	0x0800ae5c
 8003fc8:	fffffc00 	.word	0xfffffc00

08003fcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d11f      	bne.n	8004026 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d855      	bhi.n	8004098 <DMA_CheckFifoParam+0xcc>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <DMA_CheckFifoParam+0x28>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	08004017 	.word	0x08004017
 8003ffc:	08004005 	.word	0x08004005
 8004000:	08004099 	.word	0x08004099
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d045      	beq.n	800409c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004014:	e042      	b.n	800409c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800401e:	d13f      	bne.n	80040a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004024:	e03c      	b.n	80040a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402e:	d121      	bne.n	8004074 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b03      	cmp	r3, #3
 8004034:	d836      	bhi.n	80040a4 <DMA_CheckFifoParam+0xd8>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <DMA_CheckFifoParam+0x70>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	0800404d 	.word	0x0800404d
 8004040:	08004053 	.word	0x08004053
 8004044:	0800404d 	.word	0x0800404d
 8004048:	08004065 	.word	0x08004065
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      break;
 8004050:	e02f      	b.n	80040b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d024      	beq.n	80040a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004062:	e021      	b.n	80040a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800406c:	d11e      	bne.n	80040ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004072:	e01b      	b.n	80040ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d902      	bls.n	8004080 <DMA_CheckFifoParam+0xb4>
 800407a:	2b03      	cmp	r3, #3
 800407c:	d003      	beq.n	8004086 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800407e:	e018      	b.n	80040b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
      break;
 8004084:	e015      	b.n	80040b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00e      	beq.n	80040b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
      break;
 8004096:	e00b      	b.n	80040b0 <DMA_CheckFifoParam+0xe4>
      break;
 8004098:	bf00      	nop
 800409a:	e00a      	b.n	80040b2 <DMA_CheckFifoParam+0xe6>
      break;
 800409c:	bf00      	nop
 800409e:	e008      	b.n	80040b2 <DMA_CheckFifoParam+0xe6>
      break;
 80040a0:	bf00      	nop
 80040a2:	e006      	b.n	80040b2 <DMA_CheckFifoParam+0xe6>
      break;
 80040a4:	bf00      	nop
 80040a6:	e004      	b.n	80040b2 <DMA_CheckFifoParam+0xe6>
      break;
 80040a8:	bf00      	nop
 80040aa:	e002      	b.n	80040b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80040ac:	bf00      	nop
 80040ae:	e000      	b.n	80040b2 <DMA_CheckFifoParam+0xe6>
      break;
 80040b0:	bf00      	nop
    }
  } 
  
  return status; 
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e039      	b.n	8004146 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe fce6 	bl	8002ab8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	f023 0107 	bic.w	r1, r3, #7
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_DMA2D_Init+0x90>)
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68d1      	ldr	r1, [r2, #12]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	430b      	orrs	r3, r1
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	ffffc000 	.word	0xffffc000

08004154 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_DMA2D_ConfigLayer+0x20>
 8004170:	2302      	movs	r3, #2
 8004172:	e079      	b.n	8004268 <HAL_DMA2D_ConfigLayer+0x114>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	3318      	adds	r3, #24
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800419e:	4b35      	ldr	r3, [pc, #212]	; (8004274 <HAL_DMA2D_ConfigLayer+0x120>)
 80041a0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b0a      	cmp	r3, #10
 80041a8:	d003      	beq.n	80041b2 <HAL_DMA2D_ConfigLayer+0x5e>
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b09      	cmp	r3, #9
 80041b0:	d107      	bne.n	80041c2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e005      	b.n	80041ce <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	061b      	lsls	r3, r3, #24
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d120      	bne.n	8004216 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	43db      	mvns	r3, r3
 80041de:	ea02 0103 	and.w	r1, r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b0a      	cmp	r3, #10
 80041fc:	d003      	beq.n	8004206 <HAL_DMA2D_ConfigLayer+0xb2>
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b09      	cmp	r3, #9
 8004204:	d127      	bne.n	8004256 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
 8004214:	e01f      	b.n	8004256 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	43db      	mvns	r3, r3
 8004220:	ea02 0103 	and.w	r1, r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	430a      	orrs	r2, r1
 800422c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b0a      	cmp	r3, #10
 800423e:	d003      	beq.n	8004248 <HAL_DMA2D_ConfigLayer+0xf4>
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b09      	cmp	r3, #9
 8004246:	d106      	bne.n	8004256 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004254:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	ff03000f 	.word	0xff03000f

08004278 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b80      	cmp	r3, #128	; 0x80
 8004290:	d106      	bne.n	80042a0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	f001 b901 	b.w	80054a2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d102      	bne.n	80042b0 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 80042aa:	2302      	movs	r3, #2
 80042ac:	f001 b8f9 	b.w	80054a2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f041 80e7 	bne.w	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x121c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80042e2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f001 f910 	bl	8005518 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	4b99      	ldr	r3, [pc, #612]	; (8004564 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004300:	429a      	cmp	r2, r3
 8004302:	d960      	bls.n	80043c6 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a97      	ldr	r2, [pc, #604]	; (8004568 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d057      	beq.n	80043be <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a96      	ldr	r2, [pc, #600]	; (800456c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d050      	beq.n	80043ba <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a94      	ldr	r2, [pc, #592]	; (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d049      	beq.n	80043b6 <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a93      	ldr	r2, [pc, #588]	; (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d042      	beq.n	80043b2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a91      	ldr	r2, [pc, #580]	; (8004578 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d03a      	beq.n	80043ac <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a90      	ldr	r2, [pc, #576]	; (800457c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d032      	beq.n	80043a6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a8e      	ldr	r2, [pc, #568]	; (8004580 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d02a      	beq.n	80043a0 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a8d      	ldr	r2, [pc, #564]	; (8004584 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a8b      	ldr	r2, [pc, #556]	; (8004588 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01a      	beq.n	8004394 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a8a      	ldr	r2, [pc, #552]	; (800458c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d012      	beq.n	800438e <HAL_DMAEx_MultiBufferStart_IT+0x116>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a88      	ldr	r2, [pc, #544]	; (8004590 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00a      	beq.n	8004388 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a87      	ldr	r2, [pc, #540]	; (8004594 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d102      	bne.n	8004382 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 800437c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004380:	e01e      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004382:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004386:	e01b      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004388:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800438c:	e018      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800438e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004392:	e015      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004394:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004398:	e012      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800439a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800439e:	e00f      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80043a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043a4:	e00c      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80043a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043aa:	e009      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80043ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043b0:	e006      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80043b2:	2320      	movs	r3, #32
 80043b4:	e004      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80043b6:	2320      	movs	r3, #32
 80043b8:	e002      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80043ba:	2320      	movs	r3, #32
 80043bc:	e000      	b.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80043be:	2320      	movs	r3, #32
 80043c0:	4a75      	ldr	r2, [pc, #468]	; (8004598 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80043c2:	60d3      	str	r3, [r2, #12]
 80043c4:	e150      	b.n	8004668 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b73      	ldr	r3, [pc, #460]	; (800459c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d960      	bls.n	8004494 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a64      	ldr	r2, [pc, #400]	; (8004568 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d057      	beq.n	800448c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a62      	ldr	r2, [pc, #392]	; (800456c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d050      	beq.n	8004488 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a61      	ldr	r2, [pc, #388]	; (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d049      	beq.n	8004484 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a5f      	ldr	r2, [pc, #380]	; (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d042      	beq.n	8004480 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a5e      	ldr	r2, [pc, #376]	; (8004578 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d03a      	beq.n	800447a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a5c      	ldr	r2, [pc, #368]	; (800457c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d032      	beq.n	8004474 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a5b      	ldr	r2, [pc, #364]	; (8004580 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d02a      	beq.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a59      	ldr	r2, [pc, #356]	; (8004584 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d022      	beq.n	8004468 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a58      	ldr	r2, [pc, #352]	; (8004588 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d01a      	beq.n	8004462 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a56      	ldr	r2, [pc, #344]	; (800458c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d012      	beq.n	800445c <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a55      	ldr	r2, [pc, #340]	; (8004590 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00a      	beq.n	8004456 <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a53      	ldr	r2, [pc, #332]	; (8004594 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d102      	bne.n	8004450 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 800444a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800444e:	e01e      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004450:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004454:	e01b      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004456:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800445a:	e018      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800445c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004460:	e015      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004462:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004466:	e012      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800446c:	e00f      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800446e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004472:	e00c      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004474:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004478:	e009      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800447a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800447e:	e006      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004480:	2320      	movs	r3, #32
 8004482:	e004      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004484:	2320      	movs	r3, #32
 8004486:	e002      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004488:	2320      	movs	r3, #32
 800448a:	e000      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800448c:	2320      	movs	r3, #32
 800448e:	4a42      	ldr	r2, [pc, #264]	; (8004598 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8004490:	6093      	str	r3, [r2, #8]
 8004492:	e0e9      	b.n	8004668 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800449c:	429a      	cmp	r2, r3
 800449e:	f240 8083 	bls.w	80045a8 <HAL_DMAEx_MultiBufferStart_IT+0x330>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a30      	ldr	r2, [pc, #192]	; (8004568 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d057      	beq.n	800455c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2e      	ldr	r2, [pc, #184]	; (800456c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d050      	beq.n	8004558 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2d      	ldr	r2, [pc, #180]	; (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d049      	beq.n	8004554 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2b      	ldr	r2, [pc, #172]	; (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d042      	beq.n	8004550 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d03a      	beq.n	800454a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a28      	ldr	r2, [pc, #160]	; (800457c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d032      	beq.n	8004544 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a27      	ldr	r2, [pc, #156]	; (8004580 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d02a      	beq.n	800453e <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a25      	ldr	r2, [pc, #148]	; (8004584 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d022      	beq.n	8004538 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a24      	ldr	r2, [pc, #144]	; (8004588 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d01a      	beq.n	8004532 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a22      	ldr	r2, [pc, #136]	; (800458c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d012      	beq.n	800452c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a21      	ldr	r2, [pc, #132]	; (8004590 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00a      	beq.n	8004526 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d102      	bne.n	8004520 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 800451a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800451e:	e01e      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004520:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004524:	e01b      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004526:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800452a:	e018      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800452c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004530:	e015      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004532:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004536:	e012      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800453c:	e00f      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800453e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004542:	e00c      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004544:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004548:	e009      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800454a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800454e:	e006      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004550:	2320      	movs	r3, #32
 8004552:	e004      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004554:	2320      	movs	r3, #32
 8004556:	e002      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004558:	2320      	movs	r3, #32
 800455a:	e000      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800455c:	2320      	movs	r3, #32
 800455e:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8004560:	60d3      	str	r3, [r2, #12]
 8004562:	e081      	b.n	8004668 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8004564:	40026458 	.word	0x40026458
 8004568:	40026010 	.word	0x40026010
 800456c:	40026410 	.word	0x40026410
 8004570:	40026070 	.word	0x40026070
 8004574:	40026470 	.word	0x40026470
 8004578:	40026028 	.word	0x40026028
 800457c:	40026428 	.word	0x40026428
 8004580:	40026088 	.word	0x40026088
 8004584:	40026488 	.word	0x40026488
 8004588:	40026040 	.word	0x40026040
 800458c:	40026440 	.word	0x40026440
 8004590:	400260a0 	.word	0x400260a0
 8004594:	400264a0 	.word	0x400264a0
 8004598:	40026400 	.word	0x40026400
 800459c:	400260b8 	.word	0x400260b8
 80045a0:	40026058 	.word	0x40026058
 80045a4:	40026000 	.word	0x40026000
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a96      	ldr	r2, [pc, #600]	; (8004808 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d057      	beq.n	8004662 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a95      	ldr	r2, [pc, #596]	; (800480c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d050      	beq.n	800465e <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a93      	ldr	r2, [pc, #588]	; (8004810 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d049      	beq.n	800465a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a92      	ldr	r2, [pc, #584]	; (8004814 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d042      	beq.n	8004656 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a90      	ldr	r2, [pc, #576]	; (8004818 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d03a      	beq.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a8f      	ldr	r2, [pc, #572]	; (800481c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d032      	beq.n	800464a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a8d      	ldr	r2, [pc, #564]	; (8004820 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d02a      	beq.n	8004644 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a8c      	ldr	r2, [pc, #560]	; (8004824 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <HAL_DMAEx_MultiBufferStart_IT+0x3c6>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a8a      	ldr	r2, [pc, #552]	; (8004828 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01a      	beq.n	8004638 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a89      	ldr	r2, [pc, #548]	; (800482c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d012      	beq.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x3ba>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a87      	ldr	r2, [pc, #540]	; (8004830 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00a      	beq.n	800462c <HAL_DMAEx_MultiBufferStart_IT+0x3b4>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a86      	ldr	r2, [pc, #536]	; (8004834 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d102      	bne.n	8004626 <HAL_DMAEx_MultiBufferStart_IT+0x3ae>
 8004620:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004624:	e01e      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004626:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800462a:	e01b      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800462c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004630:	e018      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004632:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004636:	e015      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004638:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800463c:	e012      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800463e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004642:	e00f      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004644:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004648:	e00c      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800464a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800464e:	e009      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004654:	e006      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004656:	2320      	movs	r3, #32
 8004658:	e004      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800465a:	2320      	movs	r3, #32
 800465c:	e002      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800465e:	2320      	movs	r3, #32
 8004660:	e000      	b.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004662:	2320      	movs	r3, #32
 8004664:	4a74      	ldr	r2, [pc, #464]	; (8004838 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8004666:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	4b73      	ldr	r3, [pc, #460]	; (800483c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8004670:	429a      	cmp	r2, r3
 8004672:	d960      	bls.n	8004736 <HAL_DMAEx_MultiBufferStart_IT+0x4be>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a63      	ldr	r2, [pc, #396]	; (8004808 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d057      	beq.n	800472e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a62      	ldr	r2, [pc, #392]	; (800480c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d050      	beq.n	800472a <HAL_DMAEx_MultiBufferStart_IT+0x4b2>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a60      	ldr	r2, [pc, #384]	; (8004810 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d049      	beq.n	8004726 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5f      	ldr	r2, [pc, #380]	; (8004814 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d042      	beq.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a5d      	ldr	r2, [pc, #372]	; (8004818 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d03a      	beq.n	800471c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a5c      	ldr	r2, [pc, #368]	; (800481c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d032      	beq.n	8004716 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a5a      	ldr	r2, [pc, #360]	; (8004820 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d02a      	beq.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x498>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a59      	ldr	r2, [pc, #356]	; (8004824 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d022      	beq.n	800470a <HAL_DMAEx_MultiBufferStart_IT+0x492>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a57      	ldr	r2, [pc, #348]	; (8004828 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01a      	beq.n	8004704 <HAL_DMAEx_MultiBufferStart_IT+0x48c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a56      	ldr	r2, [pc, #344]	; (800482c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d012      	beq.n	80046fe <HAL_DMAEx_MultiBufferStart_IT+0x486>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a54      	ldr	r2, [pc, #336]	; (8004830 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00a      	beq.n	80046f8 <HAL_DMAEx_MultiBufferStart_IT+0x480>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a53      	ldr	r2, [pc, #332]	; (8004834 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d102      	bne.n	80046f2 <HAL_DMAEx_MultiBufferStart_IT+0x47a>
 80046ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046f0:	e01e      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80046f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046f6:	e01b      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80046f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046fc:	e018      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80046fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004702:	e015      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004704:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004708:	e012      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800470a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470e:	e00f      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004714:	e00c      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800471a:	e009      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800471c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004720:	e006      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004722:	2310      	movs	r3, #16
 8004724:	e004      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004726:	2310      	movs	r3, #16
 8004728:	e002      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800472a:	2310      	movs	r3, #16
 800472c:	e000      	b.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800472e:	2310      	movs	r3, #16
 8004730:	4a43      	ldr	r2, [pc, #268]	; (8004840 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004732:	60d3      	str	r3, [r2, #12]
 8004734:	e14f      	b.n	80049d6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	4b41      	ldr	r3, [pc, #260]	; (8004844 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800473e:	429a      	cmp	r2, r3
 8004740:	f240 8082 	bls.w	8004848 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2f      	ldr	r2, [pc, #188]	; (8004808 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d057      	beq.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x586>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2e      	ldr	r2, [pc, #184]	; (800480c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d050      	beq.n	80047fa <HAL_DMAEx_MultiBufferStart_IT+0x582>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2c      	ldr	r2, [pc, #176]	; (8004810 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d049      	beq.n	80047f6 <HAL_DMAEx_MultiBufferStart_IT+0x57e>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2b      	ldr	r2, [pc, #172]	; (8004814 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d042      	beq.n	80047f2 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a29      	ldr	r2, [pc, #164]	; (8004818 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d03a      	beq.n	80047ec <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a28      	ldr	r2, [pc, #160]	; (800481c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d032      	beq.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a26      	ldr	r2, [pc, #152]	; (8004820 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d02a      	beq.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a25      	ldr	r2, [pc, #148]	; (8004824 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d022      	beq.n	80047da <HAL_DMAEx_MultiBufferStart_IT+0x562>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a23      	ldr	r2, [pc, #140]	; (8004828 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01a      	beq.n	80047d4 <HAL_DMAEx_MultiBufferStart_IT+0x55c>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a22      	ldr	r2, [pc, #136]	; (800482c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d012      	beq.n	80047ce <HAL_DMAEx_MultiBufferStart_IT+0x556>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00a      	beq.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x550>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1f      	ldr	r2, [pc, #124]	; (8004834 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d102      	bne.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0x54a>
 80047bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047c0:	e01e      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80047c6:	e01b      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047cc:	e018      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047d2:	e015      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047d8:	e012      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047de:	e00f      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e4:	e00c      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ea:	e009      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f0:	e006      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047f2:	2310      	movs	r3, #16
 80047f4:	e004      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047f6:	2310      	movs	r3, #16
 80047f8:	e002      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047fa:	2310      	movs	r3, #16
 80047fc:	e000      	b.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80047fe:	2310      	movs	r3, #16
 8004800:	4a0f      	ldr	r2, [pc, #60]	; (8004840 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004802:	6093      	str	r3, [r2, #8]
 8004804:	e0e7      	b.n	80049d6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004806:	bf00      	nop
 8004808:	40026010 	.word	0x40026010
 800480c:	40026410 	.word	0x40026410
 8004810:	40026070 	.word	0x40026070
 8004814:	40026470 	.word	0x40026470
 8004818:	40026028 	.word	0x40026028
 800481c:	40026428 	.word	0x40026428
 8004820:	40026088 	.word	0x40026088
 8004824:	40026488 	.word	0x40026488
 8004828:	40026040 	.word	0x40026040
 800482c:	40026440 	.word	0x40026440
 8004830:	400260a0 	.word	0x400260a0
 8004834:	400264a0 	.word	0x400264a0
 8004838:	40026000 	.word	0x40026000
 800483c:	40026458 	.word	0x40026458
 8004840:	40026400 	.word	0x40026400
 8004844:	400260b8 	.word	0x400260b8
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	4b96      	ldr	r3, [pc, #600]	; (8004aa8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d960      	bls.n	8004916 <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a94      	ldr	r2, [pc, #592]	; (8004aac <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d057      	beq.n	800490e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a93      	ldr	r2, [pc, #588]	; (8004ab0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d050      	beq.n	800490a <HAL_DMAEx_MultiBufferStart_IT+0x692>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a91      	ldr	r2, [pc, #580]	; (8004ab4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d049      	beq.n	8004906 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a90      	ldr	r2, [pc, #576]	; (8004ab8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d042      	beq.n	8004902 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a8e      	ldr	r2, [pc, #568]	; (8004abc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d03a      	beq.n	80048fc <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a8d      	ldr	r2, [pc, #564]	; (8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d032      	beq.n	80048f6 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a8b      	ldr	r2, [pc, #556]	; (8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d02a      	beq.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a8a      	ldr	r2, [pc, #552]	; (8004ac8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d022      	beq.n	80048ea <HAL_DMAEx_MultiBufferStart_IT+0x672>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a88      	ldr	r2, [pc, #544]	; (8004acc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01a      	beq.n	80048e4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a87      	ldr	r2, [pc, #540]	; (8004ad0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d012      	beq.n	80048de <HAL_DMAEx_MultiBufferStart_IT+0x666>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a85      	ldr	r2, [pc, #532]	; (8004ad4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00a      	beq.n	80048d8 <HAL_DMAEx_MultiBufferStart_IT+0x660>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a84      	ldr	r2, [pc, #528]	; (8004ad8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d102      	bne.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x65a>
 80048cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048d0:	e01e      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80048d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048d6:	e01b      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80048d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048dc:	e018      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80048de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048e2:	e015      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80048e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048e8:	e012      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80048ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ee:	e00f      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80048f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f4:	e00c      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80048f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fa:	e009      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80048fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004900:	e006      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004902:	2310      	movs	r3, #16
 8004904:	e004      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004906:	2310      	movs	r3, #16
 8004908:	e002      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800490a:	2310      	movs	r3, #16
 800490c:	e000      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800490e:	2310      	movs	r3, #16
 8004910:	4a72      	ldr	r2, [pc, #456]	; (8004adc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004912:	60d3      	str	r3, [r2, #12]
 8004914:	e05f      	b.n	80049d6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a64      	ldr	r2, [pc, #400]	; (8004aac <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d057      	beq.n	80049d0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a62      	ldr	r2, [pc, #392]	; (8004ab0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d050      	beq.n	80049cc <HAL_DMAEx_MultiBufferStart_IT+0x754>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a61      	ldr	r2, [pc, #388]	; (8004ab4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d049      	beq.n	80049c8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a5f      	ldr	r2, [pc, #380]	; (8004ab8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d042      	beq.n	80049c4 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a5e      	ldr	r2, [pc, #376]	; (8004abc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d03a      	beq.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a5c      	ldr	r2, [pc, #368]	; (8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d032      	beq.n	80049b8 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a5b      	ldr	r2, [pc, #364]	; (8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d02a      	beq.n	80049b2 <HAL_DMAEx_MultiBufferStart_IT+0x73a>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a59      	ldr	r2, [pc, #356]	; (8004ac8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d022      	beq.n	80049ac <HAL_DMAEx_MultiBufferStart_IT+0x734>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a58      	ldr	r2, [pc, #352]	; (8004acc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d01a      	beq.n	80049a6 <HAL_DMAEx_MultiBufferStart_IT+0x72e>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a56      	ldr	r2, [pc, #344]	; (8004ad0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d012      	beq.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0x728>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a55      	ldr	r2, [pc, #340]	; (8004ad4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00a      	beq.n	800499a <HAL_DMAEx_MultiBufferStart_IT+0x722>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a53      	ldr	r2, [pc, #332]	; (8004ad8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d102      	bne.n	8004994 <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 800498e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004992:	e01e      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004994:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004998:	e01b      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 800499a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800499e:	e018      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80049a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049a4:	e015      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80049a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049aa:	e012      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80049ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b0:	e00f      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80049b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b6:	e00c      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80049b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049bc:	e009      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80049be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c2:	e006      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80049c4:	2310      	movs	r3, #16
 80049c6:	e004      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80049c8:	2310      	movs	r3, #16
 80049ca:	e002      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80049cc:	2310      	movs	r3, #16
 80049ce:	e000      	b.n	80049d2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80049d0:	2310      	movs	r3, #16
 80049d2:	4a42      	ldr	r2, [pc, #264]	; (8004adc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80049d4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	4b40      	ldr	r3, [pc, #256]	; (8004ae0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80049de:	429a      	cmp	r2, r3
 80049e0:	f240 8082 	bls.w	8004ae8 <HAL_DMAEx_MultiBufferStart_IT+0x870>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a30      	ldr	r2, [pc, #192]	; (8004aac <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d057      	beq.n	8004a9e <HAL_DMAEx_MultiBufferStart_IT+0x826>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2f      	ldr	r2, [pc, #188]	; (8004ab0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d050      	beq.n	8004a9a <HAL_DMAEx_MultiBufferStart_IT+0x822>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2d      	ldr	r2, [pc, #180]	; (8004ab4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d049      	beq.n	8004a96 <HAL_DMAEx_MultiBufferStart_IT+0x81e>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2c      	ldr	r2, [pc, #176]	; (8004ab8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d042      	beq.n	8004a92 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2a      	ldr	r2, [pc, #168]	; (8004abc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d03a      	beq.n	8004a8c <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a29      	ldr	r2, [pc, #164]	; (8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d032      	beq.n	8004a86 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a27      	ldr	r2, [pc, #156]	; (8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d02a      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0x808>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d022      	beq.n	8004a7a <HAL_DMAEx_MultiBufferStart_IT+0x802>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a24      	ldr	r2, [pc, #144]	; (8004acc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01a      	beq.n	8004a74 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a23      	ldr	r2, [pc, #140]	; (8004ad0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d012      	beq.n	8004a6e <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00a      	beq.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a20      	ldr	r2, [pc, #128]	; (8004ad8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d102      	bne.n	8004a62 <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 8004a5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a60:	e01e      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a66:	e01b      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a6c:	e018      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a72:	e015      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a78:	e012      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a7e:	e00f      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a84:	e00c      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a8a:	e009      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a90:	e006      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a92:	2308      	movs	r3, #8
 8004a94:	e004      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a96:	2308      	movs	r3, #8
 8004a98:	e002      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	e000      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	4a10      	ldr	r2, [pc, #64]	; (8004ae4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8004aa2:	60d3      	str	r3, [r2, #12]
 8004aa4:	e16f      	b.n	8004d86 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8004aa6:	bf00      	nop
 8004aa8:	40026058 	.word	0x40026058
 8004aac:	40026010 	.word	0x40026010
 8004ab0:	40026410 	.word	0x40026410
 8004ab4:	40026070 	.word	0x40026070
 8004ab8:	40026470 	.word	0x40026470
 8004abc:	40026028 	.word	0x40026028
 8004ac0:	40026428 	.word	0x40026428
 8004ac4:	40026088 	.word	0x40026088
 8004ac8:	40026488 	.word	0x40026488
 8004acc:	40026040 	.word	0x40026040
 8004ad0:	40026440 	.word	0x40026440
 8004ad4:	400260a0 	.word	0x400260a0
 8004ad8:	400264a0 	.word	0x400264a0
 8004adc:	40026000 	.word	0x40026000
 8004ae0:	40026458 	.word	0x40026458
 8004ae4:	40026400 	.word	0x40026400
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b94      	ldr	r3, [pc, #592]	; (8004d40 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d960      	bls.n	8004bb6 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a92      	ldr	r2, [pc, #584]	; (8004d44 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d057      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a91      	ldr	r2, [pc, #580]	; (8004d48 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d050      	beq.n	8004baa <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a8f      	ldr	r2, [pc, #572]	; (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d049      	beq.n	8004ba6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a8e      	ldr	r2, [pc, #568]	; (8004d50 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d042      	beq.n	8004ba2 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a8c      	ldr	r2, [pc, #560]	; (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d03a      	beq.n	8004b9c <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a8b      	ldr	r2, [pc, #556]	; (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d032      	beq.n	8004b96 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a89      	ldr	r2, [pc, #548]	; (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02a      	beq.n	8004b90 <HAL_DMAEx_MultiBufferStart_IT+0x918>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a88      	ldr	r2, [pc, #544]	; (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d022      	beq.n	8004b8a <HAL_DMAEx_MultiBufferStart_IT+0x912>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a86      	ldr	r2, [pc, #536]	; (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01a      	beq.n	8004b84 <HAL_DMAEx_MultiBufferStart_IT+0x90c>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a85      	ldr	r2, [pc, #532]	; (8004d68 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d012      	beq.n	8004b7e <HAL_DMAEx_MultiBufferStart_IT+0x906>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a83      	ldr	r2, [pc, #524]	; (8004d6c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00a      	beq.n	8004b78 <HAL_DMAEx_MultiBufferStart_IT+0x900>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a82      	ldr	r2, [pc, #520]	; (8004d70 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d102      	bne.n	8004b72 <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 8004b6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b70:	e01e      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b76:	e01b      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004b78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b7c:	e018      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004b7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b82:	e015      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004b84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b88:	e012      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b8e:	e00f      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b94:	e00c      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b9a:	e009      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba0:	e006      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	e004      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	e002      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004baa:	2308      	movs	r3, #8
 8004bac:	e000      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004bae:	2308      	movs	r3, #8
 8004bb0:	4a70      	ldr	r2, [pc, #448]	; (8004d74 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8004bb2:	6093      	str	r3, [r2, #8]
 8004bb4:	e0e7      	b.n	8004d86 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4b6e      	ldr	r3, [pc, #440]	; (8004d78 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d960      	bls.n	8004c84 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a5f      	ldr	r2, [pc, #380]	; (8004d44 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d057      	beq.n	8004c7c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5d      	ldr	r2, [pc, #372]	; (8004d48 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d050      	beq.n	8004c78 <HAL_DMAEx_MultiBufferStart_IT+0xa00>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5c      	ldr	r2, [pc, #368]	; (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d049      	beq.n	8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a5a      	ldr	r2, [pc, #360]	; (8004d50 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d042      	beq.n	8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a59      	ldr	r2, [pc, #356]	; (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d03a      	beq.n	8004c6a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a57      	ldr	r2, [pc, #348]	; (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d032      	beq.n	8004c64 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a56      	ldr	r2, [pc, #344]	; (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d02a      	beq.n	8004c5e <HAL_DMAEx_MultiBufferStart_IT+0x9e6>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a54      	ldr	r2, [pc, #336]	; (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d022      	beq.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x9e0>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a53      	ldr	r2, [pc, #332]	; (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d01a      	beq.n	8004c52 <HAL_DMAEx_MultiBufferStart_IT+0x9da>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a51      	ldr	r2, [pc, #324]	; (8004d68 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d012      	beq.n	8004c4c <HAL_DMAEx_MultiBufferStart_IT+0x9d4>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a50      	ldr	r2, [pc, #320]	; (8004d6c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00a      	beq.n	8004c46 <HAL_DMAEx_MultiBufferStart_IT+0x9ce>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a4e      	ldr	r2, [pc, #312]	; (8004d70 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d102      	bne.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x9c8>
 8004c3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c3e:	e01e      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c44:	e01b      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c4a:	e018      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c50:	e015      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c56:	e012      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c5c:	e00f      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c62:	e00c      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c68:	e009      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c6e:	e006      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c70:	2308      	movs	r3, #8
 8004c72:	e004      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c74:	2308      	movs	r3, #8
 8004c76:	e002      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	e000      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	4a3f      	ldr	r2, [pc, #252]	; (8004d7c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8004c80:	60d3      	str	r3, [r2, #12]
 8004c82:	e080      	b.n	8004d86 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2e      	ldr	r2, [pc, #184]	; (8004d44 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d078      	beq.n	8004d80 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a2d      	ldr	r2, [pc, #180]	; (8004d48 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d050      	beq.n	8004d3a <HAL_DMAEx_MultiBufferStart_IT+0xac2>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a2b      	ldr	r2, [pc, #172]	; (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d049      	beq.n	8004d36 <HAL_DMAEx_MultiBufferStart_IT+0xabe>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a2a      	ldr	r2, [pc, #168]	; (8004d50 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d042      	beq.n	8004d32 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a28      	ldr	r2, [pc, #160]	; (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d03a      	beq.n	8004d2c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a27      	ldr	r2, [pc, #156]	; (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d032      	beq.n	8004d26 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a25      	ldr	r2, [pc, #148]	; (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d02a      	beq.n	8004d20 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a24      	ldr	r2, [pc, #144]	; (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <HAL_DMAEx_MultiBufferStart_IT+0xaa2>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a22      	ldr	r2, [pc, #136]	; (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01a      	beq.n	8004d14 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a21      	ldr	r2, [pc, #132]	; (8004d68 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d012      	beq.n	8004d0e <HAL_DMAEx_MultiBufferStart_IT+0xa96>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00a      	beq.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0xa90>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d102      	bne.n	8004d02 <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 8004cfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d00:	e03f      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d06:	e03c      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d0c:	e039      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d12:	e036      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d18:	e033      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d1e:	e030      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d24:	e02d      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d2a:	e02a      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d30:	e027      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d32:	2308      	movs	r3, #8
 8004d34:	e025      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d36:	2308      	movs	r3, #8
 8004d38:	e023      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	e021      	b.n	8004d82 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004d3e:	bf00      	nop
 8004d40:	400260b8 	.word	0x400260b8
 8004d44:	40026010 	.word	0x40026010
 8004d48:	40026410 	.word	0x40026410
 8004d4c:	40026070 	.word	0x40026070
 8004d50:	40026470 	.word	0x40026470
 8004d54:	40026028 	.word	0x40026028
 8004d58:	40026428 	.word	0x40026428
 8004d5c:	40026088 	.word	0x40026088
 8004d60:	40026488 	.word	0x40026488
 8004d64:	40026040 	.word	0x40026040
 8004d68:	40026440 	.word	0x40026440
 8004d6c:	400260a0 	.word	0x400260a0
 8004d70:	400264a0 	.word	0x400264a0
 8004d74:	40026400 	.word	0x40026400
 8004d78:	40026058 	.word	0x40026058
 8004d7c:	40026000 	.word	0x40026000
 8004d80:	2308      	movs	r3, #8
 8004d82:	4a9a      	ldr	r2, [pc, #616]	; (8004fec <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004d84:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b98      	ldr	r3, [pc, #608]	; (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d960      	bls.n	8004e54 <HAL_DMAEx_MultiBufferStart_IT+0xbdc>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a97      	ldr	r2, [pc, #604]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d057      	beq.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a95      	ldr	r2, [pc, #596]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d050      	beq.n	8004e48 <HAL_DMAEx_MultiBufferStart_IT+0xbd0>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a94      	ldr	r2, [pc, #592]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d049      	beq.n	8004e44 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a92      	ldr	r2, [pc, #584]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d042      	beq.n	8004e40 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a91      	ldr	r2, [pc, #580]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d03a      	beq.n	8004e3a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a8f      	ldr	r2, [pc, #572]	; (8005008 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d032      	beq.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a8e      	ldr	r2, [pc, #568]	; (800500c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d02a      	beq.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0xbb6>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a8c      	ldr	r2, [pc, #560]	; (8005010 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d022      	beq.n	8004e28 <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a8b      	ldr	r2, [pc, #556]	; (8005014 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d01a      	beq.n	8004e22 <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a89      	ldr	r2, [pc, #548]	; (8005018 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d012      	beq.n	8004e1c <HAL_DMAEx_MultiBufferStart_IT+0xba4>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a88      	ldr	r2, [pc, #544]	; (800501c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00a      	beq.n	8004e16 <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a86      	ldr	r2, [pc, #536]	; (8005020 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d102      	bne.n	8004e10 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
 8004e0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e0e:	e01e      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e14:	e01b      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e1a:	e018      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e20:	e015      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e26:	e012      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e2c:	e00f      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e32:	e00c      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e38:	e009      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e3e:	e006      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e40:	2304      	movs	r3, #4
 8004e42:	e004      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e44:	2304      	movs	r3, #4
 8004e46:	e002      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	e000      	b.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	4a75      	ldr	r2, [pc, #468]	; (8005024 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8004e50:	60d3      	str	r3, [r2, #12]
 8004e52:	e151      	b.n	80050f8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4b73      	ldr	r3, [pc, #460]	; (8005028 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d960      	bls.n	8004f22 <HAL_DMAEx_MultiBufferStart_IT+0xcaa>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a63      	ldr	r2, [pc, #396]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d057      	beq.n	8004f1a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a62      	ldr	r2, [pc, #392]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d050      	beq.n	8004f16 <HAL_DMAEx_MultiBufferStart_IT+0xc9e>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a60      	ldr	r2, [pc, #384]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d049      	beq.n	8004f12 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a5f      	ldr	r2, [pc, #380]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d042      	beq.n	8004f0e <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a5d      	ldr	r2, [pc, #372]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d03a      	beq.n	8004f08 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a5c      	ldr	r2, [pc, #368]	; (8005008 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d032      	beq.n	8004f02 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a5a      	ldr	r2, [pc, #360]	; (800500c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d02a      	beq.n	8004efc <HAL_DMAEx_MultiBufferStart_IT+0xc84>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a59      	ldr	r2, [pc, #356]	; (8005010 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d022      	beq.n	8004ef6 <HAL_DMAEx_MultiBufferStart_IT+0xc7e>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a57      	ldr	r2, [pc, #348]	; (8005014 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01a      	beq.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0xc78>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a56      	ldr	r2, [pc, #344]	; (8005018 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d012      	beq.n	8004eea <HAL_DMAEx_MultiBufferStart_IT+0xc72>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a54      	ldr	r2, [pc, #336]	; (800501c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_DMAEx_MultiBufferStart_IT+0xc6c>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a53      	ldr	r2, [pc, #332]	; (8005020 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d102      	bne.n	8004ede <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004ed8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004edc:	e01e      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004ede:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ee2:	e01b      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004ee4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ee8:	e018      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004eea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004eee:	e015      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004ef0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ef4:	e012      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004efa:	e00f      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f00:	e00c      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f06:	e009      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f0c:	e006      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004f0e:	2304      	movs	r3, #4
 8004f10:	e004      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004f12:	2304      	movs	r3, #4
 8004f14:	e002      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004f16:	2304      	movs	r3, #4
 8004f18:	e000      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004f1a:	2304      	movs	r3, #4
 8004f1c:	4a41      	ldr	r2, [pc, #260]	; (8005024 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8004f1e:	6093      	str	r3, [r2, #8]
 8004f20:	e0ea      	b.n	80050f8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	4b40      	ldr	r3, [pc, #256]	; (800502c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	f240 8084 	bls.w	8005038 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a2f      	ldr	r2, [pc, #188]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d07a      	beq.n	8005030 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2e      	ldr	r2, [pc, #184]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d050      	beq.n	8004fe6 <HAL_DMAEx_MultiBufferStart_IT+0xd6e>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d049      	beq.n	8004fe2 <HAL_DMAEx_MultiBufferStart_IT+0xd6a>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2b      	ldr	r2, [pc, #172]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d042      	beq.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a29      	ldr	r2, [pc, #164]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d03a      	beq.n	8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a28      	ldr	r2, [pc, #160]	; (8005008 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d032      	beq.n	8004fd2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a26      	ldr	r2, [pc, #152]	; (800500c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d02a      	beq.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xd54>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a25      	ldr	r2, [pc, #148]	; (8005010 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d022      	beq.n	8004fc6 <HAL_DMAEx_MultiBufferStart_IT+0xd4e>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a23      	ldr	r2, [pc, #140]	; (8005014 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01a      	beq.n	8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0xd48>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a22      	ldr	r2, [pc, #136]	; (8005018 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d012      	beq.n	8004fba <HAL_DMAEx_MultiBufferStart_IT+0xd42>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a20      	ldr	r2, [pc, #128]	; (800501c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d102      	bne.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0xd36>
 8004fa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fac:	e041      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fb2:	e03e      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fb4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fb8:	e03b      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fbe:	e038      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fc4:	e035      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fca:	e032      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fd0:	e02f      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fd6:	e02c      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fdc:	e029      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fde:	2304      	movs	r3, #4
 8004fe0:	e027      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	e025      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	e023      	b.n	8005032 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fea:	bf00      	nop
 8004fec:	40026000 	.word	0x40026000
 8004ff0:	40026458 	.word	0x40026458
 8004ff4:	40026010 	.word	0x40026010
 8004ff8:	40026410 	.word	0x40026410
 8004ffc:	40026070 	.word	0x40026070
 8005000:	40026470 	.word	0x40026470
 8005004:	40026028 	.word	0x40026028
 8005008:	40026428 	.word	0x40026428
 800500c:	40026088 	.word	0x40026088
 8005010:	40026488 	.word	0x40026488
 8005014:	40026040 	.word	0x40026040
 8005018:	40026440 	.word	0x40026440
 800501c:	400260a0 	.word	0x400260a0
 8005020:	400264a0 	.word	0x400264a0
 8005024:	40026400 	.word	0x40026400
 8005028:	400260b8 	.word	0x400260b8
 800502c:	40026058 	.word	0x40026058
 8005030:	2304      	movs	r3, #4
 8005032:	4a94      	ldr	r2, [pc, #592]	; (8005284 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8005034:	60d3      	str	r3, [r2, #12]
 8005036:	e05f      	b.n	80050f8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a92      	ldr	r2, [pc, #584]	; (8005288 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d057      	beq.n	80050f2 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a91      	ldr	r2, [pc, #580]	; (800528c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d050      	beq.n	80050ee <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a8f      	ldr	r2, [pc, #572]	; (8005290 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d049      	beq.n	80050ea <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a8e      	ldr	r2, [pc, #568]	; (8005294 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d042      	beq.n	80050e6 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a8c      	ldr	r2, [pc, #560]	; (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d03a      	beq.n	80050e0 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a8b      	ldr	r2, [pc, #556]	; (800529c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d032      	beq.n	80050da <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a89      	ldr	r2, [pc, #548]	; (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d02a      	beq.n	80050d4 <HAL_DMAEx_MultiBufferStart_IT+0xe5c>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a88      	ldr	r2, [pc, #544]	; (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d022      	beq.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0xe56>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a86      	ldr	r2, [pc, #536]	; (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01a      	beq.n	80050c8 <HAL_DMAEx_MultiBufferStart_IT+0xe50>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a85      	ldr	r2, [pc, #532]	; (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d012      	beq.n	80050c2 <HAL_DMAEx_MultiBufferStart_IT+0xe4a>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a83      	ldr	r2, [pc, #524]	; (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00a      	beq.n	80050bc <HAL_DMAEx_MultiBufferStart_IT+0xe44>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a82      	ldr	r2, [pc, #520]	; (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d102      	bne.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0xe3e>
 80050b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050b4:	e01e      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050ba:	e01b      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050c0:	e018      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050c6:	e015      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050cc:	e012      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d2:	e00f      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d8:	e00c      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050de:	e009      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050e4:	e006      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050e6:	2304      	movs	r3, #4
 80050e8:	e004      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050ea:	2304      	movs	r3, #4
 80050ec:	e002      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050ee:	2304      	movs	r3, #4
 80050f0:	e000      	b.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050f2:	2304      	movs	r3, #4
 80050f4:	4a63      	ldr	r2, [pc, #396]	; (8005284 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80050f6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	4b6e      	ldr	r3, [pc, #440]	; (80052b8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8005100:	429a      	cmp	r2, r3
 8005102:	d95c      	bls.n	80051be <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a5f      	ldr	r2, [pc, #380]	; (8005288 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d053      	beq.n	80051b6 <HAL_DMAEx_MultiBufferStart_IT+0xf3e>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a5e      	ldr	r2, [pc, #376]	; (800528c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d04c      	beq.n	80051b2 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5c      	ldr	r2, [pc, #368]	; (8005290 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d045      	beq.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a5b      	ldr	r2, [pc, #364]	; (8005294 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d03e      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a59      	ldr	r2, [pc, #356]	; (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d037      	beq.n	80051a6 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a58      	ldr	r2, [pc, #352]	; (800529c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d030      	beq.n	80051a2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a56      	ldr	r2, [pc, #344]	; (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d029      	beq.n	800519e <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a55      	ldr	r2, [pc, #340]	; (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d022      	beq.n	800519a <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a53      	ldr	r2, [pc, #332]	; (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01a      	beq.n	8005194 <HAL_DMAEx_MultiBufferStart_IT+0xf1c>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a52      	ldr	r2, [pc, #328]	; (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d012      	beq.n	800518e <HAL_DMAEx_MultiBufferStart_IT+0xf16>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a50      	ldr	r2, [pc, #320]	; (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00a      	beq.n	8005188 <HAL_DMAEx_MultiBufferStart_IT+0xf10>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a4f      	ldr	r2, [pc, #316]	; (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d102      	bne.n	8005182 <HAL_DMAEx_MultiBufferStart_IT+0xf0a>
 800517c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005180:	e01a      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005186:	e017      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800518c:	e014      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800518e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005192:	e011      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005198:	e00e      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800519a:	2340      	movs	r3, #64	; 0x40
 800519c:	e00c      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800519e:	2340      	movs	r3, #64	; 0x40
 80051a0:	e00a      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	e008      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80051a6:	2340      	movs	r3, #64	; 0x40
 80051a8:	e006      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e004      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e002      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4a40      	ldr	r2, [pc, #256]	; (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80051ba:	60d3      	str	r3, [r2, #12]
 80051bc:	e141      	b.n	8005442 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b3e      	ldr	r3, [pc, #248]	; (80052c0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d97c      	bls.n	80052c4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2e      	ldr	r2, [pc, #184]	; (8005288 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d053      	beq.n	800527c <HAL_DMAEx_MultiBufferStart_IT+0x1004>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2c      	ldr	r2, [pc, #176]	; (800528c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d04c      	beq.n	8005278 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a2b      	ldr	r2, [pc, #172]	; (8005290 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d045      	beq.n	8005274 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a29      	ldr	r2, [pc, #164]	; (8005294 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d03e      	beq.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xff8>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a28      	ldr	r2, [pc, #160]	; (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d037      	beq.n	800526c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a26      	ldr	r2, [pc, #152]	; (800529c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d030      	beq.n	8005268 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a25      	ldr	r2, [pc, #148]	; (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d029      	beq.n	8005264 <HAL_DMAEx_MultiBufferStart_IT+0xfec>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a23      	ldr	r2, [pc, #140]	; (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d022      	beq.n	8005260 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d01a      	beq.n	800525a <HAL_DMAEx_MultiBufferStart_IT+0xfe2>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a20      	ldr	r2, [pc, #128]	; (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d012      	beq.n	8005254 <HAL_DMAEx_MultiBufferStart_IT+0xfdc>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00a      	beq.n	800524e <HAL_DMAEx_MultiBufferStart_IT+0xfd6>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1d      	ldr	r2, [pc, #116]	; (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d102      	bne.n	8005248 <HAL_DMAEx_MultiBufferStart_IT+0xfd0>
 8005242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005246:	e01a      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005248:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800524c:	e017      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800524e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005252:	e014      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005258:	e011      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800525a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800525e:	e00e      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005260:	2340      	movs	r3, #64	; 0x40
 8005262:	e00c      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005264:	2340      	movs	r3, #64	; 0x40
 8005266:	e00a      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005268:	2340      	movs	r3, #64	; 0x40
 800526a:	e008      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800526c:	2340      	movs	r3, #64	; 0x40
 800526e:	e006      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005270:	2301      	movs	r3, #1
 8005272:	e004      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005274:	2301      	movs	r3, #1
 8005276:	e002      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800527c:	2301      	movs	r3, #1
 800527e:	4a0f      	ldr	r2, [pc, #60]	; (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8005280:	6093      	str	r3, [r2, #8]
 8005282:	e0de      	b.n	8005442 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8005284:	40026000 	.word	0x40026000
 8005288:	40026010 	.word	0x40026010
 800528c:	40026410 	.word	0x40026410
 8005290:	40026070 	.word	0x40026070
 8005294:	40026470 	.word	0x40026470
 8005298:	40026028 	.word	0x40026028
 800529c:	40026428 	.word	0x40026428
 80052a0:	40026088 	.word	0x40026088
 80052a4:	40026488 	.word	0x40026488
 80052a8:	40026040 	.word	0x40026040
 80052ac:	40026440 	.word	0x40026440
 80052b0:	400260a0 	.word	0x400260a0
 80052b4:	400264a0 	.word	0x400264a0
 80052b8:	40026458 	.word	0x40026458
 80052bc:	40026400 	.word	0x40026400
 80052c0:	400260b8 	.word	0x400260b8
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	4b78      	ldr	r3, [pc, #480]	; (80054ac <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d95c      	bls.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a76      	ldr	r2, [pc, #472]	; (80054b0 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d053      	beq.n	8005382 <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a75      	ldr	r2, [pc, #468]	; (80054b4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d04c      	beq.n	800537e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a73      	ldr	r2, [pc, #460]	; (80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d045      	beq.n	800537a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a72      	ldr	r2, [pc, #456]	; (80054bc <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d03e      	beq.n	8005376 <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a70      	ldr	r2, [pc, #448]	; (80054c0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d037      	beq.n	8005372 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a6f      	ldr	r2, [pc, #444]	; (80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d030      	beq.n	800536e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a6d      	ldr	r2, [pc, #436]	; (80054c8 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d029      	beq.n	800536a <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a6c      	ldr	r2, [pc, #432]	; (80054cc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d022      	beq.n	8005366 <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a6a      	ldr	r2, [pc, #424]	; (80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01a      	beq.n	8005360 <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a69      	ldr	r2, [pc, #420]	; (80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d012      	beq.n	800535a <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a67      	ldr	r2, [pc, #412]	; (80054d8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00a      	beq.n	8005354 <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a66      	ldr	r2, [pc, #408]	; (80054dc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d102      	bne.n	800534e <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
 8005348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800534c:	e01a      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800534e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005352:	e017      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005358:	e014      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800535a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800535e:	e011      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005364:	e00e      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005366:	2340      	movs	r3, #64	; 0x40
 8005368:	e00c      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800536a:	2340      	movs	r3, #64	; 0x40
 800536c:	e00a      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800536e:	2340      	movs	r3, #64	; 0x40
 8005370:	e008      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005372:	2340      	movs	r3, #64	; 0x40
 8005374:	e006      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005376:	2301      	movs	r3, #1
 8005378:	e004      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800537a:	2301      	movs	r3, #1
 800537c:	e002      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005382:	2301      	movs	r3, #1
 8005384:	4a56      	ldr	r2, [pc, #344]	; (80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005386:	60d3      	str	r3, [r2, #12]
 8005388:	e05b      	b.n	8005442 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a48      	ldr	r2, [pc, #288]	; (80054b0 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d053      	beq.n	800543c <HAL_DMAEx_MultiBufferStart_IT+0x11c4>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a46      	ldr	r2, [pc, #280]	; (80054b4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d04c      	beq.n	8005438 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a45      	ldr	r2, [pc, #276]	; (80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d045      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a43      	ldr	r2, [pc, #268]	; (80054bc <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d03e      	beq.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a42      	ldr	r2, [pc, #264]	; (80054c0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d037      	beq.n	800542c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a40      	ldr	r2, [pc, #256]	; (80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d030      	beq.n	8005428 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3f      	ldr	r2, [pc, #252]	; (80054c8 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d029      	beq.n	8005424 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a3d      	ldr	r2, [pc, #244]	; (80054cc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d022      	beq.n	8005420 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a3c      	ldr	r2, [pc, #240]	; (80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d01a      	beq.n	800541a <HAL_DMAEx_MultiBufferStart_IT+0x11a2>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a3a      	ldr	r2, [pc, #232]	; (80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d012      	beq.n	8005414 <HAL_DMAEx_MultiBufferStart_IT+0x119c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a39      	ldr	r2, [pc, #228]	; (80054d8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00a      	beq.n	800540e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a37      	ldr	r2, [pc, #220]	; (80054dc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d102      	bne.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0x1190>
 8005402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005406:	e01a      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005408:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800540c:	e017      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800540e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005412:	e014      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005418:	e011      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800541a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800541e:	e00e      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005420:	2340      	movs	r3, #64	; 0x40
 8005422:	e00c      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	e00a      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005428:	2340      	movs	r3, #64	; 0x40
 800542a:	e008      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800542c:	2340      	movs	r3, #64	; 0x40
 800542e:	e006      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005430:	2301      	movs	r3, #1
 8005432:	e004      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005434:	2301      	movs	r3, #1
 8005436:	e002      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800543c:	2301      	movs	r3, #1
 800543e:	4a28      	ldr	r2, [pc, #160]	; (80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005440:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0216 	orr.w	r2, r2, #22
 8005450:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005460:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11fa>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_DMAEx_MultiBufferStart_IT+0x120a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0208 	orr.w	r2, r2, #8
 8005480:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	e005      	b.n	80054a0 <HAL_DMAEx_MultiBufferStart_IT+0x1228>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800549c:	2302      	movs	r3, #2
 800549e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40026058 	.word	0x40026058
 80054b0:	40026010 	.word	0x40026010
 80054b4:	40026410 	.word	0x40026410
 80054b8:	40026070 	.word	0x40026070
 80054bc:	40026470 	.word	0x40026470
 80054c0:	40026028 	.word	0x40026028
 80054c4:	40026428 	.word	0x40026428
 80054c8:	40026088 	.word	0x40026088
 80054cc:	40026488 	.word	0x40026488
 80054d0:	40026040 	.word	0x40026040
 80054d4:	40026440 	.word	0x40026440
 80054d8:	400260a0 	.word	0x400260a0
 80054dc:	400264a0 	.word	0x400264a0
 80054e0:	40026000 	.word	0x40026000

080054e4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	60da      	str	r2, [r3, #12]
 8005500:	e003      	b.n	800550a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d108      	bne.n	8005548 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005546:	e007      	b.n	8005558 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]
}
 8005558:	bf00      	nop
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005564:	b480      	push	{r7}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	e175      	b.n	8005870 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005584:	2201      	movs	r2, #1
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4013      	ands	r3, r2
 8005596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	429a      	cmp	r2, r3
 800559e:	f040 8164 	bne.w	800586a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d00b      	beq.n	80055c2 <HAL_GPIO_Init+0x5e>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d007      	beq.n	80055c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055b6:	2b11      	cmp	r3, #17
 80055b8:	d003      	beq.n	80055c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b12      	cmp	r3, #18
 80055c0:	d130      	bne.n	8005624 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	2203      	movs	r2, #3
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	43db      	mvns	r3, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4013      	ands	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055f8:	2201      	movs	r2, #1
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4013      	ands	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 0201 	and.w	r2, r3, #1
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4313      	orrs	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	2203      	movs	r2, #3
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4013      	ands	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	4313      	orrs	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x100>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b12      	cmp	r3, #18
 8005662:	d123      	bne.n	80056ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	08da      	lsrs	r2, r3, #3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3208      	adds	r2, #8
 800566c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	220f      	movs	r2, #15
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4013      	ands	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4313      	orrs	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	08da      	lsrs	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3208      	adds	r2, #8
 80056a6:	69b9      	ldr	r1, [r7, #24]
 80056a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	2203      	movs	r2, #3
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	43db      	mvns	r3, r3
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4013      	ands	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0203 	and.w	r2, r3, #3
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80be 	beq.w	800586a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ee:	4b65      	ldr	r3, [pc, #404]	; (8005884 <HAL_GPIO_Init+0x320>)
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	4a64      	ldr	r2, [pc, #400]	; (8005884 <HAL_GPIO_Init+0x320>)
 80056f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056f8:	6453      	str	r3, [r2, #68]	; 0x44
 80056fa:	4b62      	ldr	r3, [pc, #392]	; (8005884 <HAL_GPIO_Init+0x320>)
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005706:	4a60      	ldr	r2, [pc, #384]	; (8005888 <HAL_GPIO_Init+0x324>)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	089b      	lsrs	r3, r3, #2
 800570c:	3302      	adds	r3, #2
 800570e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005712:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	220f      	movs	r2, #15
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43db      	mvns	r3, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4013      	ands	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a57      	ldr	r2, [pc, #348]	; (800588c <HAL_GPIO_Init+0x328>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d037      	beq.n	80057a2 <HAL_GPIO_Init+0x23e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a56      	ldr	r2, [pc, #344]	; (8005890 <HAL_GPIO_Init+0x32c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d031      	beq.n	800579e <HAL_GPIO_Init+0x23a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a55      	ldr	r2, [pc, #340]	; (8005894 <HAL_GPIO_Init+0x330>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d02b      	beq.n	800579a <HAL_GPIO_Init+0x236>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a54      	ldr	r2, [pc, #336]	; (8005898 <HAL_GPIO_Init+0x334>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d025      	beq.n	8005796 <HAL_GPIO_Init+0x232>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a53      	ldr	r2, [pc, #332]	; (800589c <HAL_GPIO_Init+0x338>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01f      	beq.n	8005792 <HAL_GPIO_Init+0x22e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a52      	ldr	r2, [pc, #328]	; (80058a0 <HAL_GPIO_Init+0x33c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d019      	beq.n	800578e <HAL_GPIO_Init+0x22a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a51      	ldr	r2, [pc, #324]	; (80058a4 <HAL_GPIO_Init+0x340>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_GPIO_Init+0x226>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a50      	ldr	r2, [pc, #320]	; (80058a8 <HAL_GPIO_Init+0x344>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00d      	beq.n	8005786 <HAL_GPIO_Init+0x222>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a4f      	ldr	r2, [pc, #316]	; (80058ac <HAL_GPIO_Init+0x348>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d007      	beq.n	8005782 <HAL_GPIO_Init+0x21e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a4e      	ldr	r2, [pc, #312]	; (80058b0 <HAL_GPIO_Init+0x34c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_GPIO_Init+0x21a>
 800577a:	2309      	movs	r3, #9
 800577c:	e012      	b.n	80057a4 <HAL_GPIO_Init+0x240>
 800577e:	230a      	movs	r3, #10
 8005780:	e010      	b.n	80057a4 <HAL_GPIO_Init+0x240>
 8005782:	2308      	movs	r3, #8
 8005784:	e00e      	b.n	80057a4 <HAL_GPIO_Init+0x240>
 8005786:	2307      	movs	r3, #7
 8005788:	e00c      	b.n	80057a4 <HAL_GPIO_Init+0x240>
 800578a:	2306      	movs	r3, #6
 800578c:	e00a      	b.n	80057a4 <HAL_GPIO_Init+0x240>
 800578e:	2305      	movs	r3, #5
 8005790:	e008      	b.n	80057a4 <HAL_GPIO_Init+0x240>
 8005792:	2304      	movs	r3, #4
 8005794:	e006      	b.n	80057a4 <HAL_GPIO_Init+0x240>
 8005796:	2303      	movs	r3, #3
 8005798:	e004      	b.n	80057a4 <HAL_GPIO_Init+0x240>
 800579a:	2302      	movs	r3, #2
 800579c:	e002      	b.n	80057a4 <HAL_GPIO_Init+0x240>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <HAL_GPIO_Init+0x240>
 80057a2:	2300      	movs	r3, #0
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	f002 0203 	and.w	r2, r2, #3
 80057aa:	0092      	lsls	r2, r2, #2
 80057ac:	4093      	lsls	r3, r2
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80057b4:	4934      	ldr	r1, [pc, #208]	; (8005888 <HAL_GPIO_Init+0x324>)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	089b      	lsrs	r3, r3, #2
 80057ba:	3302      	adds	r3, #2
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057c2:	4b3c      	ldr	r3, [pc, #240]	; (80058b4 <HAL_GPIO_Init+0x350>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	43db      	mvns	r3, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4013      	ands	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057e6:	4a33      	ldr	r2, [pc, #204]	; (80058b4 <HAL_GPIO_Init+0x350>)
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80057ec:	4b31      	ldr	r3, [pc, #196]	; (80058b4 <HAL_GPIO_Init+0x350>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	43db      	mvns	r3, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4013      	ands	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005810:	4a28      	ldr	r2, [pc, #160]	; (80058b4 <HAL_GPIO_Init+0x350>)
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005816:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <HAL_GPIO_Init+0x350>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	43db      	mvns	r3, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800583a:	4a1e      	ldr	r2, [pc, #120]	; (80058b4 <HAL_GPIO_Init+0x350>)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005840:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <HAL_GPIO_Init+0x350>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005864:	4a13      	ldr	r2, [pc, #76]	; (80058b4 <HAL_GPIO_Init+0x350>)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3301      	adds	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b0f      	cmp	r3, #15
 8005874:	f67f ae86 	bls.w	8005584 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005878:	bf00      	nop
 800587a:	3724      	adds	r7, #36	; 0x24
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	40023800 	.word	0x40023800
 8005888:	40013800 	.word	0x40013800
 800588c:	40020000 	.word	0x40020000
 8005890:	40020400 	.word	0x40020400
 8005894:	40020800 	.word	0x40020800
 8005898:	40020c00 	.word	0x40020c00
 800589c:	40021000 	.word	0x40021000
 80058a0:	40021400 	.word	0x40021400
 80058a4:	40021800 	.word	0x40021800
 80058a8:	40021c00 	.word	0x40021c00
 80058ac:	40022000 	.word	0x40022000
 80058b0:	40022400 	.word	0x40022400
 80058b4:	40013c00 	.word	0x40013c00

080058b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	807b      	strh	r3, [r7, #2]
 80058c4:	4613      	mov	r3, r2
 80058c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058c8:	787b      	ldrb	r3, [r7, #1]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80058d4:	e003      	b.n	80058de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058d6:	887b      	ldrh	r3, [r7, #2]
 80058d8:	041a      	lsls	r2, r3, #16
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	619a      	str	r2, [r3, #24]
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	887b      	ldrh	r3, [r7, #2]
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005902:	887b      	ldrh	r3, [r7, #2]
 8005904:	041a      	lsls	r2, r3, #16
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800590a:	e002      	b.n	8005912 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800590c:	887a      	ldrh	r2, [r7, #2]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	619a      	str	r2, [r3, #24]
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e07f      	b.n	8005a32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f8a9 	bl	8005a9e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2224      	movs	r2, #36	; 0x24
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0201 	bic.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005970:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005980:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d107      	bne.n	800599a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	e006      	b.n	80059a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d104      	bne.n	80059ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <HAL_I2C_Init+0x11c>)
 80059c6:	430b      	orrs	r3, r1
 80059c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	ea42 0103 	orr.w	r1, r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	021a      	lsls	r2, r3, #8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69d9      	ldr	r1, [r3, #28]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	02008000 	.word	0x02008000

08005a40 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e021      	b.n	8005a96 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2224      	movs	r2, #36	; 0x24
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f821 	bl	8005ab2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	817b      	strh	r3, [r7, #10]
 8005ada:	460b      	mov	r3, r1
 8005adc:	813b      	strh	r3, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	f040 80f9 	bne.w	8005ce2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_I2C_Mem_Write+0x34>
 8005af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e0ed      	b.n	8005ce4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_I2C_Mem_Write+0x4e>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0e6      	b.n	8005ce4 <HAL_I2C_Mem_Write+0x21c>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b1e:	f7fd fae3 	bl	80030e8 <HAL_GetTick>
 8005b22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	2319      	movs	r3, #25
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 fad1 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0d1      	b.n	8005ce4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2221      	movs	r2, #33	; 0x21
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2240      	movs	r2, #64	; 0x40
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b68:	88f8      	ldrh	r0, [r7, #6]
 8005b6a:	893a      	ldrh	r2, [r7, #8]
 8005b6c:	8979      	ldrh	r1, [r7, #10]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	4603      	mov	r3, r0
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f9e1 	bl	8005f40 <I2C_RequestMemoryWrite>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0a9      	b.n	8005ce4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2bff      	cmp	r3, #255	; 0xff
 8005b98:	d90e      	bls.n	8005bb8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	22ff      	movs	r2, #255	; 0xff
 8005b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	8979      	ldrh	r1, [r7, #10]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fbb3 	bl	800631c <I2C_TransferConfig>
 8005bb6:	e00f      	b.n	8005bd8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	8979      	ldrh	r1, [r7, #10]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fba2 	bl	800631c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fabb 	bl	8006158 <I2C_WaitOnTXISFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e07b      	b.n	8005ce4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	781a      	ldrb	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d034      	beq.n	8005c90 <HAL_I2C_Mem_Write+0x1c8>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d130      	bne.n	8005c90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	2200      	movs	r2, #0
 8005c36:	2180      	movs	r1, #128	; 0x80
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fa4d 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e04d      	b.n	8005ce4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2bff      	cmp	r3, #255	; 0xff
 8005c50:	d90e      	bls.n	8005c70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	22ff      	movs	r2, #255	; 0xff
 8005c56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	8979      	ldrh	r1, [r7, #10]
 8005c60:	2300      	movs	r3, #0
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fb57 	bl	800631c <I2C_TransferConfig>
 8005c6e:	e00f      	b.n	8005c90 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	8979      	ldrh	r1, [r7, #10]
 8005c82:	2300      	movs	r3, #0
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fb46 	bl	800631c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d19e      	bne.n	8005bd8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fa9a 	bl	80061d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e01a      	b.n	8005ce4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6859      	ldr	r1, [r3, #4]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <HAL_I2C_Mem_Write+0x224>)
 8005cc2:	400b      	ands	r3, r1
 8005cc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e000      	b.n	8005ce4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005ce2:	2302      	movs	r3, #2
  }
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	fe00e800 	.word	0xfe00e800

08005cf0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4603      	mov	r3, r0
 8005d00:	817b      	strh	r3, [r7, #10]
 8005d02:	460b      	mov	r3, r1
 8005d04:	813b      	strh	r3, [r7, #8]
 8005d06:	4613      	mov	r3, r2
 8005d08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	f040 80fd 	bne.w	8005f12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_I2C_Mem_Read+0x34>
 8005d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0f1      	b.n	8005f14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_I2C_Mem_Read+0x4e>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e0ea      	b.n	8005f14 <HAL_I2C_Mem_Read+0x224>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d46:	f7fd f9cf 	bl	80030e8 <HAL_GetTick>
 8005d4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	2319      	movs	r3, #25
 8005d52:	2201      	movs	r2, #1
 8005d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f9bd 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0d5      	b.n	8005f14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2222      	movs	r2, #34	; 0x22
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2240      	movs	r2, #64	; 0x40
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a3a      	ldr	r2, [r7, #32]
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d90:	88f8      	ldrh	r0, [r7, #6]
 8005d92:	893a      	ldrh	r2, [r7, #8]
 8005d94:	8979      	ldrh	r1, [r7, #10]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	4603      	mov	r3, r0
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f921 	bl	8005fe8 <I2C_RequestMemoryRead>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0ad      	b.n	8005f14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2bff      	cmp	r3, #255	; 0xff
 8005dc0:	d90e      	bls.n	8005de0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	22ff      	movs	r2, #255	; 0xff
 8005dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	8979      	ldrh	r1, [r7, #10]
 8005dd0:	4b52      	ldr	r3, [pc, #328]	; (8005f1c <HAL_I2C_Mem_Read+0x22c>)
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fa9f 	bl	800631c <I2C_TransferConfig>
 8005dde:	e00f      	b.n	8005e00 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	8979      	ldrh	r1, [r7, #10]
 8005df2:	4b4a      	ldr	r3, [pc, #296]	; (8005f1c <HAL_I2C_Mem_Read+0x22c>)
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 fa8e 	bl	800631c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	2200      	movs	r2, #0
 8005e08:	2104      	movs	r1, #4
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f964 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e07c      	b.n	8005f14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d034      	beq.n	8005ec0 <HAL_I2C_Mem_Read+0x1d0>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d130      	bne.n	8005ec0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	2200      	movs	r2, #0
 8005e66:	2180      	movs	r1, #128	; 0x80
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f935 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e04d      	b.n	8005f14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2bff      	cmp	r3, #255	; 0xff
 8005e80:	d90e      	bls.n	8005ea0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	22ff      	movs	r2, #255	; 0xff
 8005e86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	8979      	ldrh	r1, [r7, #10]
 8005e90:	2300      	movs	r3, #0
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 fa3f 	bl	800631c <I2C_TransferConfig>
 8005e9e:	e00f      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	8979      	ldrh	r1, [r7, #10]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fa2e 	bl	800631c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d19a      	bne.n	8005e00 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f982 	bl	80061d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e01a      	b.n	8005f14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6859      	ldr	r1, [r3, #4]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_I2C_Mem_Read+0x230>)
 8005ef2:	400b      	ands	r3, r1
 8005ef4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e000      	b.n	8005f14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005f12:	2302      	movs	r3, #2
  }
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	80002400 	.word	0x80002400
 8005f20:	fe00e800 	.word	0xfe00e800

08005f24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f32:	b2db      	uxtb	r3, r3
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	817b      	strh	r3, [r7, #10]
 8005f52:	460b      	mov	r3, r1
 8005f54:	813b      	strh	r3, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	8979      	ldrh	r1, [r7, #10]
 8005f60:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <I2C_RequestMemoryWrite+0xa4>)
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f9d7 	bl	800631c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	69b9      	ldr	r1, [r7, #24]
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 f8f0 	bl	8006158 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e02c      	b.n	8005fdc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d105      	bne.n	8005f94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f88:	893b      	ldrh	r3, [r7, #8]
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	629a      	str	r2, [r3, #40]	; 0x28
 8005f92:	e015      	b.n	8005fc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f94:	893b      	ldrh	r3, [r7, #8]
 8005f96:	0a1b      	lsrs	r3, r3, #8
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	69b9      	ldr	r1, [r7, #24]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f8d6 	bl	8006158 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e012      	b.n	8005fdc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb6:	893b      	ldrh	r3, [r7, #8]
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2180      	movs	r1, #128	; 0x80
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f884 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	80002000 	.word	0x80002000

08005fe8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	817b      	strh	r3, [r7, #10]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	813b      	strh	r3, [r7, #8]
 8005ffe:	4613      	mov	r3, r2
 8006000:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	b2da      	uxtb	r2, r3
 8006006:	8979      	ldrh	r1, [r7, #10]
 8006008:	4b20      	ldr	r3, [pc, #128]	; (800608c <I2C_RequestMemoryRead+0xa4>)
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	2300      	movs	r3, #0
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f984 	bl	800631c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	69b9      	ldr	r1, [r7, #24]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f89d 	bl	8006158 <I2C_WaitOnTXISFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e02c      	b.n	8006082 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d105      	bne.n	800603a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800602e:	893b      	ldrh	r3, [r7, #8]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
 8006038:	e015      	b.n	8006066 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800603a:	893b      	ldrh	r3, [r7, #8]
 800603c:	0a1b      	lsrs	r3, r3, #8
 800603e:	b29b      	uxth	r3, r3
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	69b9      	ldr	r1, [r7, #24]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f883 	bl	8006158 <I2C_WaitOnTXISFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e012      	b.n	8006082 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800605c:	893b      	ldrh	r3, [r7, #8]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2200      	movs	r2, #0
 800606e:	2140      	movs	r1, #64	; 0x40
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f831 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	80002000 	.word	0x80002000

08006090 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d103      	bne.n	80060ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2200      	movs	r2, #0
 80060ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d007      	beq.n	80060cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	619a      	str	r2, [r3, #24]
  }
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060e8:	e022      	b.n	8006130 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d01e      	beq.n	8006130 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f2:	f7fc fff9 	bl	80030e8 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d113      	bne.n	8006130 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610c:	f043 0220 	orr.w	r2, r3, #32
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e00f      	b.n	8006150 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	bf0c      	ite	eq
 8006140:	2301      	moveq	r3, #1
 8006142:	2300      	movne	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	429a      	cmp	r2, r3
 800614c:	d0cd      	beq.n	80060ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006164:	e02c      	b.n	80061c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f870 	bl	8006250 <I2C_IsAcknowledgeFailed>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e02a      	b.n	80061d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006180:	d01e      	beq.n	80061c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006182:	f7fc ffb1 	bl	80030e8 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	429a      	cmp	r2, r3
 8006190:	d302      	bcc.n	8006198 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d113      	bne.n	80061c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619c:	f043 0220 	orr.w	r2, r3, #32
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e007      	b.n	80061d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d1cb      	bne.n	8006166 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061e4:	e028      	b.n	8006238 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f830 	bl	8006250 <I2C_IsAcknowledgeFailed>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e026      	b.n	8006248 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fa:	f7fc ff75 	bl	80030e8 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	429a      	cmp	r2, r3
 8006208:	d302      	bcc.n	8006210 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d113      	bne.n	8006238 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006214:	f043 0220 	orr.w	r2, r3, #32
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e007      	b.n	8006248 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b20      	cmp	r3, #32
 8006244:	d1cf      	bne.n	80061e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	2b10      	cmp	r3, #16
 8006268:	d151      	bne.n	800630e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800626a:	e022      	b.n	80062b2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d01e      	beq.n	80062b2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006274:	f7fc ff38 	bl	80030e8 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	d302      	bcc.n	800628a <I2C_IsAcknowledgeFailed+0x3a>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d113      	bne.n	80062b2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	f043 0220 	orr.w	r2, r3, #32
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e02e      	b.n	8006310 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d1d5      	bne.n	800626c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2210      	movs	r2, #16
 80062c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2220      	movs	r2, #32
 80062ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f7ff fedd 	bl	8006090 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6859      	ldr	r1, [r3, #4]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <I2C_IsAcknowledgeFailed+0xc8>)
 80062e2:	400b      	ands	r3, r1
 80062e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ea:	f043 0204 	orr.w	r2, r3, #4
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	fe00e800 	.word	0xfe00e800

0800631c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	817b      	strh	r3, [r7, #10]
 800632a:	4613      	mov	r3, r2
 800632c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	0d5b      	lsrs	r3, r3, #21
 8006338:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800633c:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <I2C_TransferConfig+0x58>)
 800633e:	430b      	orrs	r3, r1
 8006340:	43db      	mvns	r3, r3
 8006342:	ea02 0103 	and.w	r1, r2, r3
 8006346:	897b      	ldrh	r3, [r7, #10]
 8006348:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800634c:	7a7b      	ldrb	r3, [r7, #9]
 800634e:	041b      	lsls	r3, r3, #16
 8006350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	431a      	orrs	r2, r3
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	431a      	orrs	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006366:	bf00      	nop
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	03ff63ff 	.word	0x03ff63ff

08006378 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e0bf      	b.n	800650a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fc fbaa 	bl	8002af8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80063ba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6999      	ldr	r1, [r3, #24]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80063d0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6899      	ldr	r1, [r3, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4b4a      	ldr	r3, [pc, #296]	; (8006514 <HAL_LTDC_Init+0x19c>)
 80063ec:	400b      	ands	r3, r1
 80063ee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	041b      	lsls	r3, r3, #16
 80063f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6899      	ldr	r1, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68d9      	ldr	r1, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4b3e      	ldr	r3, [pc, #248]	; (8006514 <HAL_LTDC_Init+0x19c>)
 800641a:	400b      	ands	r3, r1
 800641c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	041b      	lsls	r3, r3, #16
 8006424:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68d9      	ldr	r1, [r3, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6919      	ldr	r1, [r3, #16]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4b33      	ldr	r3, [pc, #204]	; (8006514 <HAL_LTDC_Init+0x19c>)
 8006448:	400b      	ands	r3, r1
 800644a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	041b      	lsls	r3, r3, #16
 8006452:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6919      	ldr	r1, [r3, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6959      	ldr	r1, [r3, #20]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4b27      	ldr	r3, [pc, #156]	; (8006514 <HAL_LTDC_Init+0x19c>)
 8006476:	400b      	ands	r3, r1
 8006478:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6959      	ldr	r1, [r3, #20]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80064a8:	041b      	lsls	r3, r3, #16
 80064aa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0206 	orr.w	r2, r2, #6
 80064e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	f000f800 	.word	0xf000f800

08006518 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006518:	b5b0      	push	{r4, r5, r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_LTDC_ConfigLayer+0x1a>
 800652e:	2302      	movs	r3, #2
 8006530:	e02c      	b.n	800658c <HAL_LTDC_ConfigLayer+0x74>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2134      	movs	r1, #52	; 0x34
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	4413      	add	r3, r2
 800654e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	4614      	mov	r4, r2
 8006556:	461d      	mov	r5, r3
 8006558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800655a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800655e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f81f 	bl	80065b0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2201      	movs	r2, #1
 8006578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bdb0      	pop	{r4, r5, r7, pc}

08006594 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80065a2:	b2db      	uxtb	r3, r3
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b089      	sub	sp, #36	; 0x24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	0c1b      	lsrs	r3, r3, #16
 80065c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065cc:	4413      	add	r3, r2
 80065ce:	041b      	lsls	r3, r3, #16
 80065d0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	01db      	lsls	r3, r3, #7
 80065dc:	4413      	add	r3, r2
 80065de:	3384      	adds	r3, #132	; 0x84
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	4611      	mov	r1, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	01d2      	lsls	r2, r2, #7
 80065ec:	440a      	add	r2, r1
 80065ee:	3284      	adds	r2, #132	; 0x84
 80065f0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80065f4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006606:	4413      	add	r3, r2
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4619      	mov	r1, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	01db      	lsls	r3, r3, #7
 8006614:	440b      	add	r3, r1
 8006616:	3384      	adds	r3, #132	; 0x84
 8006618:	4619      	mov	r1, r3
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4313      	orrs	r3, r2
 800661e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800662e:	4413      	add	r3, r2
 8006630:	041b      	lsls	r3, r3, #16
 8006632:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	01db      	lsls	r3, r3, #7
 800663e:	4413      	add	r3, r2
 8006640:	3384      	adds	r3, #132	; 0x84
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	6812      	ldr	r2, [r2, #0]
 8006648:	4611      	mov	r1, r2
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	01d2      	lsls	r2, r2, #7
 800664e:	440a      	add	r2, r1
 8006650:	3284      	adds	r2, #132	; 0x84
 8006652:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006656:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006666:	4413      	add	r3, r2
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4619      	mov	r1, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	01db      	lsls	r3, r3, #7
 8006674:	440b      	add	r3, r1
 8006676:	3384      	adds	r3, #132	; 0x84
 8006678:	4619      	mov	r1, r3
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4313      	orrs	r3, r2
 800667e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	01db      	lsls	r3, r3, #7
 800668a:	4413      	add	r3, r2
 800668c:	3384      	adds	r3, #132	; 0x84
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	4611      	mov	r1, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	01d2      	lsls	r2, r2, #7
 800669a:	440a      	add	r2, r1
 800669c:	3284      	adds	r2, #132	; 0x84
 800669e:	f023 0307 	bic.w	r3, r3, #7
 80066a2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	01db      	lsls	r3, r3, #7
 80066ae:	4413      	add	r3, r2
 80066b0:	3384      	adds	r3, #132	; 0x84
 80066b2:	461a      	mov	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80066ca:	041b      	lsls	r3, r3, #16
 80066cc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	061b      	lsls	r3, r3, #24
 80066d4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	01db      	lsls	r3, r3, #7
 80066e0:	4413      	add	r3, r2
 80066e2:	3384      	adds	r3, #132	; 0x84
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	01db      	lsls	r3, r3, #7
 80066f0:	4413      	add	r3, r2
 80066f2:	3384      	adds	r3, #132	; 0x84
 80066f4:	461a      	mov	r2, r3
 80066f6:	2300      	movs	r3, #0
 80066f8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006700:	461a      	mov	r2, r3
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	431a      	orrs	r2, r3
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	431a      	orrs	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4619      	mov	r1, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	01db      	lsls	r3, r3, #7
 8006714:	440b      	add	r3, r1
 8006716:	3384      	adds	r3, #132	; 0x84
 8006718:	4619      	mov	r1, r3
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4313      	orrs	r3, r2
 800671e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	01db      	lsls	r3, r3, #7
 800672a:	4413      	add	r3, r2
 800672c:	3384      	adds	r3, #132	; 0x84
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	4611      	mov	r1, r2
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	01d2      	lsls	r2, r2, #7
 800673a:	440a      	add	r2, r1
 800673c:	3284      	adds	r2, #132	; 0x84
 800673e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006742:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	01db      	lsls	r3, r3, #7
 800674e:	4413      	add	r3, r2
 8006750:	3384      	adds	r3, #132	; 0x84
 8006752:	461a      	mov	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	01db      	lsls	r3, r3, #7
 8006764:	4413      	add	r3, r2
 8006766:	3384      	adds	r3, #132	; 0x84
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4619      	mov	r1, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	01db      	lsls	r3, r3, #7
 8006774:	440b      	add	r3, r1
 8006776:	3384      	adds	r3, #132	; 0x84
 8006778:	4619      	mov	r1, r3
 800677a:	4b58      	ldr	r3, [pc, #352]	; (80068dc <LTDC_SetConfig+0x32c>)
 800677c:	4013      	ands	r3, r2
 800677e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	68f9      	ldr	r1, [r7, #12]
 800678a:	6809      	ldr	r1, [r1, #0]
 800678c:	4608      	mov	r0, r1
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	01c9      	lsls	r1, r1, #7
 8006792:	4401      	add	r1, r0
 8006794:	3184      	adds	r1, #132	; 0x84
 8006796:	4313      	orrs	r3, r2
 8006798:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	01db      	lsls	r3, r3, #7
 80067a4:	4413      	add	r3, r2
 80067a6:	3384      	adds	r3, #132	; 0x84
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	01db      	lsls	r3, r3, #7
 80067b4:	4413      	add	r3, r2
 80067b6:	3384      	adds	r3, #132	; 0x84
 80067b8:	461a      	mov	r2, r3
 80067ba:	2300      	movs	r3, #0
 80067bc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	01db      	lsls	r3, r3, #7
 80067c8:	4413      	add	r3, r2
 80067ca:	3384      	adds	r3, #132	; 0x84
 80067cc:	461a      	mov	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80067dc:	2304      	movs	r3, #4
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	e01b      	b.n	800681a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d102      	bne.n	80067f0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80067ea:	2303      	movs	r3, #3
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	e014      	b.n	800681a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d00b      	beq.n	8006810 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d007      	beq.n	8006810 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006804:	2b03      	cmp	r3, #3
 8006806:	d003      	beq.n	8006810 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800680c:	2b07      	cmp	r3, #7
 800680e:	d102      	bne.n	8006816 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006810:	2302      	movs	r3, #2
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	e001      	b.n	800681a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006816:	2301      	movs	r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	01db      	lsls	r3, r3, #7
 8006824:	4413      	add	r3, r2
 8006826:	3384      	adds	r3, #132	; 0x84
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	4611      	mov	r1, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	01d2      	lsls	r2, r2, #7
 8006834:	440a      	add	r2, r1
 8006836:	3284      	adds	r2, #132	; 0x84
 8006838:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800683c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	fb02 f303 	mul.w	r3, r2, r3
 8006848:	041a      	lsls	r2, r3, #16
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6859      	ldr	r1, [r3, #4]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	1acb      	subs	r3, r1, r3
 8006854:	69f9      	ldr	r1, [r7, #28]
 8006856:	fb01 f303 	mul.w	r3, r1, r3
 800685a:	3303      	adds	r3, #3
 800685c:	68f9      	ldr	r1, [r7, #12]
 800685e:	6809      	ldr	r1, [r1, #0]
 8006860:	4608      	mov	r0, r1
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	01c9      	lsls	r1, r1, #7
 8006866:	4401      	add	r1, r0
 8006868:	3184      	adds	r1, #132	; 0x84
 800686a:	4313      	orrs	r3, r2
 800686c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	01db      	lsls	r3, r3, #7
 8006878:	4413      	add	r3, r2
 800687a:	3384      	adds	r3, #132	; 0x84
 800687c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4619      	mov	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	01db      	lsls	r3, r3, #7
 8006888:	440b      	add	r3, r1
 800688a:	3384      	adds	r3, #132	; 0x84
 800688c:	4619      	mov	r1, r3
 800688e:	4b14      	ldr	r3, [pc, #80]	; (80068e0 <LTDC_SetConfig+0x330>)
 8006890:	4013      	ands	r3, r2
 8006892:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	01db      	lsls	r3, r3, #7
 800689e:	4413      	add	r3, r2
 80068a0:	3384      	adds	r3, #132	; 0x84
 80068a2:	461a      	mov	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	01db      	lsls	r3, r3, #7
 80068b4:	4413      	add	r3, r2
 80068b6:	3384      	adds	r3, #132	; 0x84
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	4611      	mov	r1, r2
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	01d2      	lsls	r2, r2, #7
 80068c4:	440a      	add	r2, r1
 80068c6:	3284      	adds	r2, #132	; 0x84
 80068c8:	f043 0301 	orr.w	r3, r3, #1
 80068cc:	6013      	str	r3, [r2, #0]
}
 80068ce:	bf00      	nop
 80068d0:	3724      	adds	r7, #36	; 0x24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	fffff8f8 	.word	0xfffff8f8
 80068e0:	fffff800 	.word	0xfffff800

080068e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80068ee:	4b23      	ldr	r3, [pc, #140]	; (800697c <HAL_PWREx_EnableOverDrive+0x98>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	4a22      	ldr	r2, [pc, #136]	; (800697c <HAL_PWREx_EnableOverDrive+0x98>)
 80068f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f8:	6413      	str	r3, [r2, #64]	; 0x40
 80068fa:	4b20      	ldr	r3, [pc, #128]	; (800697c <HAL_PWREx_EnableOverDrive+0x98>)
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006906:	4b1e      	ldr	r3, [pc, #120]	; (8006980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1d      	ldr	r2, [pc, #116]	; (8006980 <HAL_PWREx_EnableOverDrive+0x9c>)
 800690c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006910:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006912:	f7fc fbe9 	bl	80030e8 <HAL_GetTick>
 8006916:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006918:	e009      	b.n	800692e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800691a:	f7fc fbe5 	bl	80030e8 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006928:	d901      	bls.n	800692e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e022      	b.n	8006974 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800692e:	4b14      	ldr	r3, [pc, #80]	; (8006980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800693a:	d1ee      	bne.n	800691a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800693c:	4b10      	ldr	r3, [pc, #64]	; (8006980 <HAL_PWREx_EnableOverDrive+0x9c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a0f      	ldr	r2, [pc, #60]	; (8006980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006946:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006948:	f7fc fbce 	bl	80030e8 <HAL_GetTick>
 800694c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800694e:	e009      	b.n	8006964 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006950:	f7fc fbca 	bl	80030e8 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800695e:	d901      	bls.n	8006964 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e007      	b.n	8006974 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006964:	4b06      	ldr	r3, [pc, #24]	; (8006980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006970:	d1ee      	bne.n	8006950 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40023800 	.word	0x40023800
 8006980:	40007000 	.word	0x40007000

08006984 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800698c:	2300      	movs	r3, #0
 800698e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e291      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8087 	beq.w	8006ab6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069a8:	4b96      	ldr	r3, [pc, #600]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 030c 	and.w	r3, r3, #12
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d00c      	beq.n	80069ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069b4:	4b93      	ldr	r3, [pc, #588]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 030c 	and.w	r3, r3, #12
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d112      	bne.n	80069e6 <HAL_RCC_OscConfig+0x62>
 80069c0:	4b90      	ldr	r3, [pc, #576]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069cc:	d10b      	bne.n	80069e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ce:	4b8d      	ldr	r3, [pc, #564]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d06c      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x130>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d168      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e26b      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ee:	d106      	bne.n	80069fe <HAL_RCC_OscConfig+0x7a>
 80069f0:	4b84      	ldr	r3, [pc, #528]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a83      	ldr	r2, [pc, #524]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 80069f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	e02e      	b.n	8006a5c <HAL_RCC_OscConfig+0xd8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10c      	bne.n	8006a20 <HAL_RCC_OscConfig+0x9c>
 8006a06:	4b7f      	ldr	r3, [pc, #508]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a7e      	ldr	r2, [pc, #504]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	4b7c      	ldr	r3, [pc, #496]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a7b      	ldr	r2, [pc, #492]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	e01d      	b.n	8006a5c <HAL_RCC_OscConfig+0xd8>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a28:	d10c      	bne.n	8006a44 <HAL_RCC_OscConfig+0xc0>
 8006a2a:	4b76      	ldr	r3, [pc, #472]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a75      	ldr	r2, [pc, #468]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	4b73      	ldr	r3, [pc, #460]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a72      	ldr	r2, [pc, #456]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	e00b      	b.n	8006a5c <HAL_RCC_OscConfig+0xd8>
 8006a44:	4b6f      	ldr	r3, [pc, #444]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a6e      	ldr	r2, [pc, #440]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	4b6c      	ldr	r3, [pc, #432]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a6b      	ldr	r2, [pc, #428]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d013      	beq.n	8006a8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a64:	f7fc fb40 	bl	80030e8 <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a6c:	f7fc fb3c 	bl	80030e8 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b64      	cmp	r3, #100	; 0x64
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e21f      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7e:	4b61      	ldr	r3, [pc, #388]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0f0      	beq.n	8006a6c <HAL_RCC_OscConfig+0xe8>
 8006a8a:	e014      	b.n	8006ab6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8c:	f7fc fb2c 	bl	80030e8 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a94:	f7fc fb28 	bl	80030e8 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	; 0x64
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e20b      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aa6:	4b57      	ldr	r3, [pc, #348]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f0      	bne.n	8006a94 <HAL_RCC_OscConfig+0x110>
 8006ab2:	e000      	b.n	8006ab6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d069      	beq.n	8006b96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ac2:	4b50      	ldr	r3, [pc, #320]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 030c 	and.w	r3, r3, #12
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ace:	4b4d      	ldr	r3, [pc, #308]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 030c 	and.w	r3, r3, #12
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d11c      	bne.n	8006b14 <HAL_RCC_OscConfig+0x190>
 8006ada:	4b4a      	ldr	r3, [pc, #296]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d116      	bne.n	8006b14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ae6:	4b47      	ldr	r3, [pc, #284]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <HAL_RCC_OscConfig+0x17a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d001      	beq.n	8006afe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e1df      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006afe:	4b41      	ldr	r3, [pc, #260]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	493d      	ldr	r1, [pc, #244]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b12:	e040      	b.n	8006b96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d023      	beq.n	8006b64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b1c:	4b39      	ldr	r3, [pc, #228]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a38      	ldr	r2, [pc, #224]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b28:	f7fc fade 	bl	80030e8 <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b30:	f7fc fada 	bl	80030e8 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e1bd      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b42:	4b30      	ldr	r3, [pc, #192]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0f0      	beq.n	8006b30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4e:	4b2d      	ldr	r3, [pc, #180]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	4929      	ldr	r1, [pc, #164]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	600b      	str	r3, [r1, #0]
 8006b62:	e018      	b.n	8006b96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b64:	4b27      	ldr	r3, [pc, #156]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a26      	ldr	r2, [pc, #152]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
 8006b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fc faba 	bl	80030e8 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b78:	f7fc fab6 	bl	80030e8 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e199      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b8a:	4b1e      	ldr	r3, [pc, #120]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1f0      	bne.n	8006b78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d038      	beq.n	8006c14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d019      	beq.n	8006bde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006baa:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bae:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006bb0:	f043 0301 	orr.w	r3, r3, #1
 8006bb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb6:	f7fc fa97 	bl	80030e8 <HAL_GetTick>
 8006bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bbe:	f7fc fa93 	bl	80030e8 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e176      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0f0      	beq.n	8006bbe <HAL_RCC_OscConfig+0x23a>
 8006bdc:	e01a      	b.n	8006c14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be2:	4a08      	ldr	r2, [pc, #32]	; (8006c04 <HAL_RCC_OscConfig+0x280>)
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bea:	f7fc fa7d 	bl	80030e8 <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf0:	e00a      	b.n	8006c08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bf2:	f7fc fa79 	bl	80030e8 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d903      	bls.n	8006c08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e15c      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
 8006c04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c08:	4b91      	ldr	r3, [pc, #580]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1ee      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 80a4 	beq.w	8006d6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c22:	4b8b      	ldr	r3, [pc, #556]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10d      	bne.n	8006c4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c2e:	4b88      	ldr	r3, [pc, #544]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	4a87      	ldr	r2, [pc, #540]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c38:	6413      	str	r3, [r2, #64]	; 0x40
 8006c3a:	4b85      	ldr	r3, [pc, #532]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c42:	60bb      	str	r3, [r7, #8]
 8006c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c46:	2301      	movs	r3, #1
 8006c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c4a:	4b82      	ldr	r3, [pc, #520]	; (8006e54 <HAL_RCC_OscConfig+0x4d0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d118      	bne.n	8006c88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006c56:	4b7f      	ldr	r3, [pc, #508]	; (8006e54 <HAL_RCC_OscConfig+0x4d0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a7e      	ldr	r2, [pc, #504]	; (8006e54 <HAL_RCC_OscConfig+0x4d0>)
 8006c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c62:	f7fc fa41 	bl	80030e8 <HAL_GetTick>
 8006c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c6a:	f7fc fa3d 	bl	80030e8 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b64      	cmp	r3, #100	; 0x64
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e120      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c7c:	4b75      	ldr	r3, [pc, #468]	; (8006e54 <HAL_RCC_OscConfig+0x4d0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d106      	bne.n	8006c9e <HAL_RCC_OscConfig+0x31a>
 8006c90:	4b6f      	ldr	r3, [pc, #444]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c94:	4a6e      	ldr	r2, [pc, #440]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006c96:	f043 0301 	orr.w	r3, r3, #1
 8006c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c9c:	e02d      	b.n	8006cfa <HAL_RCC_OscConfig+0x376>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10c      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x33c>
 8006ca6:	4b6a      	ldr	r3, [pc, #424]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	4a69      	ldr	r2, [pc, #420]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006cac:	f023 0301 	bic.w	r3, r3, #1
 8006cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb2:	4b67      	ldr	r3, [pc, #412]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb6:	4a66      	ldr	r2, [pc, #408]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006cb8:	f023 0304 	bic.w	r3, r3, #4
 8006cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006cbe:	e01c      	b.n	8006cfa <HAL_RCC_OscConfig+0x376>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2b05      	cmp	r3, #5
 8006cc6:	d10c      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x35e>
 8006cc8:	4b61      	ldr	r3, [pc, #388]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ccc:	4a60      	ldr	r2, [pc, #384]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006cce:	f043 0304 	orr.w	r3, r3, #4
 8006cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd4:	4b5e      	ldr	r3, [pc, #376]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd8:	4a5d      	ldr	r2, [pc, #372]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce0:	e00b      	b.n	8006cfa <HAL_RCC_OscConfig+0x376>
 8006ce2:	4b5b      	ldr	r3, [pc, #364]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	4a5a      	ldr	r2, [pc, #360]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	6713      	str	r3, [r2, #112]	; 0x70
 8006cee:	4b58      	ldr	r3, [pc, #352]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf2:	4a57      	ldr	r2, [pc, #348]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006cf4:	f023 0304 	bic.w	r3, r3, #4
 8006cf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d015      	beq.n	8006d2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d02:	f7fc f9f1 	bl	80030e8 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d08:	e00a      	b.n	8006d20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d0a:	f7fc f9ed 	bl	80030e8 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e0ce      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d20:	4b4b      	ldr	r3, [pc, #300]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0ee      	beq.n	8006d0a <HAL_RCC_OscConfig+0x386>
 8006d2c:	e014      	b.n	8006d58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2e:	f7fc f9db 	bl	80030e8 <HAL_GetTick>
 8006d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d34:	e00a      	b.n	8006d4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d36:	f7fc f9d7 	bl	80030e8 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e0b8      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d4c:	4b40      	ldr	r3, [pc, #256]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1ee      	bne.n	8006d36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d105      	bne.n	8006d6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d5e:	4b3c      	ldr	r3, [pc, #240]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	4a3b      	ldr	r2, [pc, #236]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80a4 	beq.w	8006ebc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d74:	4b36      	ldr	r3, [pc, #216]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 030c 	and.w	r3, r3, #12
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d06b      	beq.n	8006e58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d149      	bne.n	8006e1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d88:	4b31      	ldr	r3, [pc, #196]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d94:	f7fc f9a8 	bl	80030e8 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d9c:	f7fc f9a4 	bl	80030e8 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e087      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dae:	4b28      	ldr	r3, [pc, #160]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1f0      	bne.n	8006d9c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69da      	ldr	r2, [r3, #28]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	019b      	lsls	r3, r3, #6
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	061b      	lsls	r3, r3, #24
 8006dde:	4313      	orrs	r3, r2
 8006de0:	4a1b      	ldr	r2, [pc, #108]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006de2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006de6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006de8:	4b19      	ldr	r3, [pc, #100]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df4:	f7fc f978 	bl	80030e8 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dfc:	f7fc f974 	bl	80030e8 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e057      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0e:	4b10      	ldr	r3, [pc, #64]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0f0      	beq.n	8006dfc <HAL_RCC_OscConfig+0x478>
 8006e1a:	e04f      	b.n	8006ebc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0b      	ldr	r2, [pc, #44]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e28:	f7fc f95e 	bl	80030e8 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e30:	f7fc f95a 	bl	80030e8 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e03d      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e42:	4b03      	ldr	r3, [pc, #12]	; (8006e50 <HAL_RCC_OscConfig+0x4cc>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f0      	bne.n	8006e30 <HAL_RCC_OscConfig+0x4ac>
 8006e4e:	e035      	b.n	8006ebc <HAL_RCC_OscConfig+0x538>
 8006e50:	40023800 	.word	0x40023800
 8006e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006e58:	4b1b      	ldr	r3, [pc, #108]	; (8006ec8 <HAL_RCC_OscConfig+0x544>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d028      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d121      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d11a      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e88:	4013      	ands	r3, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d111      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d107      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d001      	beq.n	8006ebc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40023800 	.word	0x40023800

08006ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e0d0      	b.n	8007086 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ee4:	4b6a      	ldr	r3, [pc, #424]	; (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d910      	bls.n	8006f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ef2:	4b67      	ldr	r3, [pc, #412]	; (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f023 020f 	bic.w	r2, r3, #15
 8006efa:	4965      	ldr	r1, [pc, #404]	; (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f02:	4b63      	ldr	r3, [pc, #396]	; (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0b8      	b.n	8007086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d020      	beq.n	8006f62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f2c:	4b59      	ldr	r3, [pc, #356]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	4a58      	ldr	r2, [pc, #352]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d005      	beq.n	8006f50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f44:	4b53      	ldr	r3, [pc, #332]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	4a52      	ldr	r2, [pc, #328]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f50:	4b50      	ldr	r3, [pc, #320]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	494d      	ldr	r1, [pc, #308]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d040      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d107      	bne.n	8006f86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f76:	4b47      	ldr	r3, [pc, #284]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d115      	bne.n	8006fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e07f      	b.n	8007086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d107      	bne.n	8006f9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f8e:	4b41      	ldr	r3, [pc, #260]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e073      	b.n	8007086 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f9e:	4b3d      	ldr	r3, [pc, #244]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e06b      	b.n	8007086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fae:	4b39      	ldr	r3, [pc, #228]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f023 0203 	bic.w	r2, r3, #3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4936      	ldr	r1, [pc, #216]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc0:	f7fc f892 	bl	80030e8 <HAL_GetTick>
 8006fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fc6:	e00a      	b.n	8006fde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fc8:	f7fc f88e 	bl	80030e8 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e053      	b.n	8007086 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fde:	4b2d      	ldr	r3, [pc, #180]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 020c 	and.w	r2, r3, #12
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d1eb      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ff0:	4b27      	ldr	r3, [pc, #156]	; (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d210      	bcs.n	8007020 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f023 020f 	bic.w	r2, r3, #15
 8007006:	4922      	ldr	r1, [pc, #136]	; (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	4313      	orrs	r3, r2
 800700c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800700e:	4b20      	ldr	r3, [pc, #128]	; (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d001      	beq.n	8007020 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e032      	b.n	8007086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d008      	beq.n	800703e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800702c:	4b19      	ldr	r3, [pc, #100]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	4916      	ldr	r1, [pc, #88]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 800703a:	4313      	orrs	r3, r2
 800703c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800704a:	4b12      	ldr	r3, [pc, #72]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	490e      	ldr	r1, [pc, #56]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 800705a:	4313      	orrs	r3, r2
 800705c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800705e:	f000 f821 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 8007062:	4601      	mov	r1, r0
 8007064:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	091b      	lsrs	r3, r3, #4
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	4a0a      	ldr	r2, [pc, #40]	; (8007098 <HAL_RCC_ClockConfig+0x1cc>)
 8007070:	5cd3      	ldrb	r3, [r2, r3]
 8007072:	fa21 f303 	lsr.w	r3, r1, r3
 8007076:	4a09      	ldr	r2, [pc, #36]	; (800709c <HAL_RCC_ClockConfig+0x1d0>)
 8007078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800707a:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <HAL_RCC_ClockConfig+0x1d4>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f7fb ffee 	bl	8003060 <HAL_InitTick>

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	40023c00 	.word	0x40023c00
 8007094:	40023800 	.word	0x40023800
 8007098:	0800ae44 	.word	0x0800ae44
 800709c:	20000020 	.word	0x20000020
 80070a0:	20000024 	.word	0x20000024

080070a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	607b      	str	r3, [r7, #4]
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	2300      	movs	r3, #0
 80070b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070ba:	4b50      	ldr	r3, [pc, #320]	; (80071fc <HAL_RCC_GetSysClockFreq+0x158>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 030c 	and.w	r3, r3, #12
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d007      	beq.n	80070d6 <HAL_RCC_GetSysClockFreq+0x32>
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d008      	beq.n	80070dc <HAL_RCC_GetSysClockFreq+0x38>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 808d 	bne.w	80071ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070d0:	4b4b      	ldr	r3, [pc, #300]	; (8007200 <HAL_RCC_GetSysClockFreq+0x15c>)
 80070d2:	60bb      	str	r3, [r7, #8]
      break;
 80070d4:	e08c      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070d6:	4b4b      	ldr	r3, [pc, #300]	; (8007204 <HAL_RCC_GetSysClockFreq+0x160>)
 80070d8:	60bb      	str	r3, [r7, #8]
      break;
 80070da:	e089      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070dc:	4b47      	ldr	r3, [pc, #284]	; (80071fc <HAL_RCC_GetSysClockFreq+0x158>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80070e6:	4b45      	ldr	r3, [pc, #276]	; (80071fc <HAL_RCC_GetSysClockFreq+0x158>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d023      	beq.n	800713a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070f2:	4b42      	ldr	r3, [pc, #264]	; (80071fc <HAL_RCC_GetSysClockFreq+0x158>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	099b      	lsrs	r3, r3, #6
 80070f8:	f04f 0400 	mov.w	r4, #0
 80070fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	ea03 0501 	and.w	r5, r3, r1
 8007108:	ea04 0602 	and.w	r6, r4, r2
 800710c:	4a3d      	ldr	r2, [pc, #244]	; (8007204 <HAL_RCC_GetSysClockFreq+0x160>)
 800710e:	fb02 f106 	mul.w	r1, r2, r6
 8007112:	2200      	movs	r2, #0
 8007114:	fb02 f205 	mul.w	r2, r2, r5
 8007118:	440a      	add	r2, r1
 800711a:	493a      	ldr	r1, [pc, #232]	; (8007204 <HAL_RCC_GetSysClockFreq+0x160>)
 800711c:	fba5 0101 	umull	r0, r1, r5, r1
 8007120:	1853      	adds	r3, r2, r1
 8007122:	4619      	mov	r1, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f04f 0400 	mov.w	r4, #0
 800712a:	461a      	mov	r2, r3
 800712c:	4623      	mov	r3, r4
 800712e:	f7f9 f86b 	bl	8000208 <__aeabi_uldivmod>
 8007132:	4603      	mov	r3, r0
 8007134:	460c      	mov	r4, r1
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e049      	b.n	80071ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800713a:	4b30      	ldr	r3, [pc, #192]	; (80071fc <HAL_RCC_GetSysClockFreq+0x158>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	099b      	lsrs	r3, r3, #6
 8007140:	f04f 0400 	mov.w	r4, #0
 8007144:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007148:	f04f 0200 	mov.w	r2, #0
 800714c:	ea03 0501 	and.w	r5, r3, r1
 8007150:	ea04 0602 	and.w	r6, r4, r2
 8007154:	4629      	mov	r1, r5
 8007156:	4632      	mov	r2, r6
 8007158:	f04f 0300 	mov.w	r3, #0
 800715c:	f04f 0400 	mov.w	r4, #0
 8007160:	0154      	lsls	r4, r2, #5
 8007162:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007166:	014b      	lsls	r3, r1, #5
 8007168:	4619      	mov	r1, r3
 800716a:	4622      	mov	r2, r4
 800716c:	1b49      	subs	r1, r1, r5
 800716e:	eb62 0206 	sbc.w	r2, r2, r6
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	f04f 0400 	mov.w	r4, #0
 800717a:	0194      	lsls	r4, r2, #6
 800717c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007180:	018b      	lsls	r3, r1, #6
 8007182:	1a5b      	subs	r3, r3, r1
 8007184:	eb64 0402 	sbc.w	r4, r4, r2
 8007188:	f04f 0100 	mov.w	r1, #0
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	00e2      	lsls	r2, r4, #3
 8007192:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007196:	00d9      	lsls	r1, r3, #3
 8007198:	460b      	mov	r3, r1
 800719a:	4614      	mov	r4, r2
 800719c:	195b      	adds	r3, r3, r5
 800719e:	eb44 0406 	adc.w	r4, r4, r6
 80071a2:	f04f 0100 	mov.w	r1, #0
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	02a2      	lsls	r2, r4, #10
 80071ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80071b0:	0299      	lsls	r1, r3, #10
 80071b2:	460b      	mov	r3, r1
 80071b4:	4614      	mov	r4, r2
 80071b6:	4618      	mov	r0, r3
 80071b8:	4621      	mov	r1, r4
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f04f 0400 	mov.w	r4, #0
 80071c0:	461a      	mov	r2, r3
 80071c2:	4623      	mov	r3, r4
 80071c4:	f7f9 f820 	bl	8000208 <__aeabi_uldivmod>
 80071c8:	4603      	mov	r3, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80071ce:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <HAL_RCC_GetSysClockFreq+0x158>)
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	3301      	adds	r3, #1
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e6:	60bb      	str	r3, [r7, #8]
      break;
 80071e8:	e002      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071ea:	4b05      	ldr	r3, [pc, #20]	; (8007200 <HAL_RCC_GetSysClockFreq+0x15c>)
 80071ec:	60bb      	str	r3, [r7, #8]
      break;
 80071ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071f0:	68bb      	ldr	r3, [r7, #8]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40023800 	.word	0x40023800
 8007200:	00f42400 	.word	0x00f42400
 8007204:	017d7840 	.word	0x017d7840

08007208 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800720c:	4b03      	ldr	r3, [pc, #12]	; (800721c <HAL_RCC_GetHCLKFreq+0x14>)
 800720e:	681b      	ldr	r3, [r3, #0]
}
 8007210:	4618      	mov	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000020 	.word	0x20000020

08007220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007224:	f7ff fff0 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8007228:	4601      	mov	r1, r0
 800722a:	4b05      	ldr	r3, [pc, #20]	; (8007240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	0a9b      	lsrs	r3, r3, #10
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	4a03      	ldr	r2, [pc, #12]	; (8007244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007236:	5cd3      	ldrb	r3, [r2, r3]
 8007238:	fa21 f303 	lsr.w	r3, r1, r3
}
 800723c:	4618      	mov	r0, r3
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40023800 	.word	0x40023800
 8007244:	0800ae54 	.word	0x0800ae54

08007248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800724c:	f7ff ffdc 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8007250:	4601      	mov	r1, r0
 8007252:	4b05      	ldr	r3, [pc, #20]	; (8007268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	0b5b      	lsrs	r3, r3, #13
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	4a03      	ldr	r2, [pc, #12]	; (800726c <HAL_RCC_GetPCLK2Freq+0x24>)
 800725e:	5cd3      	ldrb	r3, [r2, r3]
 8007260:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007264:	4618      	mov	r0, r3
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40023800 	.word	0x40023800
 800726c:	0800ae54 	.word	0x0800ae54

08007270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d012      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007298:	4b69      	ldr	r3, [pc, #420]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	4a68      	ldr	r2, [pc, #416]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800729e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80072a2:	6093      	str	r3, [r2, #8]
 80072a4:	4b66      	ldr	r3, [pc, #408]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ac:	4964      	ldr	r1, [pc, #400]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80072ba:	2301      	movs	r3, #1
 80072bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d017      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072ca:	4b5d      	ldr	r3, [pc, #372]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d8:	4959      	ldr	r1, [pc, #356]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072e8:	d101      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80072ea:	2301      	movs	r3, #1
 80072ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80072f6:	2301      	movs	r3, #1
 80072f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d017      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007306:	4b4e      	ldr	r3, [pc, #312]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800730c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	494a      	ldr	r1, [pc, #296]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007324:	d101      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007326:	2301      	movs	r3, #1
 8007328:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007332:	2301      	movs	r3, #1
 8007334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007342:	2301      	movs	r3, #1
 8007344:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 808b 	beq.w	800746a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007354:	4b3a      	ldr	r3, [pc, #232]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007358:	4a39      	ldr	r2, [pc, #228]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800735a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800735e:	6413      	str	r3, [r2, #64]	; 0x40
 8007360:	4b37      	ldr	r3, [pc, #220]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007368:	60bb      	str	r3, [r7, #8]
 800736a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800736c:	4b35      	ldr	r3, [pc, #212]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a34      	ldr	r2, [pc, #208]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007378:	f7fb feb6 	bl	80030e8 <HAL_GetTick>
 800737c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800737e:	e008      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007380:	f7fb feb2 	bl	80030e8 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b64      	cmp	r3, #100	; 0x64
 800738c:	d901      	bls.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e355      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007392:	4b2c      	ldr	r3, [pc, #176]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800739e:	4b28      	ldr	r3, [pc, #160]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d035      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d02e      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073bc:	4b20      	ldr	r3, [pc, #128]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073c6:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ca:	4a1d      	ldr	r2, [pc, #116]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073d2:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	4a1a      	ldr	r2, [pc, #104]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80073de:	4a18      	ldr	r2, [pc, #96]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073e4:	4b16      	ldr	r3, [pc, #88]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d114      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f0:	f7fb fe7a 	bl	80030e8 <HAL_GetTick>
 80073f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f6:	e00a      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073f8:	f7fb fe76 	bl	80030e8 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	f241 3288 	movw	r2, #5000	; 0x1388
 8007406:	4293      	cmp	r3, r2
 8007408:	d901      	bls.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e317      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0ee      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007426:	d111      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007428:	4b05      	ldr	r3, [pc, #20]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007434:	4b04      	ldr	r3, [pc, #16]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007436:	400b      	ands	r3, r1
 8007438:	4901      	ldr	r1, [pc, #4]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743a:	4313      	orrs	r3, r2
 800743c:	608b      	str	r3, [r1, #8]
 800743e:	e00b      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007440:	40023800 	.word	0x40023800
 8007444:	40007000 	.word	0x40007000
 8007448:	0ffffcff 	.word	0x0ffffcff
 800744c:	4bb0      	ldr	r3, [pc, #704]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	4aaf      	ldr	r2, [pc, #700]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007452:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007456:	6093      	str	r3, [r2, #8]
 8007458:	4bad      	ldr	r3, [pc, #692]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800745a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007464:	49aa      	ldr	r1, [pc, #680]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007466:	4313      	orrs	r3, r2
 8007468:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0310 	and.w	r3, r3, #16
 8007472:	2b00      	cmp	r3, #0
 8007474:	d010      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007476:	4ba6      	ldr	r3, [pc, #664]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800747c:	4aa4      	ldr	r2, [pc, #656]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800747e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007482:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007486:	4ba2      	ldr	r3, [pc, #648]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007488:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	499f      	ldr	r1, [pc, #636]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074a4:	4b9a      	ldr	r3, [pc, #616]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b2:	4997      	ldr	r1, [pc, #604]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074c6:	4b92      	ldr	r3, [pc, #584]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074d4:	498e      	ldr	r1, [pc, #568]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074e8:	4b89      	ldr	r3, [pc, #548]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074f6:	4986      	ldr	r1, [pc, #536]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800750a:	4b81      	ldr	r3, [pc, #516]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800750c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007510:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007518:	497d      	ldr	r1, [pc, #500]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800752c:	4b78      	ldr	r3, [pc, #480]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800752e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007532:	f023 0203 	bic.w	r2, r3, #3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753a:	4975      	ldr	r1, [pc, #468]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800754e:	4b70      	ldr	r3, [pc, #448]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007554:	f023 020c 	bic.w	r2, r3, #12
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800755c:	496c      	ldr	r1, [pc, #432]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800755e:	4313      	orrs	r3, r2
 8007560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007570:	4b67      	ldr	r3, [pc, #412]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007576:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757e:	4964      	ldr	r1, [pc, #400]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007580:	4313      	orrs	r3, r2
 8007582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007592:	4b5f      	ldr	r3, [pc, #380]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007598:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a0:	495b      	ldr	r1, [pc, #364]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80075b4:	4b56      	ldr	r3, [pc, #344]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c2:	4953      	ldr	r1, [pc, #332]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80075d6:	4b4e      	ldr	r3, [pc, #312]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e4:	494a      	ldr	r1, [pc, #296]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80075f8:	4b45      	ldr	r3, [pc, #276]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007606:	4942      	ldr	r1, [pc, #264]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007608:	4313      	orrs	r3, r2
 800760a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800761a:	4b3d      	ldr	r3, [pc, #244]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800761c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007620:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007628:	4939      	ldr	r1, [pc, #228]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800763c:	4b34      	ldr	r3, [pc, #208]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800763e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007642:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800764a:	4931      	ldr	r1, [pc, #196]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800764c:	4313      	orrs	r3, r2
 800764e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d011      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800765e:	4b2c      	ldr	r3, [pc, #176]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007664:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800766c:	4928      	ldr	r1, [pc, #160]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800766e:	4313      	orrs	r3, r2
 8007670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800767c:	d101      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800767e:	2301      	movs	r3, #1
 8007680:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800768e:	2301      	movs	r3, #1
 8007690:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800769e:	4b1c      	ldr	r3, [pc, #112]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ac:	4918      	ldr	r1, [pc, #96]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80076c0:	4b13      	ldr	r3, [pc, #76]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d0:	490f      	ldr	r1, [pc, #60]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d005      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076e6:	f040 80d8 	bne.w	800789a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a08      	ldr	r2, [pc, #32]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f6:	f7fb fcf7 	bl	80030e8 <HAL_GetTick>
 80076fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076fc:	e00a      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80076fe:	f7fb fcf3 	bl	80030e8 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b64      	cmp	r3, #100	; 0x64
 800770a:	d903      	bls.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e196      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007710:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007714:	4b6c      	ldr	r3, [pc, #432]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1ee      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d021      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11d      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007734:	4b64      	ldr	r3, [pc, #400]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773a:	0c1b      	lsrs	r3, r3, #16
 800773c:	f003 0303 	and.w	r3, r3, #3
 8007740:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007742:	4b61      	ldr	r3, [pc, #388]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007748:	0e1b      	lsrs	r3, r3, #24
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	019a      	lsls	r2, r3, #6
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	041b      	lsls	r3, r3, #16
 800775a:	431a      	orrs	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	061b      	lsls	r3, r3, #24
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	071b      	lsls	r3, r3, #28
 8007768:	4957      	ldr	r1, [pc, #348]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800776a:	4313      	orrs	r3, r2
 800776c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d004      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007784:	d00a      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800778e:	2b00      	cmp	r3, #0
 8007790:	d02e      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800779a:	d129      	bne.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800779c:	4b4a      	ldr	r3, [pc, #296]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800779e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077a2:	0c1b      	lsrs	r3, r3, #16
 80077a4:	f003 0303 	and.w	r3, r3, #3
 80077a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077aa:	4b47      	ldr	r3, [pc, #284]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b0:	0f1b      	lsrs	r3, r3, #28
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	019a      	lsls	r2, r3, #6
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	041b      	lsls	r3, r3, #16
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	061b      	lsls	r3, r3, #24
 80077ca:	431a      	orrs	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	071b      	lsls	r3, r3, #28
 80077d0:	493d      	ldr	r1, [pc, #244]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80077d8:	4b3b      	ldr	r3, [pc, #236]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077de:	f023 021f 	bic.w	r2, r3, #31
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	3b01      	subs	r3, #1
 80077e8:	4937      	ldr	r1, [pc, #220]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01d      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077fc:	4b32      	ldr	r3, [pc, #200]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007802:	0e1b      	lsrs	r3, r3, #24
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800780a:	4b2f      	ldr	r3, [pc, #188]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800780c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007810:	0f1b      	lsrs	r3, r3, #28
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	019a      	lsls	r2, r3, #6
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	431a      	orrs	r2, r3
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	061b      	lsls	r3, r3, #24
 800782a:	431a      	orrs	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	071b      	lsls	r3, r3, #28
 8007830:	4925      	ldr	r1, [pc, #148]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d011      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	019a      	lsls	r2, r3, #6
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	041b      	lsls	r3, r3, #16
 8007850:	431a      	orrs	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	061b      	lsls	r3, r3, #24
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	071b      	lsls	r3, r3, #28
 8007860:	4919      	ldr	r1, [pc, #100]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007862:	4313      	orrs	r3, r2
 8007864:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007868:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a16      	ldr	r2, [pc, #88]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800786e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007874:	f7fb fc38 	bl	80030e8 <HAL_GetTick>
 8007878:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800787a:	e008      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800787c:	f7fb fc34 	bl	80030e8 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	2b64      	cmp	r3, #100	; 0x64
 8007888:	d901      	bls.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e0d7      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800788e:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0f0      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b01      	cmp	r3, #1
 800789e:	f040 80cd 	bne.w	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80078a2:	4b09      	ldr	r3, [pc, #36]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ae:	f7fb fc1b 	bl	80030e8 <HAL_GetTick>
 80078b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078b4:	e00a      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078b6:	f7fb fc17 	bl	80030e8 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b64      	cmp	r3, #100	; 0x64
 80078c2:	d903      	bls.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e0ba      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80078c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078cc:	4b5e      	ldr	r3, [pc, #376]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078d8:	d0ed      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d02e      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d12a      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007902:	4b51      	ldr	r3, [pc, #324]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007908:	0c1b      	lsrs	r3, r3, #16
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007910:	4b4d      	ldr	r3, [pc, #308]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007916:	0f1b      	lsrs	r3, r3, #28
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	019a      	lsls	r2, r3, #6
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	041b      	lsls	r3, r3, #16
 8007928:	431a      	orrs	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	061b      	lsls	r3, r3, #24
 8007930:	431a      	orrs	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	071b      	lsls	r3, r3, #28
 8007936:	4944      	ldr	r1, [pc, #272]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007938:	4313      	orrs	r3, r2
 800793a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800793e:	4b42      	ldr	r3, [pc, #264]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007944:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	3b01      	subs	r3, #1
 800794e:	021b      	lsls	r3, r3, #8
 8007950:	493d      	ldr	r1, [pc, #244]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007952:	4313      	orrs	r3, r2
 8007954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d022      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800796c:	d11d      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800796e:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007974:	0e1b      	lsrs	r3, r3, #24
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800797c:	4b32      	ldr	r3, [pc, #200]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800797e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007982:	0f1b      	lsrs	r3, r3, #28
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	019a      	lsls	r2, r3, #6
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	431a      	orrs	r2, r3
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	061b      	lsls	r3, r3, #24
 800799c:	431a      	orrs	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	071b      	lsls	r3, r3, #28
 80079a2:	4929      	ldr	r1, [pc, #164]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0308 	and.w	r3, r3, #8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d028      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80079b6:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079bc:	0e1b      	lsrs	r3, r3, #24
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80079c4:	4b20      	ldr	r3, [pc, #128]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	019a      	lsls	r2, r3, #6
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	041b      	lsls	r3, r3, #16
 80079dc:	431a      	orrs	r2, r3
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	071b      	lsls	r3, r3, #28
 80079ea:	4917      	ldr	r1, [pc, #92]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80079f2:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	4911      	ldr	r1, [pc, #68]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a0e      	ldr	r2, [pc, #56]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a14:	f7fb fb68 	bl	80030e8 <HAL_GetTick>
 8007a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a1a:	e008      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a1c:	f7fb fb64 	bl	80030e8 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b64      	cmp	r3, #100	; 0x64
 8007a28:	d901      	bls.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e007      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a3a:	d1ef      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3720      	adds	r7, #32
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	40023800 	.word	0x40023800

08007a4c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e025      	b.n	8007aac <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7fb fa51 	bl	8002f1c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f001 f95f 	bl	8008d50 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	f001 f9c9 	bl	8008e34 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_SDRAM_Read_32b+0x20>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e028      	b.n	8007b26 <HAL_SDRAM_Read_32b+0x72>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d101      	bne.n	8007aec <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e01c      	b.n	8007b26 <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b05      	cmp	r3, #5
 8007af6:	d10e      	bne.n	8007b16 <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 8007af8:	2301      	movs	r3, #1
 8007afa:	e014      	b.n	8007b26 <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3304      	adds	r3, #4
 8007b08:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	603b      	str	r3, [r7, #0]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1ef      	bne.n	8007afc <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b087      	sub	sp, #28
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	607a      	str	r2, [r7, #4]
 8007b3e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d101      	bne.n	8007b56 <HAL_SDRAM_Write_32b+0x24>
 8007b52:	2302      	movs	r3, #2
 8007b54:	e02a      	b.n	8007bac <HAL_SDRAM_Write_32b+0x7a>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d101      	bne.n	8007b72 <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	e01c      	b.n	8007bac <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2b05      	cmp	r3, #5
 8007b76:	d002      	beq.n	8007b7e <HAL_SDRAM_Write_32b+0x4c>
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d10e      	bne.n	8007b9c <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e014      	b.n	8007bac <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	3304      	adds	r3, #4
 8007b94:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1ef      	bne.n	8007b82 <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d101      	bne.n	8007bd4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e018      	b.n	8007c06 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f001 f9a5 	bl	8008f34 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d104      	bne.n	8007bfc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2205      	movs	r2, #5
 8007bf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007bfa:	e003      	b.n	8007c04 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d101      	bne.n	8007c28 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007c24:	2302      	movs	r3, #2
 8007c26:	e00e      	b.n	8007c46 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f001 f99d 	bl	8008f76 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e01d      	b.n	8007c9c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7fa ffff 	bl	8002c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	f000 fa35 	bl	80080fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0201 	orr.w	r2, r2, #1
 8007cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	4b0c      	ldr	r3, [pc, #48]	; (8007cf4 <HAL_TIM_Base_Start_IT+0x50>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b06      	cmp	r3, #6
 8007ccc:	d00b      	beq.n	8007ce6 <HAL_TIM_Base_Start_IT+0x42>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd4:	d007      	beq.n	8007ce6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0201 	orr.w	r2, r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	00010007 	.word	0x00010007

08007cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d122      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d11b      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0202 	mvn.w	r2, #2
 8007d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f9c0 	bl	80080c0 <HAL_TIM_IC_CaptureCallback>
 8007d40:	e005      	b.n	8007d4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9b2 	bl	80080ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f9c3 	bl	80080d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0304 	and.w	r3, r3, #4
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d122      	bne.n	8007da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d11b      	bne.n	8007da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0204 	mvn.w	r2, #4
 8007d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f996 	bl	80080c0 <HAL_TIM_IC_CaptureCallback>
 8007d94:	e005      	b.n	8007da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f988 	bl	80080ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f999 	bl	80080d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d122      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d11b      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f06f 0208 	mvn.w	r2, #8
 8007dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2204      	movs	r2, #4
 8007dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f96c 	bl	80080c0 <HAL_TIM_IC_CaptureCallback>
 8007de8:	e005      	b.n	8007df6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f95e 	bl	80080ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f96f 	bl	80080d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d122      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0310 	and.w	r3, r3, #16
 8007e14:	2b10      	cmp	r3, #16
 8007e16:	d11b      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0210 	mvn.w	r2, #16
 8007e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2208      	movs	r2, #8
 8007e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f942 	bl	80080c0 <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e005      	b.n	8007e4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f934 	bl	80080ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f945 	bl	80080d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d10e      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d107      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0201 	mvn.w	r2, #1
 8007e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7f9 ff32 	bl	8001ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e86:	2b80      	cmp	r3, #128	; 0x80
 8007e88:	d10e      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e94:	2b80      	cmp	r3, #128	; 0x80
 8007e96:	d107      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fafc 	bl	80084a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb6:	d10e      	bne.n	8007ed6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b80      	cmp	r3, #128	; 0x80
 8007ec4:	d107      	bne.n	8007ed6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 faef 	bl	80084b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	d10e      	bne.n	8007f02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d107      	bne.n	8007f02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f8f3 	bl	80080e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d10e      	bne.n	8007f2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b20      	cmp	r3, #32
 8007f1c:	d107      	bne.n	8007f2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f06f 0220 	mvn.w	r2, #32
 8007f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 faaf 	bl	800848c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f2e:	bf00      	nop
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_TIM_ConfigClockSource+0x18>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e0a6      	b.n	800809e <HAL_TIM_ConfigClockSource+0x166>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4b4f      	ldr	r3, [pc, #316]	; (80080a8 <HAL_TIM_ConfigClockSource+0x170>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b40      	cmp	r3, #64	; 0x40
 8007f86:	d067      	beq.n	8008058 <HAL_TIM_ConfigClockSource+0x120>
 8007f88:	2b40      	cmp	r3, #64	; 0x40
 8007f8a:	d80b      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x6c>
 8007f8c:	2b10      	cmp	r3, #16
 8007f8e:	d073      	beq.n	8008078 <HAL_TIM_ConfigClockSource+0x140>
 8007f90:	2b10      	cmp	r3, #16
 8007f92:	d802      	bhi.n	8007f9a <HAL_TIM_ConfigClockSource+0x62>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d06f      	beq.n	8008078 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f98:	e078      	b.n	800808c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d06c      	beq.n	8008078 <HAL_TIM_ConfigClockSource+0x140>
 8007f9e:	2b30      	cmp	r3, #48	; 0x30
 8007fa0:	d06a      	beq.n	8008078 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007fa2:	e073      	b.n	800808c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007fa4:	2b70      	cmp	r3, #112	; 0x70
 8007fa6:	d00d      	beq.n	8007fc4 <HAL_TIM_ConfigClockSource+0x8c>
 8007fa8:	2b70      	cmp	r3, #112	; 0x70
 8007faa:	d804      	bhi.n	8007fb6 <HAL_TIM_ConfigClockSource+0x7e>
 8007fac:	2b50      	cmp	r3, #80	; 0x50
 8007fae:	d033      	beq.n	8008018 <HAL_TIM_ConfigClockSource+0xe0>
 8007fb0:	2b60      	cmp	r3, #96	; 0x60
 8007fb2:	d041      	beq.n	8008038 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007fb4:	e06a      	b.n	800808c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fba:	d066      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x152>
 8007fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fc0:	d017      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007fc2:	e063      	b.n	800808c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6818      	ldr	r0, [r3, #0]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	6899      	ldr	r1, [r3, #8]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f000 f9ac 	bl	8008330 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fe6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	609a      	str	r2, [r3, #8]
      break;
 8007ff0:	e04c      	b.n	800808c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	6899      	ldr	r1, [r3, #8]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f000 f995 	bl	8008330 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008014:	609a      	str	r2, [r3, #8]
      break;
 8008016:	e039      	b.n	800808c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	6859      	ldr	r1, [r3, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	461a      	mov	r2, r3
 8008026:	f000 f909 	bl	800823c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2150      	movs	r1, #80	; 0x50
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f962 	bl	80082fa <TIM_ITRx_SetConfig>
      break;
 8008036:	e029      	b.n	800808c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	6859      	ldr	r1, [r3, #4]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	461a      	mov	r2, r3
 8008046:	f000 f928 	bl	800829a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2160      	movs	r1, #96	; 0x60
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f952 	bl	80082fa <TIM_ITRx_SetConfig>
      break;
 8008056:	e019      	b.n	800808c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	6859      	ldr	r1, [r3, #4]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	461a      	mov	r2, r3
 8008066:	f000 f8e9 	bl	800823c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2140      	movs	r1, #64	; 0x40
 8008070:	4618      	mov	r0, r3
 8008072:	f000 f942 	bl	80082fa <TIM_ITRx_SetConfig>
      break;
 8008076:	e009      	b.n	800808c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4619      	mov	r1, r3
 8008082:	4610      	mov	r0, r2
 8008084:	f000 f939 	bl	80082fa <TIM_ITRx_SetConfig>
      break;
 8008088:	e000      	b.n	800808c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800808a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	fffeff88 	.word	0xfffeff88

080080ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a40      	ldr	r2, [pc, #256]	; (8008210 <TIM_Base_SetConfig+0x114>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d013      	beq.n	800813c <TIM_Base_SetConfig+0x40>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811a:	d00f      	beq.n	800813c <TIM_Base_SetConfig+0x40>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a3d      	ldr	r2, [pc, #244]	; (8008214 <TIM_Base_SetConfig+0x118>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00b      	beq.n	800813c <TIM_Base_SetConfig+0x40>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a3c      	ldr	r2, [pc, #240]	; (8008218 <TIM_Base_SetConfig+0x11c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d007      	beq.n	800813c <TIM_Base_SetConfig+0x40>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a3b      	ldr	r2, [pc, #236]	; (800821c <TIM_Base_SetConfig+0x120>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d003      	beq.n	800813c <TIM_Base_SetConfig+0x40>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a3a      	ldr	r2, [pc, #232]	; (8008220 <TIM_Base_SetConfig+0x124>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d108      	bne.n	800814e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a2f      	ldr	r2, [pc, #188]	; (8008210 <TIM_Base_SetConfig+0x114>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d02b      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815c:	d027      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a2c      	ldr	r2, [pc, #176]	; (8008214 <TIM_Base_SetConfig+0x118>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d023      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a2b      	ldr	r2, [pc, #172]	; (8008218 <TIM_Base_SetConfig+0x11c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d01f      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a2a      	ldr	r2, [pc, #168]	; (800821c <TIM_Base_SetConfig+0x120>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d01b      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a29      	ldr	r2, [pc, #164]	; (8008220 <TIM_Base_SetConfig+0x124>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d017      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a28      	ldr	r2, [pc, #160]	; (8008224 <TIM_Base_SetConfig+0x128>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d013      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a27      	ldr	r2, [pc, #156]	; (8008228 <TIM_Base_SetConfig+0x12c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d00f      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a26      	ldr	r2, [pc, #152]	; (800822c <TIM_Base_SetConfig+0x130>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00b      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a25      	ldr	r2, [pc, #148]	; (8008230 <TIM_Base_SetConfig+0x134>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d007      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a24      	ldr	r2, [pc, #144]	; (8008234 <TIM_Base_SetConfig+0x138>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d003      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a23      	ldr	r2, [pc, #140]	; (8008238 <TIM_Base_SetConfig+0x13c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d108      	bne.n	80081c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a0a      	ldr	r2, [pc, #40]	; (8008210 <TIM_Base_SetConfig+0x114>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d003      	beq.n	80081f4 <TIM_Base_SetConfig+0xf8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <TIM_Base_SetConfig+0x124>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d103      	bne.n	80081fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	615a      	str	r2, [r3, #20]
}
 8008202:	bf00      	nop
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40010000 	.word	0x40010000
 8008214:	40000400 	.word	0x40000400
 8008218:	40000800 	.word	0x40000800
 800821c:	40000c00 	.word	0x40000c00
 8008220:	40010400 	.word	0x40010400
 8008224:	40014000 	.word	0x40014000
 8008228:	40014400 	.word	0x40014400
 800822c:	40014800 	.word	0x40014800
 8008230:	40001800 	.word	0x40001800
 8008234:	40001c00 	.word	0x40001c00
 8008238:	40002000 	.word	0x40002000

0800823c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	f023 0201 	bic.w	r2, r3, #1
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f023 030a 	bic.w	r3, r3, #10
 8008278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	621a      	str	r2, [r3, #32]
}
 800828e:	bf00      	nop
 8008290:	371c      	adds	r7, #28
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800829a:	b480      	push	{r7}
 800829c:	b087      	sub	sp, #28
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0210 	bic.w	r2, r3, #16
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	031b      	lsls	r3, r3, #12
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	4313      	orrs	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	621a      	str	r2, [r3, #32]
}
 80082ee:	bf00      	nop
 80082f0:	371c      	adds	r7, #28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b085      	sub	sp, #20
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4313      	orrs	r3, r2
 8008318:	f043 0307 	orr.w	r3, r3, #7
 800831c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	609a      	str	r2, [r3, #8]
}
 8008324:	bf00      	nop
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800834a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	021a      	lsls	r2, r3, #8
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	431a      	orrs	r2, r3
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	4313      	orrs	r3, r2
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	4313      	orrs	r3, r2
 800835c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	609a      	str	r2, [r3, #8]
}
 8008364:	bf00      	nop
 8008366:	371c      	adds	r7, #28
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008384:	2302      	movs	r3, #2
 8008386:	e06d      	b.n	8008464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a30      	ldr	r2, [pc, #192]	; (8008470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d004      	beq.n	80083bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a2f      	ldr	r2, [pc, #188]	; (8008474 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d108      	bne.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a20      	ldr	r2, [pc, #128]	; (8008470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d022      	beq.n	8008438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083fa:	d01d      	beq.n	8008438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1d      	ldr	r2, [pc, #116]	; (8008478 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d018      	beq.n	8008438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1c      	ldr	r2, [pc, #112]	; (800847c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d013      	beq.n	8008438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a1a      	ldr	r2, [pc, #104]	; (8008480 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00e      	beq.n	8008438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a15      	ldr	r2, [pc, #84]	; (8008474 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d009      	beq.n	8008438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a16      	ldr	r2, [pc, #88]	; (8008484 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d004      	beq.n	8008438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a15      	ldr	r2, [pc, #84]	; (8008488 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d10c      	bne.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800843e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	4313      	orrs	r3, r2
 8008448:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	40010000 	.word	0x40010000
 8008474:	40010400 	.word	0x40010400
 8008478:	40000400 	.word	0x40000400
 800847c:	40000800 	.word	0x40000800
 8008480:	40000c00 	.word	0x40000c00
 8008484:	40014000 	.word	0x40014000
 8008488:	40001800 	.word	0x40001800

0800848c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e040      	b.n	800855c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d106      	bne.n	80084f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7fa fc24 	bl	8002d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2224      	movs	r2, #36	; 0x24
 80084f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0201 	bic.w	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f82c 	bl	8008564 <UART_SetConfig>
 800850c:	4603      	mov	r3, r0
 800850e:	2b01      	cmp	r3, #1
 8008510:	d101      	bne.n	8008516 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e022      	b.n	800855c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 faca 	bl	8008ab8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689a      	ldr	r2, [r3, #8]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0201 	orr.w	r2, r2, #1
 8008552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fb51 	bl	8008bfc <UART_CheckIdleState>
 800855a:	4603      	mov	r3, r0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800856c:	2300      	movs	r3, #0
 800856e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	431a      	orrs	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	4313      	orrs	r3, r2
 800858a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	4bb1      	ldr	r3, [pc, #708]	; (8008858 <UART_SetConfig+0x2f4>)
 8008594:	4013      	ands	r3, r2
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6812      	ldr	r2, [r2, #0]
 800859a:	6939      	ldr	r1, [r7, #16]
 800859c:	430b      	orrs	r3, r1
 800859e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a9f      	ldr	r2, [pc, #636]	; (800885c <UART_SetConfig+0x2f8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d121      	bne.n	8008628 <UART_SetConfig+0xc4>
 80085e4:	4b9e      	ldr	r3, [pc, #632]	; (8008860 <UART_SetConfig+0x2fc>)
 80085e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d816      	bhi.n	8008620 <UART_SetConfig+0xbc>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <UART_SetConfig+0x94>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008609 	.word	0x08008609
 80085fc:	08008615 	.word	0x08008615
 8008600:	0800860f 	.word	0x0800860f
 8008604:	0800861b 	.word	0x0800861b
 8008608:	2301      	movs	r3, #1
 800860a:	77fb      	strb	r3, [r7, #31]
 800860c:	e151      	b.n	80088b2 <UART_SetConfig+0x34e>
 800860e:	2302      	movs	r3, #2
 8008610:	77fb      	strb	r3, [r7, #31]
 8008612:	e14e      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008614:	2304      	movs	r3, #4
 8008616:	77fb      	strb	r3, [r7, #31]
 8008618:	e14b      	b.n	80088b2 <UART_SetConfig+0x34e>
 800861a:	2308      	movs	r3, #8
 800861c:	77fb      	strb	r3, [r7, #31]
 800861e:	e148      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008620:	2310      	movs	r3, #16
 8008622:	77fb      	strb	r3, [r7, #31]
 8008624:	bf00      	nop
 8008626:	e144      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a8d      	ldr	r2, [pc, #564]	; (8008864 <UART_SetConfig+0x300>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d134      	bne.n	800869c <UART_SetConfig+0x138>
 8008632:	4b8b      	ldr	r3, [pc, #556]	; (8008860 <UART_SetConfig+0x2fc>)
 8008634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008638:	f003 030c 	and.w	r3, r3, #12
 800863c:	2b0c      	cmp	r3, #12
 800863e:	d829      	bhi.n	8008694 <UART_SetConfig+0x130>
 8008640:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <UART_SetConfig+0xe4>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	0800867d 	.word	0x0800867d
 800864c:	08008695 	.word	0x08008695
 8008650:	08008695 	.word	0x08008695
 8008654:	08008695 	.word	0x08008695
 8008658:	08008689 	.word	0x08008689
 800865c:	08008695 	.word	0x08008695
 8008660:	08008695 	.word	0x08008695
 8008664:	08008695 	.word	0x08008695
 8008668:	08008683 	.word	0x08008683
 800866c:	08008695 	.word	0x08008695
 8008670:	08008695 	.word	0x08008695
 8008674:	08008695 	.word	0x08008695
 8008678:	0800868f 	.word	0x0800868f
 800867c:	2300      	movs	r3, #0
 800867e:	77fb      	strb	r3, [r7, #31]
 8008680:	e117      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008682:	2302      	movs	r3, #2
 8008684:	77fb      	strb	r3, [r7, #31]
 8008686:	e114      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008688:	2304      	movs	r3, #4
 800868a:	77fb      	strb	r3, [r7, #31]
 800868c:	e111      	b.n	80088b2 <UART_SetConfig+0x34e>
 800868e:	2308      	movs	r3, #8
 8008690:	77fb      	strb	r3, [r7, #31]
 8008692:	e10e      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008694:	2310      	movs	r3, #16
 8008696:	77fb      	strb	r3, [r7, #31]
 8008698:	bf00      	nop
 800869a:	e10a      	b.n	80088b2 <UART_SetConfig+0x34e>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a71      	ldr	r2, [pc, #452]	; (8008868 <UART_SetConfig+0x304>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d120      	bne.n	80086e8 <UART_SetConfig+0x184>
 80086a6:	4b6e      	ldr	r3, [pc, #440]	; (8008860 <UART_SetConfig+0x2fc>)
 80086a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086b0:	2b10      	cmp	r3, #16
 80086b2:	d00f      	beq.n	80086d4 <UART_SetConfig+0x170>
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d802      	bhi.n	80086be <UART_SetConfig+0x15a>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d005      	beq.n	80086c8 <UART_SetConfig+0x164>
 80086bc:	e010      	b.n	80086e0 <UART_SetConfig+0x17c>
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d005      	beq.n	80086ce <UART_SetConfig+0x16a>
 80086c2:	2b30      	cmp	r3, #48	; 0x30
 80086c4:	d009      	beq.n	80086da <UART_SetConfig+0x176>
 80086c6:	e00b      	b.n	80086e0 <UART_SetConfig+0x17c>
 80086c8:	2300      	movs	r3, #0
 80086ca:	77fb      	strb	r3, [r7, #31]
 80086cc:	e0f1      	b.n	80088b2 <UART_SetConfig+0x34e>
 80086ce:	2302      	movs	r3, #2
 80086d0:	77fb      	strb	r3, [r7, #31]
 80086d2:	e0ee      	b.n	80088b2 <UART_SetConfig+0x34e>
 80086d4:	2304      	movs	r3, #4
 80086d6:	77fb      	strb	r3, [r7, #31]
 80086d8:	e0eb      	b.n	80088b2 <UART_SetConfig+0x34e>
 80086da:	2308      	movs	r3, #8
 80086dc:	77fb      	strb	r3, [r7, #31]
 80086de:	e0e8      	b.n	80088b2 <UART_SetConfig+0x34e>
 80086e0:	2310      	movs	r3, #16
 80086e2:	77fb      	strb	r3, [r7, #31]
 80086e4:	bf00      	nop
 80086e6:	e0e4      	b.n	80088b2 <UART_SetConfig+0x34e>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a5f      	ldr	r2, [pc, #380]	; (800886c <UART_SetConfig+0x308>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d120      	bne.n	8008734 <UART_SetConfig+0x1d0>
 80086f2:	4b5b      	ldr	r3, [pc, #364]	; (8008860 <UART_SetConfig+0x2fc>)
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086fc:	2b40      	cmp	r3, #64	; 0x40
 80086fe:	d00f      	beq.n	8008720 <UART_SetConfig+0x1bc>
 8008700:	2b40      	cmp	r3, #64	; 0x40
 8008702:	d802      	bhi.n	800870a <UART_SetConfig+0x1a6>
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <UART_SetConfig+0x1b0>
 8008708:	e010      	b.n	800872c <UART_SetConfig+0x1c8>
 800870a:	2b80      	cmp	r3, #128	; 0x80
 800870c:	d005      	beq.n	800871a <UART_SetConfig+0x1b6>
 800870e:	2bc0      	cmp	r3, #192	; 0xc0
 8008710:	d009      	beq.n	8008726 <UART_SetConfig+0x1c2>
 8008712:	e00b      	b.n	800872c <UART_SetConfig+0x1c8>
 8008714:	2300      	movs	r3, #0
 8008716:	77fb      	strb	r3, [r7, #31]
 8008718:	e0cb      	b.n	80088b2 <UART_SetConfig+0x34e>
 800871a:	2302      	movs	r3, #2
 800871c:	77fb      	strb	r3, [r7, #31]
 800871e:	e0c8      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008720:	2304      	movs	r3, #4
 8008722:	77fb      	strb	r3, [r7, #31]
 8008724:	e0c5      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008726:	2308      	movs	r3, #8
 8008728:	77fb      	strb	r3, [r7, #31]
 800872a:	e0c2      	b.n	80088b2 <UART_SetConfig+0x34e>
 800872c:	2310      	movs	r3, #16
 800872e:	77fb      	strb	r3, [r7, #31]
 8008730:	bf00      	nop
 8008732:	e0be      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a4d      	ldr	r2, [pc, #308]	; (8008870 <UART_SetConfig+0x30c>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d124      	bne.n	8008788 <UART_SetConfig+0x224>
 800873e:	4b48      	ldr	r3, [pc, #288]	; (8008860 <UART_SetConfig+0x2fc>)
 8008740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800874c:	d012      	beq.n	8008774 <UART_SetConfig+0x210>
 800874e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008752:	d802      	bhi.n	800875a <UART_SetConfig+0x1f6>
 8008754:	2b00      	cmp	r3, #0
 8008756:	d007      	beq.n	8008768 <UART_SetConfig+0x204>
 8008758:	e012      	b.n	8008780 <UART_SetConfig+0x21c>
 800875a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800875e:	d006      	beq.n	800876e <UART_SetConfig+0x20a>
 8008760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008764:	d009      	beq.n	800877a <UART_SetConfig+0x216>
 8008766:	e00b      	b.n	8008780 <UART_SetConfig+0x21c>
 8008768:	2300      	movs	r3, #0
 800876a:	77fb      	strb	r3, [r7, #31]
 800876c:	e0a1      	b.n	80088b2 <UART_SetConfig+0x34e>
 800876e:	2302      	movs	r3, #2
 8008770:	77fb      	strb	r3, [r7, #31]
 8008772:	e09e      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008774:	2304      	movs	r3, #4
 8008776:	77fb      	strb	r3, [r7, #31]
 8008778:	e09b      	b.n	80088b2 <UART_SetConfig+0x34e>
 800877a:	2308      	movs	r3, #8
 800877c:	77fb      	strb	r3, [r7, #31]
 800877e:	e098      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008780:	2310      	movs	r3, #16
 8008782:	77fb      	strb	r3, [r7, #31]
 8008784:	bf00      	nop
 8008786:	e094      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a39      	ldr	r2, [pc, #228]	; (8008874 <UART_SetConfig+0x310>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d124      	bne.n	80087dc <UART_SetConfig+0x278>
 8008792:	4b33      	ldr	r3, [pc, #204]	; (8008860 <UART_SetConfig+0x2fc>)
 8008794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008798:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800879c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a0:	d012      	beq.n	80087c8 <UART_SetConfig+0x264>
 80087a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a6:	d802      	bhi.n	80087ae <UART_SetConfig+0x24a>
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d007      	beq.n	80087bc <UART_SetConfig+0x258>
 80087ac:	e012      	b.n	80087d4 <UART_SetConfig+0x270>
 80087ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b2:	d006      	beq.n	80087c2 <UART_SetConfig+0x25e>
 80087b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087b8:	d009      	beq.n	80087ce <UART_SetConfig+0x26a>
 80087ba:	e00b      	b.n	80087d4 <UART_SetConfig+0x270>
 80087bc:	2301      	movs	r3, #1
 80087be:	77fb      	strb	r3, [r7, #31]
 80087c0:	e077      	b.n	80088b2 <UART_SetConfig+0x34e>
 80087c2:	2302      	movs	r3, #2
 80087c4:	77fb      	strb	r3, [r7, #31]
 80087c6:	e074      	b.n	80088b2 <UART_SetConfig+0x34e>
 80087c8:	2304      	movs	r3, #4
 80087ca:	77fb      	strb	r3, [r7, #31]
 80087cc:	e071      	b.n	80088b2 <UART_SetConfig+0x34e>
 80087ce:	2308      	movs	r3, #8
 80087d0:	77fb      	strb	r3, [r7, #31]
 80087d2:	e06e      	b.n	80088b2 <UART_SetConfig+0x34e>
 80087d4:	2310      	movs	r3, #16
 80087d6:	77fb      	strb	r3, [r7, #31]
 80087d8:	bf00      	nop
 80087da:	e06a      	b.n	80088b2 <UART_SetConfig+0x34e>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a25      	ldr	r2, [pc, #148]	; (8008878 <UART_SetConfig+0x314>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d124      	bne.n	8008830 <UART_SetConfig+0x2cc>
 80087e6:	4b1e      	ldr	r3, [pc, #120]	; (8008860 <UART_SetConfig+0x2fc>)
 80087e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80087f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f4:	d012      	beq.n	800881c <UART_SetConfig+0x2b8>
 80087f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fa:	d802      	bhi.n	8008802 <UART_SetConfig+0x29e>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <UART_SetConfig+0x2ac>
 8008800:	e012      	b.n	8008828 <UART_SetConfig+0x2c4>
 8008802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008806:	d006      	beq.n	8008816 <UART_SetConfig+0x2b2>
 8008808:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800880c:	d009      	beq.n	8008822 <UART_SetConfig+0x2be>
 800880e:	e00b      	b.n	8008828 <UART_SetConfig+0x2c4>
 8008810:	2300      	movs	r3, #0
 8008812:	77fb      	strb	r3, [r7, #31]
 8008814:	e04d      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008816:	2302      	movs	r3, #2
 8008818:	77fb      	strb	r3, [r7, #31]
 800881a:	e04a      	b.n	80088b2 <UART_SetConfig+0x34e>
 800881c:	2304      	movs	r3, #4
 800881e:	77fb      	strb	r3, [r7, #31]
 8008820:	e047      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008822:	2308      	movs	r3, #8
 8008824:	77fb      	strb	r3, [r7, #31]
 8008826:	e044      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008828:	2310      	movs	r3, #16
 800882a:	77fb      	strb	r3, [r7, #31]
 800882c:	bf00      	nop
 800882e:	e040      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a11      	ldr	r2, [pc, #68]	; (800887c <UART_SetConfig+0x318>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d139      	bne.n	80088ae <UART_SetConfig+0x34a>
 800883a:	4b09      	ldr	r3, [pc, #36]	; (8008860 <UART_SetConfig+0x2fc>)
 800883c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008840:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008848:	d027      	beq.n	800889a <UART_SetConfig+0x336>
 800884a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800884e:	d817      	bhi.n	8008880 <UART_SetConfig+0x31c>
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01c      	beq.n	800888e <UART_SetConfig+0x32a>
 8008854:	e027      	b.n	80088a6 <UART_SetConfig+0x342>
 8008856:	bf00      	nop
 8008858:	efff69f3 	.word	0xefff69f3
 800885c:	40011000 	.word	0x40011000
 8008860:	40023800 	.word	0x40023800
 8008864:	40004400 	.word	0x40004400
 8008868:	40004800 	.word	0x40004800
 800886c:	40004c00 	.word	0x40004c00
 8008870:	40005000 	.word	0x40005000
 8008874:	40011400 	.word	0x40011400
 8008878:	40007800 	.word	0x40007800
 800887c:	40007c00 	.word	0x40007c00
 8008880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008884:	d006      	beq.n	8008894 <UART_SetConfig+0x330>
 8008886:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800888a:	d009      	beq.n	80088a0 <UART_SetConfig+0x33c>
 800888c:	e00b      	b.n	80088a6 <UART_SetConfig+0x342>
 800888e:	2300      	movs	r3, #0
 8008890:	77fb      	strb	r3, [r7, #31]
 8008892:	e00e      	b.n	80088b2 <UART_SetConfig+0x34e>
 8008894:	2302      	movs	r3, #2
 8008896:	77fb      	strb	r3, [r7, #31]
 8008898:	e00b      	b.n	80088b2 <UART_SetConfig+0x34e>
 800889a:	2304      	movs	r3, #4
 800889c:	77fb      	strb	r3, [r7, #31]
 800889e:	e008      	b.n	80088b2 <UART_SetConfig+0x34e>
 80088a0:	2308      	movs	r3, #8
 80088a2:	77fb      	strb	r3, [r7, #31]
 80088a4:	e005      	b.n	80088b2 <UART_SetConfig+0x34e>
 80088a6:	2310      	movs	r3, #16
 80088a8:	77fb      	strb	r3, [r7, #31]
 80088aa:	bf00      	nop
 80088ac:	e001      	b.n	80088b2 <UART_SetConfig+0x34e>
 80088ae:	2310      	movs	r3, #16
 80088b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ba:	d17f      	bne.n	80089bc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80088bc:	7ffb      	ldrb	r3, [r7, #31]
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d85c      	bhi.n	800897c <UART_SetConfig+0x418>
 80088c2:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <UART_SetConfig+0x364>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	080088ed 	.word	0x080088ed
 80088cc:	0800890d 	.word	0x0800890d
 80088d0:	0800892d 	.word	0x0800892d
 80088d4:	0800897d 	.word	0x0800897d
 80088d8:	08008945 	.word	0x08008945
 80088dc:	0800897d 	.word	0x0800897d
 80088e0:	0800897d 	.word	0x0800897d
 80088e4:	0800897d 	.word	0x0800897d
 80088e8:	08008965 	.word	0x08008965
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ec:	f7fe fc98 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 80088f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	005a      	lsls	r2, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	085b      	lsrs	r3, r3, #1
 80088fc:	441a      	add	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	fbb2 f3f3 	udiv	r3, r2, r3
 8008906:	b29b      	uxth	r3, r3
 8008908:	61bb      	str	r3, [r7, #24]
        break;
 800890a:	e03a      	b.n	8008982 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800890c:	f7fe fc9c 	bl	8007248 <HAL_RCC_GetPCLK2Freq>
 8008910:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	005a      	lsls	r2, r3, #1
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	085b      	lsrs	r3, r3, #1
 800891c:	441a      	add	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	fbb2 f3f3 	udiv	r3, r2, r3
 8008926:	b29b      	uxth	r3, r3
 8008928:	61bb      	str	r3, [r7, #24]
        break;
 800892a:	e02a      	b.n	8008982 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	085a      	lsrs	r2, r3, #1
 8008932:	4b5f      	ldr	r3, [pc, #380]	; (8008ab0 <UART_SetConfig+0x54c>)
 8008934:	4413      	add	r3, r2
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6852      	ldr	r2, [r2, #4]
 800893a:	fbb3 f3f2 	udiv	r3, r3, r2
 800893e:	b29b      	uxth	r3, r3
 8008940:	61bb      	str	r3, [r7, #24]
        break;
 8008942:	e01e      	b.n	8008982 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008944:	f7fe fbae 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 8008948:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	005a      	lsls	r2, r3, #1
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	085b      	lsrs	r3, r3, #1
 8008954:	441a      	add	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	fbb2 f3f3 	udiv	r3, r2, r3
 800895e:	b29b      	uxth	r3, r3
 8008960:	61bb      	str	r3, [r7, #24]
        break;
 8008962:	e00e      	b.n	8008982 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	085b      	lsrs	r3, r3, #1
 800896a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	fbb2 f3f3 	udiv	r3, r2, r3
 8008976:	b29b      	uxth	r3, r3
 8008978:	61bb      	str	r3, [r7, #24]
        break;
 800897a:	e002      	b.n	8008982 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	75fb      	strb	r3, [r7, #23]
        break;
 8008980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b0f      	cmp	r3, #15
 8008986:	d916      	bls.n	80089b6 <UART_SetConfig+0x452>
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898e:	d212      	bcs.n	80089b6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	b29b      	uxth	r3, r3
 8008994:	f023 030f 	bic.w	r3, r3, #15
 8008998:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	085b      	lsrs	r3, r3, #1
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	897b      	ldrh	r3, [r7, #10]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	897a      	ldrh	r2, [r7, #10]
 80089b2:	60da      	str	r2, [r3, #12]
 80089b4:	e070      	b.n	8008a98 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	75fb      	strb	r3, [r7, #23]
 80089ba:	e06d      	b.n	8008a98 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80089bc:	7ffb      	ldrb	r3, [r7, #31]
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d859      	bhi.n	8008a76 <UART_SetConfig+0x512>
 80089c2:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <UART_SetConfig+0x464>)
 80089c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	08008a0b 	.word	0x08008a0b
 80089d0:	08008a29 	.word	0x08008a29
 80089d4:	08008a77 	.word	0x08008a77
 80089d8:	08008a41 	.word	0x08008a41
 80089dc:	08008a77 	.word	0x08008a77
 80089e0:	08008a77 	.word	0x08008a77
 80089e4:	08008a77 	.word	0x08008a77
 80089e8:	08008a5f 	.word	0x08008a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ec:	f7fe fc18 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 80089f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	085a      	lsrs	r2, r3, #1
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	441a      	add	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	61bb      	str	r3, [r7, #24]
        break;
 8008a08:	e038      	b.n	8008a7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a0a:	f7fe fc1d 	bl	8007248 <HAL_RCC_GetPCLK2Freq>
 8008a0e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	085a      	lsrs	r2, r3, #1
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	441a      	add	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	61bb      	str	r3, [r7, #24]
        break;
 8008a26:	e029      	b.n	8008a7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	085a      	lsrs	r2, r3, #1
 8008a2e:	4b21      	ldr	r3, [pc, #132]	; (8008ab4 <UART_SetConfig+0x550>)
 8008a30:	4413      	add	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6852      	ldr	r2, [r2, #4]
 8008a36:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	61bb      	str	r3, [r7, #24]
        break;
 8008a3e:	e01d      	b.n	8008a7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a40:	f7fe fb30 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 8008a44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	085a      	lsrs	r2, r3, #1
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	441a      	add	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	61bb      	str	r3, [r7, #24]
        break;
 8008a5c:	e00e      	b.n	8008a7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	085b      	lsrs	r3, r3, #1
 8008a64:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	61bb      	str	r3, [r7, #24]
        break;
 8008a74:	e002      	b.n	8008a7c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	75fb      	strb	r3, [r7, #23]
        break;
 8008a7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	2b0f      	cmp	r3, #15
 8008a80:	d908      	bls.n	8008a94 <UART_SetConfig+0x530>
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a88:	d204      	bcs.n	8008a94 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	60da      	str	r2, [r3, #12]
 8008a92:	e001      	b.n	8008a98 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3720      	adds	r7, #32
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	01e84800 	.word	0x01e84800
 8008ab4:	00f42400 	.word	0x00f42400

08008ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00a      	beq.n	8008ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00a      	beq.n	8008b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	f003 0308 	and.w	r3, r3, #8
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	f003 0310 	and.w	r3, r3, #16
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d01a      	beq.n	8008bce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb6:	d10a      	bne.n	8008bce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	605a      	str	r2, [r3, #4]
  }
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af02      	add	r7, sp, #8
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008c0a:	f7fa fa6d 	bl	80030e8 <HAL_GetTick>
 8008c0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	d10e      	bne.n	8008c3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f814 	bl	8008c5a <UART_WaitOnFlagUntilTimeout>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e00a      	b.n	8008c52 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2220      	movs	r2, #32
 8008c46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	603b      	str	r3, [r7, #0]
 8008c66:	4613      	mov	r3, r2
 8008c68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6a:	e05d      	b.n	8008d28 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c72:	d059      	beq.n	8008d28 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c74:	f7fa fa38 	bl	80030e8 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d302      	bcc.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x30>
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d11b      	bne.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 0201 	bic.w	r2, r2, #1
 8008ca8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2220      	movs	r2, #32
 8008cae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e042      	b.n	8008d48 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d02b      	beq.n	8008d28 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cde:	d123      	bne.n	8008d28 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ce8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008cf8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 0201 	bic.w	r2, r2, #1
 8008d08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2220      	movs	r2, #32
 8008d14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e00f      	b.n	8008d48 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	69da      	ldr	r2, [r3, #28]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	4013      	ands	r3, r2
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	bf0c      	ite	eq
 8008d38:	2301      	moveq	r3, #1
 8008d3a:	2300      	movne	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	461a      	mov	r2, r3
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d092      	beq.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d027      	beq.n	8008dba <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	4b2f      	ldr	r3, [pc, #188]	; (8008e30 <FMC_SDRAM_Init+0xe0>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d80:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008d86:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008d8c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008d92:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008d98:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008d9e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008da4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008daa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	e032      	b.n	8008e20 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dc6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008dd0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008dd6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <FMC_SDRAM_Init+0xe0>)
 8008de8:	4013      	ands	r3, r2
 8008dea:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008df4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008dfa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008e00:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008e06:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008e0c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	ffff8000 	.word	0xffff8000

08008e34 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d02e      	beq.n	8008eac <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008e5a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008e6a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008e74:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008e7e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008e88:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008e92:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	609a      	str	r2, [r3, #8]
 8008eaa:	e039      	b.n	8008f20 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4b1e      	ldr	r3, [pc, #120]	; (8008f30 <FMC_SDRAM_Timing_Init+0xfc>)
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008ede:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008eee:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008ef8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008f02:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	371c      	adds	r7, #28
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	ff0f0fff 	.word	0xff0f0fff

08008f34 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008f4c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008f56:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	371c      	adds	r7, #28
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	695a      	ldr	r2, [r3, #20]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	005b      	lsls	r3, r3, #1
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <__libc_init_array>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	4e0d      	ldr	r6, [pc, #52]	; (8008fd4 <__libc_init_array+0x38>)
 8008fa0:	4c0d      	ldr	r4, [pc, #52]	; (8008fd8 <__libc_init_array+0x3c>)
 8008fa2:	1ba4      	subs	r4, r4, r6
 8008fa4:	10a4      	asrs	r4, r4, #2
 8008fa6:	2500      	movs	r5, #0
 8008fa8:	42a5      	cmp	r5, r4
 8008faa:	d109      	bne.n	8008fc0 <__libc_init_array+0x24>
 8008fac:	4e0b      	ldr	r6, [pc, #44]	; (8008fdc <__libc_init_array+0x40>)
 8008fae:	4c0c      	ldr	r4, [pc, #48]	; (8008fe0 <__libc_init_array+0x44>)
 8008fb0:	f000 f820 	bl	8008ff4 <_init>
 8008fb4:	1ba4      	subs	r4, r4, r6
 8008fb6:	10a4      	asrs	r4, r4, #2
 8008fb8:	2500      	movs	r5, #0
 8008fba:	42a5      	cmp	r5, r4
 8008fbc:	d105      	bne.n	8008fca <__libc_init_array+0x2e>
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}
 8008fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fc4:	4798      	blx	r3
 8008fc6:	3501      	adds	r5, #1
 8008fc8:	e7ee      	b.n	8008fa8 <__libc_init_array+0xc>
 8008fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fce:	4798      	blx	r3
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	e7f2      	b.n	8008fba <__libc_init_array+0x1e>
 8008fd4:	0800ae6c 	.word	0x0800ae6c
 8008fd8:	0800ae6c 	.word	0x0800ae6c
 8008fdc:	0800ae6c 	.word	0x0800ae6c
 8008fe0:	0800ae70 	.word	0x0800ae70

08008fe4 <memset>:
 8008fe4:	4402      	add	r2, r0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d100      	bne.n	8008fee <memset+0xa>
 8008fec:	4770      	bx	lr
 8008fee:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff2:	e7f9      	b.n	8008fe8 <memset+0x4>

08008ff4 <_init>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr

08009000 <_fini>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	bf00      	nop
 8009004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009006:	bc08      	pop	{r3}
 8009008:	469e      	mov	lr, r3
 800900a:	4770      	bx	lr
