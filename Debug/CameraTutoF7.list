
CameraTutoF7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e58  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e18  08009e18  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08009e18  08009e18  00019e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e20  08009e20  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e20  08009e20  00019e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08009e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025ca4  20000024  08009e4c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20025cc8  08009e4c  00025cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f5e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c3f  00000000  00000000  00033fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a0  00000000  00000000  00036bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00027670  00000000  00000000  00037d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001025b  00000000  00000000  0005f408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000eed9d  00000000  00000000  0006f663  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0015e400  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001010  00000000  00000000  0015e480  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00004874  00000000  00000000  0015f490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000024 	.word	0x20000024
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007fa8 	.word	0x08007fa8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000028 	.word	0x20000028
 8000204:	08007fa8 	.word	0x08007fa8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Draw_Blue_Cross>:
 *      Author: Baptiste Rossigneux & Axel Farrugia
 */

#include <stdint.h>

void Draw_Blue_Cross(int x, int y, int thickness, uint16_t* photo_buffer){
 8000508:	b480      	push	{r7}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	603b      	str	r3, [r7, #0]
	//Horizontal blue line
	if(y < thickness) y = thickness;
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	429a      	cmp	r2, r3
 800051c:	da01      	bge.n	8000522 <Draw_Blue_Cross+0x1a>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<320;i++){
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
 8000526:	e01c      	b.n	8000562 <Draw_Blue_Cross+0x5a>
		for(int j=-thickness; j<thickness; j++){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	425b      	negs	r3, r3
 800052c:	61bb      	str	r3, [r7, #24]
 800052e:	e011      	b.n	8000554 <Draw_Blue_Cross+0x4c>
			photo_buffer[((y+j)*320)+i] = 0x001F;
 8000530:	68ba      	ldr	r2, [r7, #8]
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	441a      	add	r2, r3
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	019b      	lsls	r3, r3, #6
 800053e:	461a      	mov	r2, r3
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	4413      	add	r3, r2
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	4413      	add	r3, r2
 800054a:	221f      	movs	r2, #31
 800054c:	801a      	strh	r2, [r3, #0]
		for(int j=-thickness; j<thickness; j++){
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	3301      	adds	r3, #1
 8000552:	61bb      	str	r3, [r7, #24]
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbe9      	blt.n	8000530 <Draw_Blue_Cross+0x28>
	for(int i=0; i<320;i++){
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	3301      	adds	r3, #1
 8000560:	61fb      	str	r3, [r7, #28]
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000568:	dbde      	blt.n	8000528 <Draw_Blue_Cross+0x20>
		}
	}
	//Vertical blue line
	for(int i=0; i<240;i++){
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	e01b      	b.n	80005a8 <Draw_Blue_Cross+0xa0>
	  for(int j=-thickness; j<thickness; j++){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	425b      	negs	r3, r3
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	e010      	b.n	800059a <Draw_Blue_Cross+0x92>
		  photo_buffer[(x+j)+(320*i)] = 0x001F;
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	18d1      	adds	r1, r2, r3
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	019b      	lsls	r3, r3, #6
 8000588:	440b      	add	r3, r1
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	4413      	add	r3, r2
 8000590:	221f      	movs	r2, #31
 8000592:	801a      	strh	r2, [r3, #0]
	  for(int j=-thickness; j<thickness; j++){
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	3301      	adds	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dbea      	blt.n	8000578 <Draw_Blue_Cross+0x70>
	for(int i=0; i<240;i++){
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	2bef      	cmp	r3, #239	; 0xef
 80005ac:	dde0      	ble.n	8000570 <Draw_Blue_Cross+0x68>
	  }
	}
}
 80005ae:	bf00      	nop
 80005b0:	3724      	adds	r7, #36	; 0x24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f002 f970 	bl	80028a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f8b9 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fb07 	bl	8000bdc <MX_GPIO_Init>
  MX_DMA_Init();
 80005ce:	f000 fa99 	bl	8000b04 <MX_DMA_Init>
  MX_DCMI_Init();
 80005d2:	f000 f94f 	bl	8000874 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80005d6:	f000 f981 	bl	80008dc <MX_DMA2D_Init>
  MX_FMC_Init();
 80005da:	f000 fab1 	bl	8000b40 <MX_FMC_Init>
  MX_USART1_UART_Init();
 80005de:	f000 fa61 	bl	8000aa4 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 80005e2:	f000 f9ad 	bl	8000940 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  LTDC_Init(SDRAM_BANK_1_LTCD, 0, 0, 320, 240);
 80005e6:	23f0      	movs	r3, #240	; 0xf0
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	484c      	ldr	r0, [pc, #304]	; (8000724 <main+0x168>)
 80005f4:	f000 ff18 	bl	8001428 <LTDC_Init>
  BSP_SDRAM_Init();
 80005f8:	f001 fbe8 	bl	8001dcc <BSP_SDRAM_Init>
  CAMERA_Init(CAMERA_R320x240);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 ffdf 	bl	80015c0 <CAMERA_Init>
  HAL_Delay(1000); //Delay for the camera to output correct data
 8000602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000606:	f002 f9ab 	bl	8002960 <HAL_Delay>
  Im_size = 0x9600; //size=320*240*2/4
 800060a:	4b47      	ldr	r3, [pc, #284]	; (8000728 <main+0x16c>)
 800060c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000610:	601a      	str	r2, [r3, #0]
  /* uncomment the following line in case of snapshot mode */
  //HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, SDRAM_BANK_1_DCMI, Im_size);
  /* uncomment the following line in case of continuous mode */
  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS , SDRAM_BANK_1_DCMI, Im_size);
 8000612:	4b45      	ldr	r3, [pc, #276]	; (8000728 <main+0x16c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800061a:	2100      	movs	r1, #0
 800061c:	4843      	ldr	r0, [pc, #268]	; (800072c <main+0x170>)
 800061e:	f002 fb4d 	bl	8002cbc <HAL_DCMI_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_SDRAM_ReadData(SDRAM_BANK_1_DCMI, (uint32_t*)photo_buffer_32, SIZE_BUFFER_32);
 8000622:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000626:	4942      	ldr	r1, [pc, #264]	; (8000730 <main+0x174>)
 8000628:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800062c:	f001 fc8c 	bl	8001f48 <BSP_SDRAM_ReadData>
	  uint16_t* photo_buffer_16 = (uint16_t*) photo_buffer_32;
 8000630:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <main+0x174>)
 8000632:	60fb      	str	r3, [r7, #12]
	  int x = 0, y = 0, k = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
	  for(int i=0;i<SIZE_BUFFER_32*2; i++){
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e04f      	b.n	80006e6 <main+0x12a>
		  uint16_t rouge = photo_buffer_16[i] & 0xF800;
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	4413      	add	r3, r2
 800064e:	881a      	ldrh	r2, [r3, #0]
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <main+0x178>)
 8000652:	4013      	ands	r3, r2
 8000654:	817b      	strh	r3, [r7, #10]
		  uint16_t vert = photo_buffer_16[i] & 0x07E0;
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	4413      	add	r3, r2
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000664:	813b      	strh	r3, [r7, #8]
		  uint16_t bleu = photo_buffer_16[i] & 0x001F;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	4413      	add	r3, r2
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	f003 031f 	and.w	r3, r3, #31
 8000674:	80fb      	strh	r3, [r7, #6]
		  if(vert > 0x03F0 || bleu > 0x000F){
 8000676:	893b      	ldrh	r3, [r7, #8]
 8000678:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 800067c:	d802      	bhi.n	8000684 <main+0xc8>
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d906      	bls.n	8000692 <main+0xd6>
			  photo_buffer_16[i] = 0;
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	801a      	strh	r2, [r3, #0]
 8000690:	e026      	b.n	80006e0 <main+0x124>
		  }
		  else if(rouge < 0x1800 ){
 8000692:	897b      	ldrh	r3, [r7, #10]
 8000694:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000698:	d206      	bcs.n	80006a8 <main+0xec>
			  photo_buffer_16[i] = 0;
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
 80006a6:	e01b      	b.n	80006e0 <main+0x124>
		  }
		  else{
			  k++;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	3301      	adds	r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
			  //Translate i into x and y coordinates
			  x += i%320;
 80006ae:	6939      	ldr	r1, [r7, #16]
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <main+0x17c>)
 80006b2:	fb83 2301 	smull	r2, r3, r3, r1
 80006b6:	11da      	asrs	r2, r3, #7
 80006b8:	17cb      	asrs	r3, r1, #31
 80006ba:	1ad2      	subs	r2, r2, r3
 80006bc:	4613      	mov	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	019b      	lsls	r3, r3, #6
 80006c4:	1aca      	subs	r2, r1, r3
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	4413      	add	r3, r2
 80006ca:	61fb      	str	r3, [r7, #28]
			  y += i/320;
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	4a1a      	ldr	r2, [pc, #104]	; (8000738 <main+0x17c>)
 80006d0:	fb82 1203 	smull	r1, r2, r2, r3
 80006d4:	11d2      	asrs	r2, r2, #7
 80006d6:	17db      	asrs	r3, r3, #31
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	69ba      	ldr	r2, [r7, #24]
 80006dc:	4413      	add	r3, r2
 80006de:	61bb      	str	r3, [r7, #24]
	  for(int i=0;i<SIZE_BUFFER_32*2; i++){
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	3301      	adds	r3, #1
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80006ec:	dbab      	blt.n	8000646 <main+0x8a>
		  }
	  }
	  x /= k;
 80006ee:	69fa      	ldr	r2, [r7, #28]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80006f6:	61fb      	str	r3, [r7, #28]
	  y /= k;
 80006f8:	69ba      	ldr	r2, [r7, #24]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000700:	61bb      	str	r3, [r7, #24]
	  Draw_Blue_Cross(x, y, 1, photo_buffer_16);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2201      	movs	r2, #1
 8000706:	69b9      	ldr	r1, [r7, #24]
 8000708:	69f8      	ldr	r0, [r7, #28]
 800070a:	f7ff fefd 	bl	8000508 <Draw_Blue_Cross>

	  BSP_SDRAM_WriteData(SDRAM_BANK_1_LTCD, (uint32_t*)photo_buffer_32, SIZE_BUFFER_32);
 800070e:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000712:	4907      	ldr	r1, [pc, #28]	; (8000730 <main+0x174>)
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <main+0x168>)
 8000716:	f001 fc2f 	bl	8001f78 <BSP_SDRAM_WriteData>
	  HAL_Delay(100);
 800071a:	2064      	movs	r0, #100	; 0x64
 800071c:	f002 f920 	bl	8002960 <HAL_Delay>
  {
 8000720:	e77f      	b.n	8000622 <main+0x66>
 8000722:	bf00      	nop
 8000724:	c0400000 	.word	0xc0400000
 8000728:	200000e0 	.word	0x200000e0
 800072c:	2000034c 	.word	0x2000034c
 8000730:	2000041c 	.word	0x2000041c
 8000734:	fffff800 	.word	0xfffff800
 8000738:	66666667 	.word	0x66666667

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0b4      	sub	sp, #208	; 0xd0
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f007 fc24 	bl	8007f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2284      	movs	r2, #132	; 0x84
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f007 fc15 	bl	8007f98 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b3f      	ldr	r3, [pc, #252]	; (800086c <SystemClock_Config+0x130>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a3e      	ldr	r2, [pc, #248]	; (800086c <SystemClock_Config+0x130>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b3c      	ldr	r3, [pc, #240]	; (800086c <SystemClock_Config+0x130>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000786:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <SystemClock_Config+0x134>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a39      	ldr	r2, [pc, #228]	; (8000870 <SystemClock_Config+0x134>)
 800078c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4b37      	ldr	r3, [pc, #220]	; (8000870 <SystemClock_Config+0x134>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079e:	2302      	movs	r3, #2
 80007a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007aa:	2310      	movs	r3, #16
 80007ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007bc:	2310      	movs	r3, #16
 80007be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80007c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007da:	4618      	mov	r0, r3
 80007dc:	f005 fce8 	bl	80061b0 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007e6:	f000 ff1f 	bl	8001628 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ea:	f005 fc91 	bl	8006110 <HAL_PWREx_EnableOverDrive>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007f4:	f000 ff18 	bl	8001628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800081a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800081e:	2106      	movs	r1, #6
 8000820:	4618      	mov	r0, r3
 8000822:	f005 ff69 	bl	80066f8 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800082c:	f000 fefc 	bl	8001628 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 8000830:	2348      	movs	r3, #72	; 0x48
 8000832:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000834:	23c0      	movs	r3, #192	; 0xc0
 8000836:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800084c:	2300      	movs	r3, #0
 800084e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	4618      	mov	r0, r3
 8000856:	f006 f921 	bl	8006a9c <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000860:	f000 fee2 	bl	8001628 <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	37d0      	adds	r7, #208	; 0xd0
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_DCMI_Init+0x60>)
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <MX_DCMI_Init+0x64>)
 800087c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_DCMI_Init+0x60>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_DCMI_Init+0x60>)
 8000886:	2220      	movs	r2, #32
 8000888:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_DCMI_Init+0x60>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_DCMI_Init+0x60>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_DCMI_Init+0x60>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_DCMI_Init+0x60>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_DCMI_Init+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_DCMI_Init+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_DCMI_Init+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_DCMI_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_DCMI_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_DCMI_Init+0x60>)
 80008c2:	f002 f981 	bl	8002bc8 <HAL_DCMI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 feac 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000034c 	.word	0x2000034c
 80008d8:	50050000 	.word	0x50050000

080008dc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_DMA2D_Init+0x5c>)
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <MX_DMA2D_Init+0x60>)
 80008e4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_DMA2D_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_DMA2D_Init+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_DMA2D_Init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_DMA2D_Init+0x5c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_DMA2D_Init+0x5c>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_DMA2D_Init+0x5c>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_DMA2D_Init+0x5c>)
 800090c:	2200      	movs	r2, #0
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <MX_DMA2D_Init+0x5c>)
 8000912:	f003 f805 	bl	8003920 <HAL_DMA2D_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800091c:	f000 fe84 	bl	8001628 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000920:	2101      	movs	r1, #1
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_DMA2D_Init+0x5c>)
 8000924:	f003 f846 	bl	80039b4 <HAL_DMA2D_ConfigLayer>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800092e:	f000 fe7b 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20025c1c 	.word	0x20025c1c
 800093c:	4002b000 	.word	0x4002b000

08000940 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b09a      	sub	sp, #104	; 0x68
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000946:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800094a:	2234      	movs	r2, #52	; 0x34
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f007 fb22 	bl	8007f98 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000954:	463b      	mov	r3, r7
 8000956:	2234      	movs	r2, #52	; 0x34
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fb1c 	bl	8007f98 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000960:	4b4e      	ldr	r3, [pc, #312]	; (8000a9c <MX_LTDC_Init+0x15c>)
 8000962:	4a4f      	ldr	r2, [pc, #316]	; (8000aa0 <MX_LTDC_Init+0x160>)
 8000964:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000966:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <MX_LTDC_Init+0x15c>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800096c:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <MX_LTDC_Init+0x15c>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000972:	4b4a      	ldr	r3, [pc, #296]	; (8000a9c <MX_LTDC_Init+0x15c>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000978:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <MX_LTDC_Init+0x15c>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800097e:	4b47      	ldr	r3, [pc, #284]	; (8000a9c <MX_LTDC_Init+0x15c>)
 8000980:	2207      	movs	r2, #7
 8000982:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000984:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <MX_LTDC_Init+0x15c>)
 8000986:	2203      	movs	r2, #3
 8000988:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800098a:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <MX_LTDC_Init+0x15c>)
 800098c:	220e      	movs	r2, #14
 800098e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000990:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <MX_LTDC_Init+0x15c>)
 8000992:	2205      	movs	r2, #5
 8000994:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000996:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <MX_LTDC_Init+0x15c>)
 8000998:	f240 228e 	movw	r2, #654	; 0x28e
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800099e:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <MX_LTDC_Init+0x15c>)
 80009a0:	f240 12e5 	movw	r2, #485	; 0x1e5
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <MX_LTDC_Init+0x15c>)
 80009a8:	f44f 7225 	mov.w	r2, #660	; 0x294
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80009ae:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <MX_LTDC_Init+0x15c>)
 80009b0:	f240 12e7 	movw	r2, #487	; 0x1e7
 80009b4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <MX_LTDC_Init+0x15c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <MX_LTDC_Init+0x15c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009c6:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <MX_LTDC_Init+0x15c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009ce:	4833      	ldr	r0, [pc, #204]	; (8000a9c <MX_LTDC_Init+0x15c>)
 80009d0:	f005 f8e8 	bl	8005ba4 <HAL_LTDC_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80009da:	f000 fe25 	bl	8001628 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80009ee:	2300      	movs	r3, #0
 80009f0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fe:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a00:	2305      	movs	r3, #5
 8000a02:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a26:	2200      	movs	r2, #0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481c      	ldr	r0, [pc, #112]	; (8000a9c <MX_LTDC_Init+0x15c>)
 8000a2c:	f005 f98a 	bl	8005d44 <HAL_LTDC_ConfigLayer>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000a36:	f000 fdf7 	bl	8001628 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2201      	movs	r2, #1
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_LTDC_Init+0x15c>)
 8000a86:	f005 f95d 	bl	8005d44 <HAL_LTDC_ConfigLayer>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000a90:	f000 fdca 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	3768      	adds	r7, #104	; 0x68
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200002a4 	.word	0x200002a4
 8000aa0:	40016800 	.word	0x40016800

08000aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_USART1_UART_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART1_UART_Init+0x58>)
 8000ae8:	f006 fcc7 	bl	800747a <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000af2:	f000 fd99 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000039c 	.word	0x2000039c
 8000b00:	40011000 	.word	0x40011000

08000b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_DMA_Init+0x38>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <MX_DMA_Init+0x38>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_DMA_Init+0x38>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2039      	movs	r0, #57	; 0x39
 8000b28:	f002 f817 	bl	8002b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b2c:	2039      	movs	r0, #57	; 0x39
 8000b2e:	f002 f830 	bl	8002b92 <HAL_NVIC_EnableIRQ>

}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <MX_FMC_Init+0x98>)
 8000b5c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b72:	2210      	movs	r2, #16
 8000b74:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b78:	2240      	movs	r2, #64	; 0x40
 8000b7a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000baa:	2310      	movs	r3, #16
 8000bac:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000bae:	2310      	movs	r3, #16
 8000bb0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <MX_FMC_Init+0x94>)
 8000bbc:	f006 fb5c 	bl	8007278 <HAL_SDRAM_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000bc6:	f000 fd2f 	bl	8001628 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20025c5c 	.word	0x20025c5c
 8000bd8:	a0000140 	.word	0xa0000140

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	; 0x40
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf2:	4bae      	ldr	r3, [pc, #696]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4aad      	ldr	r2, [pc, #692]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4bab      	ldr	r3, [pc, #684]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0a:	4ba8      	ldr	r3, [pc, #672]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4aa7      	ldr	r2, [pc, #668]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4ba5      	ldr	r3, [pc, #660]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4ba2      	ldr	r3, [pc, #648]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4aa1      	ldr	r2, [pc, #644]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b9f      	ldr	r3, [pc, #636]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	4b9c      	ldr	r3, [pc, #624]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a9b      	ldr	r2, [pc, #620]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b99      	ldr	r3, [pc, #612]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b96      	ldr	r3, [pc, #600]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a95      	ldr	r2, [pc, #596]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b93      	ldr	r3, [pc, #588]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b90      	ldr	r3, [pc, #576]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a8f      	ldr	r2, [pc, #572]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b8d      	ldr	r3, [pc, #564]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c82:	4b8a      	ldr	r3, [pc, #552]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a89      	ldr	r2, [pc, #548]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b87      	ldr	r3, [pc, #540]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c9a:	4b84      	ldr	r3, [pc, #528]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a83      	ldr	r2, [pc, #524]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b81      	ldr	r3, [pc, #516]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cb2:	4b7e      	ldr	r3, [pc, #504]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a7d      	ldr	r2, [pc, #500]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000cb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b7b      	ldr	r3, [pc, #492]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	4b78      	ldr	r3, [pc, #480]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a77      	ldr	r2, [pc, #476]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b75      	ldr	r3, [pc, #468]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce2:	4b72      	ldr	r3, [pc, #456]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a71      	ldr	r2, [pc, #452]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <MX_GPIO_Init+0x2d0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	486c      	ldr	r0, [pc, #432]	; (8000eb0 <MX_GPIO_Init+0x2d4>)
 8000d00:	f004 fa0a 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f241 010c 	movw	r1, #4108	; 0x100c
 8000d0a:	486a      	ldr	r0, [pc, #424]	; (8000eb4 <MX_GPIO_Init+0x2d8>)
 8000d0c:	f004 fa04 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
 8000d14:	4868      	ldr	r0, [pc, #416]	; (8000eb8 <MX_GPIO_Init+0x2dc>)
 8000d16:	f004 f9ff 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d20:	4866      	ldr	r0, [pc, #408]	; (8000ebc <MX_GPIO_Init+0x2e0>)
 8000d22:	f004 f9f9 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	21c8      	movs	r1, #200	; 0xc8
 8000d2a:	4865      	ldr	r0, [pc, #404]	; (8000ec0 <MX_GPIO_Init+0x2e4>)
 8000d2c:	f004 f9f4 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d30:	2308      	movs	r3, #8
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d40:	4619      	mov	r1, r3
 8000d42:	4860      	ldr	r0, [pc, #384]	; (8000ec4 <MX_GPIO_Init+0x2e8>)
 8000d44:	f004 f83e 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d58:	2309      	movs	r3, #9
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d60:	4619      	mov	r1, r3
 8000d62:	4858      	ldr	r0, [pc, #352]	; (8000ec4 <MX_GPIO_Init+0x2e8>)
 8000d64:	f004 f82e 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000d68:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7a:	230b      	movs	r3, #11
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d82:	4619      	mov	r1, r3
 8000d84:	484e      	ldr	r0, [pc, #312]	; (8000ec0 <MX_GPIO_Init+0x2e4>)
 8000d86:	f004 f81d 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d90:	2312      	movs	r3, #18
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	4848      	ldr	r0, [pc, #288]	; (8000ec8 <MX_GPIO_Init+0x2ec>)
 8000da8:	f004 f80c 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000dac:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	483f      	ldr	r0, [pc, #252]	; (8000ec8 <MX_GPIO_Init+0x2ec>)
 8000dca:	f003 fffb 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000dce:	2310      	movs	r3, #16
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de6:	4619      	mov	r1, r3
 8000de8:	4837      	ldr	r0, [pc, #220]	; (8000ec8 <MX_GPIO_Init+0x2ec>)
 8000dea:	f003 ffeb 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	4829      	ldr	r0, [pc, #164]	; (8000eb0 <MX_GPIO_Init+0x2d4>)
 8000e0a:	f003 ffdb 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000e0e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e20:	230c      	movs	r3, #12
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4828      	ldr	r0, [pc, #160]	; (8000ecc <MX_GPIO_Init+0x2f0>)
 8000e2c:	f003 ffca 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e42:	2301      	movs	r3, #1
 8000e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4820      	ldr	r0, [pc, #128]	; (8000ed0 <MX_GPIO_Init+0x2f4>)
 8000e4e:	f003 ffb9 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000e52:	2340      	movs	r3, #64	; 0x40
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e62:	230a      	movs	r3, #10
 8000e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <MX_GPIO_Init+0x2ec>)
 8000e6e:	f003 ffa9 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <MX_GPIO_Init+0x2f8>)
 8000e88:	f003 ff9c 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000e8c:	2340      	movs	r3, #64	; 0x40
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_GPIO_Init+0x2fc>)
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_GPIO_Init+0x2d4>)
 8000ea0:	f003 ff90 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000ea4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ea8:	e018      	b.n	8000edc <MX_GPIO_Init+0x300>
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020c00 	.word	0x40020c00
 8000eb4:	40022000 	.word	0x40022000
 8000eb8:	40022800 	.word	0x40022800
 8000ebc:	40021c00 	.word	0x40021c00
 8000ec0:	40021800 	.word	0x40021800
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40022400 	.word	0x40022400
 8000ed8:	10120000 	.word	0x10120000
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eea:	230a      	movs	r3, #10
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	48bb      	ldr	r0, [pc, #748]	; (80011e4 <MX_GPIO_Init+0x608>)
 8000ef6:	f003 ff65 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000efa:	23f0      	movs	r3, #240	; 0xf0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	48b4      	ldr	r0, [pc, #720]	; (80011e8 <MX_GPIO_Init+0x60c>)
 8000f16:	f003 ff55 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	48ad      	ldr	r0, [pc, #692]	; (80011ec <MX_GPIO_Init+0x610>)
 8000f38:	f003 ff44 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f50:	4619      	mov	r1, r3
 8000f52:	48a7      	ldr	r0, [pc, #668]	; (80011f0 <MX_GPIO_Init+0x614>)
 8000f54:	f003 ff36 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000f58:	f241 030c 	movw	r3, #4108	; 0x100c
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	489d      	ldr	r0, [pc, #628]	; (80011e8 <MX_GPIO_Init+0x60c>)
 8000f72:	f003 ff27 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	489a      	ldr	r0, [pc, #616]	; (80011f4 <MX_GPIO_Init+0x618>)
 8000f8c:	f003 ff1a 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000f90:	2308      	movs	r3, #8
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4894      	ldr	r0, [pc, #592]	; (80011f8 <MX_GPIO_Init+0x61c>)
 8000fa8:	f003 ff0c 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fac:	2310      	movs	r3, #16
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	488c      	ldr	r0, [pc, #560]	; (80011f0 <MX_GPIO_Init+0x614>)
 8000fc0:	f003 ff00 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4884      	ldr	r0, [pc, #528]	; (80011f0 <MX_GPIO_Init+0x614>)
 8000fe0:	f003 fef0 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000fe4:	f248 0304 	movw	r3, #32772	; 0x8004
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4880      	ldr	r0, [pc, #512]	; (80011fc <MX_GPIO_Init+0x620>)
 8000ffa:	f003 fee3 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800100e:	2305      	movs	r3, #5
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001016:	4619      	mov	r1, r3
 8001018:	4873      	ldr	r0, [pc, #460]	; (80011e8 <MX_GPIO_Init+0x60c>)
 800101a:	f003 fed3 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800101e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102c:	2302      	movs	r3, #2
 800102e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001034:	4619      	mov	r1, r3
 8001036:	4871      	ldr	r0, [pc, #452]	; (80011fc <MX_GPIO_Init+0x620>)
 8001038:	f003 fec4 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800104c:	2302      	movs	r3, #2
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	4619      	mov	r1, r3
 8001056:	4864      	ldr	r0, [pc, #400]	; (80011e8 <MX_GPIO_Init+0x60c>)
 8001058:	f003 feb4 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800105c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800106e:	2301      	movs	r3, #1
 8001070:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001076:	4619      	mov	r1, r3
 8001078:	485a      	ldr	r0, [pc, #360]	; (80011e4 <MX_GPIO_Init+0x608>)
 800107a:	f003 fea3 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800107e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001084:	4b5e      	ldr	r3, [pc, #376]	; (8001200 <MX_GPIO_Init+0x624>)
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001090:	4619      	mov	r1, r3
 8001092:	4855      	ldr	r0, [pc, #340]	; (80011e8 <MX_GPIO_Init+0x60c>)
 8001094:	f003 fe96 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001098:	23c0      	movs	r3, #192	; 0xc0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010a8:	2308      	movs	r3, #8
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b0:	4619      	mov	r1, r3
 80010b2:	4850      	ldr	r0, [pc, #320]	; (80011f4 <MX_GPIO_Init+0x618>)
 80010b4:	f003 fe86 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80010b8:	2310      	movs	r3, #16
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010c8:	230a      	movs	r3, #10
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	484a      	ldr	r0, [pc, #296]	; (80011fc <MX_GPIO_Init+0x620>)
 80010d4:	f003 fe76 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80010d8:	23c8      	movs	r3, #200	; 0xc8
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ec:	4619      	mov	r1, r3
 80010ee:	483f      	ldr	r0, [pc, #252]	; (80011ec <MX_GPIO_Init+0x610>)
 80010f0:	f003 fe68 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80010f4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001106:	4619      	mov	r1, r3
 8001108:	483e      	ldr	r0, [pc, #248]	; (8001204 <MX_GPIO_Init+0x628>)
 800110a:	f003 fe5b 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800110e:	2305      	movs	r3, #5
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800111e:	230a      	movs	r3, #10
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4832      	ldr	r0, [pc, #200]	; (80011f4 <MX_GPIO_Init+0x618>)
 800112a:	f003 fe4b 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800112e:	2332      	movs	r3, #50	; 0x32
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800113e:	230b      	movs	r3, #11
 8001140:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001146:	4619      	mov	r1, r3
 8001148:	482a      	ldr	r0, [pc, #168]	; (80011f4 <MX_GPIO_Init+0x618>)
 800114a:	f003 fe3b 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800114e:	2304      	movs	r3, #4
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800115e:	2309      	movs	r3, #9
 8001160:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001166:	4619      	mov	r1, r3
 8001168:	4827      	ldr	r0, [pc, #156]	; (8001208 <MX_GPIO_Init+0x62c>)
 800116a:	f003 fe2b 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800116e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001180:	2309      	movs	r3, #9
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001188:	4619      	mov	r1, r3
 800118a:	4819      	ldr	r0, [pc, #100]	; (80011f0 <MX_GPIO_Init+0x614>)
 800118c:	f003 fe1a 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001190:	2304      	movs	r3, #4
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <MX_GPIO_Init+0x610>)
 80011a4:	f003 fe0e 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011a8:	2386      	movs	r3, #134	; 0x86
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b8:	230b      	movs	r3, #11
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c0:	4619      	mov	r1, r3
 80011c2:	4808      	ldr	r0, [pc, #32]	; (80011e4 <MX_GPIO_Init+0x608>)
 80011c4:	f003 fdfe 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011cc:	2303      	movs	r3, #3
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d8:	4619      	mov	r1, r3
 80011da:	4802      	ldr	r0, [pc, #8]	; (80011e4 <MX_GPIO_Init+0x608>)
 80011dc:	f003 fdf2 	bl	8004dc4 <HAL_GPIO_Init>
 80011e0:	e014      	b.n	800120c <MX_GPIO_Init+0x630>
 80011e2:	bf00      	nop
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40022000 	.word	0x40022000
 80011ec:	40021800 	.word	0x40021800
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40022800 	.word	0x40022800
 80011fc:	40021c00 	.word	0x40021c00
 8001200:	10120000 	.word	0x10120000
 8001204:	40021400 	.word	0x40021400
 8001208:	40020400 	.word	0x40020400

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800120c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001212:	2312      	movs	r3, #18
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	2301      	movs	r3, #1
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800121e:	2304      	movs	r3, #4
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001226:	4619      	mov	r1, r3
 8001228:	481b      	ldr	r0, [pc, #108]	; (8001298 <MX_GPIO_Init+0x6bc>)
 800122a:	f003 fdcb 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800122e:	2328      	movs	r3, #40	; 0x28
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800123e:	230a      	movs	r3, #10
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	4814      	ldr	r0, [pc, #80]	; (800129c <MX_GPIO_Init+0x6c0>)
 800124a:	f003 fdbb 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800124e:	2340      	movs	r3, #64	; 0x40
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800125e:	2309      	movs	r3, #9
 8001260:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001266:	4619      	mov	r1, r3
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <MX_GPIO_Init+0x6bc>)
 800126a:	f003 fdab 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800126e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001280:	2305      	movs	r3, #5
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_GPIO_Init+0x6c4>)
 800128c:	f003 fd9a 	bl	8004dc4 <HAL_GPIO_Init>

}
 8001290:	bf00      	nop
 8001292:	3740      	adds	r7, #64	; 0x40
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021c00 	.word	0x40021c00
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400

080012a4 <LCD_GPIO_Init>:

/* USER CODE BEGIN 4 */
void LCD_GPIO_Init(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	; 0x38
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
 GPIO_InitTypeDef gpio_init_structure;
 /* Enable the LTDC and DMA2D clocks */
 __HAL_RCC_LTDC_CLK_ENABLE();
 80012ae:	4b58      	ldr	r3, [pc, #352]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a57      	ldr	r2, [pc, #348]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b55      	ldr	r3, [pc, #340]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012c2:	623b      	str	r3, [r7, #32]
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 __HAL_RCC_DMA2D_CLK_ENABLE();
 80012c6:	4b52      	ldr	r3, [pc, #328]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a51      	ldr	r2, [pc, #324]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 /* Enable GPIOs clock */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 80012de:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a4b      	ldr	r2, [pc, #300]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f6:	4b46      	ldr	r3, [pc, #280]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a45      	ldr	r2, [pc, #276]	; (8001410 <LCD_GPIO_Init+0x16c>)
 80012fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b43      	ldr	r3, [pc, #268]	; (8001410 <LCD_GPIO_Init+0x16c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]
 __HAL_RCC_GPIOI_CLK_ENABLE();
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <LCD_GPIO_Init+0x16c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a3f      	ldr	r2, [pc, #252]	; (8001410 <LCD_GPIO_Init+0x16c>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <LCD_GPIO_Init+0x16c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
 __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <LCD_GPIO_Init+0x16c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a39      	ldr	r2, [pc, #228]	; (8001410 <LCD_GPIO_Init+0x16c>)
 800132c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <LCD_GPIO_Init+0x16c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOK_CLK_ENABLE();
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <LCD_GPIO_Init+0x16c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a33      	ldr	r2, [pc, #204]	; (8001410 <LCD_GPIO_Init+0x16c>)
 8001344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <LCD_GPIO_Init+0x16c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
 /*** LTDC Pins configuration ***/
 /* GPIOE configuration */
 gpio_init_structure.Pin = GPIO_PIN_4;
 8001356:	2310      	movs	r3, #16
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
 gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001362:	2302      	movs	r3, #2
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001366:	230e      	movs	r3, #14
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	4828      	ldr	r0, [pc, #160]	; (8001414 <LCD_GPIO_Init+0x170>)
 8001372:	f003 fd27 	bl	8004dc4 <HAL_GPIO_Init>
 /* GPIOG configuration */
 gpio_init_structure.Pin = GPIO_PIN_12;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001380:	2309      	movs	r3, #9
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	4823      	ldr	r0, [pc, #140]	; (8001418 <LCD_GPIO_Init+0x174>)
 800138c:	f003 fd1a 	bl	8004dc4 <HAL_GPIO_Init>
 /* GPIOI LTDC alternate configuration */
 gpio_init_structure.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_13 |
 8001390:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_PIN_14 | GPIO_PIN_15;
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800139a:	230e      	movs	r3, #14
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	481d      	ldr	r0, [pc, #116]	; (800141c <LCD_GPIO_Init+0x178>)
 80013a6:	f003 fd0d 	bl	8004dc4 <HAL_GPIO_Init>
 /* GPIOJ configuration */
 gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 80013aa:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_5
| GPIO_PIN_6 | GPIO_PIN_7 |GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80013b4:	230e      	movs	r3, #14
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	4619      	mov	r1, r3
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <LCD_GPIO_Init+0x17c>)
 80013c0:	f003 fd00 	bl	8004dc4 <HAL_GPIO_Init>
 /* GPIOK configuration */
 gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 80013c4:	23f7      	movs	r3, #247	; 0xf7
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80013cc:	230e      	movs	r3, #14
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4813      	ldr	r0, [pc, #76]	; (8001424 <LCD_GPIO_Init+0x180>)
 80013d8:	f003 fcf4 	bl	8004dc4 <HAL_GPIO_Init>
 /* LCD_DISP GPIO configuration */
 gpio_init_structure.Pin = GPIO_PIN_12; /* LCD_DISP pin has to be
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
manually controlled */
 gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
 HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	480b      	ldr	r0, [pc, #44]	; (800141c <LCD_GPIO_Init+0x178>)
 80013ee:	f003 fce9 	bl	8004dc4 <HAL_GPIO_Init>
 /* LCD_BL_CTRL GPIO configuration */
 gpio_init_structure.Pin = GPIO_PIN_3; /* LCD_BL_CTRL pin has to be
 80013f2:	2308      	movs	r3, #8
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
manually controlled */
 gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
 HAL_GPIO_Init(GPIOK, &gpio_init_structure);}
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <LCD_GPIO_Init+0x180>)
 8001402:	f003 fcdf 	bl	8004dc4 <HAL_GPIO_Init>
 8001406:	bf00      	nop
 8001408:	3738      	adds	r7, #56	; 0x38
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40021000 	.word	0x40021000
 8001418:	40021800 	.word	0x40021800
 800141c:	40022000 	.word	0x40022000
 8001420:	40022400 	.word	0x40022400
 8001424:	40022800 	.word	0x40022800

08001428 <LTDC_Init>:
static void LTDC_Init(uint32_t FB_Address, uint16_t Xpos, uint16_t Ypos,
uint16_t Width, uint16_t Height)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4603      	mov	r3, r0
 8001438:	817b      	strh	r3, [r7, #10]
 800143a:	460b      	mov	r3, r1
 800143c:	813b      	strh	r3, [r7, #8]
 800143e:	4613      	mov	r3, r2
 8001440:	80fb      	strh	r3, [r7, #6]
/* Timing Configuration */
 hltdc.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001442:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <LTDC_Init+0x178>)
 8001444:	2228      	movs	r2, #40	; 0x28
 8001446:	615a      	str	r2, [r3, #20]
 hltdc.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001448:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <LTDC_Init+0x178>)
 800144a:	2209      	movs	r2, #9
 800144c:	619a      	str	r2, [r3, #24]
 hltdc.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800144e:	4b54      	ldr	r3, [pc, #336]	; (80015a0 <LTDC_Init+0x178>)
 8001450:	2235      	movs	r2, #53	; 0x35
 8001452:	61da      	str	r2, [r3, #28]
 hltdc.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001454:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <LTDC_Init+0x178>)
 8001456:	220b      	movs	r2, #11
 8001458:	621a      	str	r2, [r3, #32]
 hltdc.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC +
 800145a:	4b51      	ldr	r3, [pc, #324]	; (80015a0 <LTDC_Init+0x178>)
 800145c:	f240 121b 	movw	r2, #283	; 0x11b
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
RK043FN48H_VBP - 1);
 hltdc.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC +
 8001462:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <LTDC_Init+0x178>)
 8001464:	f240 2215 	movw	r2, #533	; 0x215
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
RK043FN48H_HBP - 1);
 hltdc.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC +
 800146a:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <LTDC_Init+0x178>)
 800146c:	f240 121d 	movw	r2, #285	; 0x11d
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
RK043FN48H_VBP + RK043FN48H_VFP - 1);
 hltdc.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC +
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <LTDC_Init+0x178>)
 8001474:	f240 2235 	movw	r2, #565	; 0x235
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
RK043FN48H_HBP + RK043FN48H_HFP - 1);
 /* LCD clock configuration */
 periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <LTDC_Init+0x17c>)
 800147c:	2208      	movs	r2, #8
 800147e:	601a      	str	r2, [r3, #0]
 periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001480:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <LTDC_Init+0x17c>)
 8001482:	22c0      	movs	r2, #192	; 0xc0
 8001484:	615a      	str	r2, [r3, #20]
 periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <LTDC_Init+0x17c>)
 8001488:	2205      	movs	r2, #5
 800148a:	61da      	str	r2, [r3, #28]
 periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800148c:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <LTDC_Init+0x17c>)
 800148e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
 HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001494:	4843      	ldr	r0, [pc, #268]	; (80015a4 <LTDC_Init+0x17c>)
 8001496:	f005 fb01 	bl	8006a9c <HAL_RCCEx_PeriphCLKConfig>
 /* Initialize the LCD pixel width and pixel height */
 hltdc.LayerCfg->ImageWidth = RK043FN48H_WIDTH;
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <LTDC_Init+0x178>)
 800149c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80014a0:	661a      	str	r2, [r3, #96]	; 0x60
 hltdc.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80014a2:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <LTDC_Init+0x178>)
 80014a4:	f44f 7288 	mov.w	r2, #272	; 0x110
 80014a8:	665a      	str	r2, [r3, #100]	; 0x64
 hltdc.Init.Backcolor.Blue = 0;/* Background value */
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <LTDC_Init+0x178>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 hltdc.Init.Backcolor.Green = 0;
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <LTDC_Init+0x178>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 hltdc.Init.Backcolor.Red = 0;
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <LTDC_Init+0x178>)
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 /* Polarity */
 hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <LTDC_Init+0x178>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
 hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <LTDC_Init+0x178>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
 hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014ce:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <LTDC_Init+0x178>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
 hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <LTDC_Init+0x178>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
 hltdc.Instance = LTDC;
 80014da:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <LTDC_Init+0x178>)
 80014dc:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <LTDC_Init+0x180>)
 80014de:	601a      	str	r2, [r3, #0]
 if(HAL_LTDC_GetState(&hltdc) == HAL_LTDC_STATE_RESET)
 80014e0:	482f      	ldr	r0, [pc, #188]	; (80015a0 <LTDC_Init+0x178>)
 80014e2:	f004 fc6d 	bl	8005dc0 <HAL_LTDC_GetState>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d103      	bne.n	80014f4 <LTDC_Init+0xcc>
 {
 LCD_GPIO_Init(&hltdc, NULL);
 80014ec:	2100      	movs	r1, #0
 80014ee:	482c      	ldr	r0, [pc, #176]	; (80015a0 <LTDC_Init+0x178>)
 80014f0:	f7ff fed8 	bl	80012a4 <LCD_GPIO_Init>
 }
 HAL_LTDC_Init(&hltdc);
 80014f4:	482a      	ldr	r0, [pc, #168]	; (80015a0 <LTDC_Init+0x178>)
 80014f6:	f004 fb55 	bl	8005ba4 <HAL_LTDC_Init>
 /* Assert display enable LCD_DISP pin */
 HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001500:	482a      	ldr	r0, [pc, #168]	; (80015ac <LTDC_Init+0x184>)
 8001502:	f003 fe09 	bl	8005118 <HAL_GPIO_WritePin>
 /* Assert backlight LCD_BL_CTRL pin */
 HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2108      	movs	r1, #8
 800150a:	4829      	ldr	r0, [pc, #164]	; (80015b0 <LTDC_Init+0x188>)
 800150c:	f003 fe04 	bl	8005118 <HAL_GPIO_WritePin>
 DrawProp[0].pFont = &Font24 ;
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <LTDC_Init+0x18c>)
 8001512:	4a29      	ldr	r2, [pc, #164]	; (80015b8 <LTDC_Init+0x190>)
 8001514:	609a      	str	r2, [r3, #8]
 /* Layer Init */
  layer_cfg.WindowX0 = Xpos;
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	4a28      	ldr	r2, [pc, #160]	; (80015bc <LTDC_Init+0x194>)
 800151a:	6013      	str	r3, [r2, #0]
  layer_cfg.WindowX1 = Width;
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	4a27      	ldr	r2, [pc, #156]	; (80015bc <LTDC_Init+0x194>)
 8001520:	6053      	str	r3, [r2, #4]
  layer_cfg.WindowY0 = Ypos;
 8001522:	893b      	ldrh	r3, [r7, #8]
 8001524:	4a25      	ldr	r2, [pc, #148]	; (80015bc <LTDC_Init+0x194>)
 8001526:	6093      	str	r3, [r2, #8]
  layer_cfg.WindowY1 = Height;
 8001528:	8b3b      	ldrh	r3, [r7, #24]
 800152a:	4a24      	ldr	r2, [pc, #144]	; (80015bc <LTDC_Init+0x194>)
 800152c:	60d3      	str	r3, [r2, #12]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <LTDC_Init+0x194>)
 8001530:	2202      	movs	r2, #2
 8001532:	611a      	str	r2, [r3, #16]
  layer_cfg.FBStartAdress = FB_Address;
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <LTDC_Init+0x194>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6253      	str	r3, [r2, #36]	; 0x24
  layer_cfg.Alpha = 255;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <LTDC_Init+0x194>)
 800153c:	22ff      	movs	r2, #255	; 0xff
 800153e:	615a      	str	r2, [r3, #20]
  layer_cfg.Alpha0 = 0;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <LTDC_Init+0x194>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  layer_cfg.Backcolor.Blue = 0;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <LTDC_Init+0x194>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  layer_cfg.Backcolor.Green = 0;
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <LTDC_Init+0x194>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  layer_cfg.Backcolor.Red = 0;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <LTDC_Init+0x194>)
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <LTDC_Init+0x194>)
 8001560:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001564:	61da      	str	r2, [r3, #28]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <LTDC_Init+0x194>)
 8001568:	2207      	movs	r2, #7
 800156a:	621a      	str	r2, [r3, #32]
  layer_cfg.ImageWidth = Width;
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <LTDC_Init+0x194>)
 8001570:	6293      	str	r3, [r2, #40]	; 0x28
  layer_cfg.ImageHeight = Height;
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	4a11      	ldr	r2, [pc, #68]	; (80015bc <LTDC_Init+0x194>)
 8001576:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	4910      	ldr	r1, [pc, #64]	; (80015bc <LTDC_Init+0x194>)
 800157c:	4808      	ldr	r0, [pc, #32]	; (80015a0 <LTDC_Init+0x178>)
 800157e:	f004 fbe1 	bl	8005d44 <HAL_LTDC_ConfigLayer>
  DrawProp[1].BackColor = ((uint32_t)0xFFFFFFFF);
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <LTDC_Init+0x18c>)
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	611a      	str	r2, [r3, #16]
  DrawProp[1].pFont = &Font24;
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <LTDC_Init+0x18c>)
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <LTDC_Init+0x190>)
 800158e:	615a      	str	r2, [r3, #20]
  DrawProp[1].TextColor = ((uint32_t)0xFF000000);
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <LTDC_Init+0x18c>)
 8001592:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001596:	60da      	str	r2, [r3, #12]
 }
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200002a4 	.word	0x200002a4
 80015a4:	20000058 	.word	0x20000058
 80015a8:	40016800 	.word	0x40016800
 80015ac:	40022000 	.word	0x40022000
 80015b0:	40022800 	.word	0x40022800
 80015b4:	20000040 	.word	0x20000040
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000270 	.word	0x20000270

080015c0 <CAMERA_Init>:
 uint8_t CAMERA_Init(uint32_t Resolution) /*Camera initialization*/
 {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint8_t status = CAMERA_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
  /* Read ID of Camera module via I2C */
  if(ov9655_ReadID(CAMERA_I2C_ADDRESS) == OV9655_ID)
 80015cc:	2060      	movs	r0, #96	; 0x60
 80015ce:	f000 f951 	bl	8001874 <ov9655_ReadID>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b96      	cmp	r3, #150	; 0x96
 80015d6:	d117      	bne.n	8001608 <CAMERA_Init+0x48>
  {
  camera_driv = &ov9655_drv;/* Initialize the camera driver structure */
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <CAMERA_Init+0x58>)
 80015da:	4a10      	ldr	r2, [pc, #64]	; (800161c <CAMERA_Init+0x5c>)
 80015dc:	601a      	str	r2, [r3, #0]
  CameraHwAddress = CAMERA_I2C_ADDRESS;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <CAMERA_Init+0x60>)
 80015e0:	2260      	movs	r2, #96	; 0x60
 80015e2:	601a      	str	r2, [r3, #0]
  if (Resolution == CAMERA_R320x240)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10b      	bne.n	8001602 <CAMERA_Init+0x42>
  {
  camera_driv->Init(CameraHwAddress, Resolution);
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <CAMERA_Init+0x58>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <CAMERA_Init+0x60>)
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	b292      	uxth	r2, r2
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4610      	mov	r0, r2
 80015fa:	4798      	blx	r3
  HAL_DCMI_DisableCROP(&hdcmi);
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <CAMERA_Init+0x64>)
 80015fe:	f001 fcbd 	bl	8002f7c <HAL_DCMI_DisableCrop>
  }
  status = CAMERA_OK; /* Return CAMERA_OK status */
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e001      	b.n	800160c <CAMERA_Init+0x4c>
  }
  else
  {
  status = CAMERA_NOT_SUPPORTED; /* Return CAMERA_NOT_SUPPORTED status */
 8001608:	2304      	movs	r3, #4
 800160a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 }
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000020c 	.word	0x2000020c
 800161c:	20000008 	.word	0x20000008
 8001620:	200000dc 	.word	0x200000dc
 8001624:	2000034c 	.word	0x2000034c

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <ov9655_Init>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  resolution: Camera resolution
  * @retval None
  */
void ov9655_Init(uint16_t DeviceAddr, uint32_t resolution)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	80fb      	strh	r3, [r7, #6]
  uint32_t index;

  /* Initialize I2C */
  CAMERA_IO_Init();
 8001644:	f000 fb74 	bl	8001d30 <CAMERA_IO_Init>

  /* Prepare the camera to be configured by resetting all its registers */
  CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_COM7, 0x80);
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	2112      	movs	r1, #18
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fb77 	bl	8001d44 <CAMERA_IO_Write>
  CAMERA_Delay(200);
 8001656:	20c8      	movs	r0, #200	; 0xc8
 8001658:	f000 fbac 	bl	8001db4 <CAMERA_Delay>

  /* Initialize OV9655 */
  switch (resolution)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d85b      	bhi.n	800171a <ov9655_Init+0xe2>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <ov9655_Init+0x30>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	08001679 	.word	0x08001679
 800166c:	080016af 	.word	0x080016af
 8001670:	0800171b 	.word	0x0800171b
 8001674:	080016e5 	.word	0x080016e5
  {
  case CAMERA_R160x120:
    {
      for(index=0; index<(sizeof(OV9655_QQVGA)/2); index++)
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e013      	b.n	80016a6 <ov9655_Init+0x6e>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_QQVGA[index][0], OV9655_QQVGA[index][1]);
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	b2d8      	uxtb	r0, r3
 8001682:	4a28      	ldr	r2, [pc, #160]	; (8001724 <ov9655_Init+0xec>)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800168a:	4a26      	ldr	r2, [pc, #152]	; (8001724 <ov9655_Init+0xec>)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	461a      	mov	r2, r3
 8001696:	f000 fb55 	bl	8001d44 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 800169a:	2002      	movs	r0, #2
 800169c:	f000 fb8a 	bl	8001db4 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2); index++)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3301      	adds	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b95      	cmp	r3, #149	; 0x95
 80016aa:	d9e8      	bls.n	800167e <ov9655_Init+0x46>
      }
      break;
 80016ac:	e036      	b.n	800171c <ov9655_Init+0xe4>
    }
  case CAMERA_R320x240:
    {
      for(index=0; index<(sizeof(OV9655_QVGA)/2); index++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e013      	b.n	80016dc <ov9655_Init+0xa4>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_QVGA[index][0], OV9655_QVGA[index][1]);
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	b2d8      	uxtb	r0, r3
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <ov9655_Init+0xf0>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80016c0:	4a19      	ldr	r2, [pc, #100]	; (8001728 <ov9655_Init+0xf0>)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	785b      	ldrb	r3, [r3, #1]
 80016ca:	461a      	mov	r2, r3
 80016cc:	f000 fb3a 	bl	8001d44 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 80016d0:	2002      	movs	r0, #2
 80016d2:	f000 fb6f 	bl	8001db4 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_QVGA)/2); index++)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3301      	adds	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b95      	cmp	r3, #149	; 0x95
 80016e0:	d9e8      	bls.n	80016b4 <ov9655_Init+0x7c>
      }
      break;
 80016e2:	e01b      	b.n	800171c <ov9655_Init+0xe4>
      /* Not supported resolution */
      break;
    }
  case CAMERA_R640x480:
    {
      for(index=0; index<(sizeof(OV9655_VGA)/2); index++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e013      	b.n	8001712 <ov9655_Init+0xda>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_VGA[index][0], OV9655_VGA[index][1]);
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	b2d8      	uxtb	r0, r3
 80016ee:	4a0f      	ldr	r2, [pc, #60]	; (800172c <ov9655_Init+0xf4>)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80016f6:	4a0d      	ldr	r2, [pc, #52]	; (800172c <ov9655_Init+0xf4>)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	785b      	ldrb	r3, [r3, #1]
 8001700:	461a      	mov	r2, r3
 8001702:	f000 fb1f 	bl	8001d44 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 8001706:	2002      	movs	r0, #2
 8001708:	f000 fb54 	bl	8001db4 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_VGA)/2); index++)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3301      	adds	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b92      	cmp	r3, #146	; 0x92
 8001716:	d9e8      	bls.n	80016ea <ov9655_Init+0xb2>
      }
      break;
 8001718:	e000      	b.n	800171c <ov9655_Init+0xe4>
    }
  default:
    {
      break;
 800171a:	bf00      	nop
    }
  }
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	08009ccc 	.word	0x08009ccc
 8001728:	08009ba0 	.word	0x08009ba0
 800172c:	08009a78 	.word	0x08009a78

08001730 <ov9655_Config>:
  * @param  value: Value to be configured
  * @param  brightness_value: Brightness value to be configured
  * @retval None
  */
void ov9655_Config(uint16_t DeviceAddr, uint32_t feature, uint32_t value, uint32_t brightness_value)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b08b      	sub	sp, #44	; 0x2c
 8001734:	af00      	add	r7, sp, #0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	4603      	mov	r3, r0
 800173e:	81fb      	strh	r3, [r7, #14]
  uint8_t tslb, mtx1, mtx2, mtx3, mtx4, mtx5, mtx6;
  uint64_t value_tmp;
  uint32_t br_value;

  /* Convert the input value into ov9655 parameters */
  value_tmp = ov9655_ConvertValue(feature, value);
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	68b8      	ldr	r0, [r7, #8]
 8001744:	f000 f8aa 	bl	800189c <ov9655_ConvertValue>
 8001748:	e9c7 0108 	strd	r0, r1, [r7, #32]
  br_value = (uint32_t)ov9655_ConvertValue(CAMERA_CONTRAST_BRIGHTNESS, brightness_value);
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f8a4 	bl	800189c <ov9655_ConvertValue>
 8001754:	4603      	mov	r3, r0
 8001756:	460c      	mov	r4, r1
 8001758:	61fb      	str	r3, [r7, #28]

  switch(feature)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d015      	beq.n	800178c <ov9655_Config+0x5c>
 8001760:	2b01      	cmp	r3, #1
 8001762:	d302      	bcc.n	800176a <ov9655_Config+0x3a>
 8001764:	2b03      	cmp	r3, #3
 8001766:	d011      	beq.n	800178c <ov9655_Config+0x5c>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX6, mtx6);
      break;
    }
  default:
    {
      break;
 8001768:	e080      	b.n	800186c <ov9655_Config+0x13c>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_BRTN, br_value);
 800176a:	89fb      	ldrh	r3, [r7, #14]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	2155      	movs	r1, #85	; 0x55
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fae5 	bl	8001d44 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_CNST1, value_tmp);
 800177a:	89fb      	ldrh	r3, [r7, #14]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001782:	2156      	movs	r1, #86	; 0x56
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fadd 	bl	8001d44 <CAMERA_IO_Write>
      break;
 800178a:	e06f      	b.n	800186c <ov9655_Config+0x13c>
      tslb = (uint8_t)(value_tmp >> 48);
 800178c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	f04f 0400 	mov.w	r4, #0
 8001798:	0c13      	lsrs	r3, r2, #16
 800179a:	2400      	movs	r4, #0
 800179c:	76fb      	strb	r3, [r7, #27]
      mtx1 = (uint8_t)(value_tmp >> 40);
 800179e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	f04f 0400 	mov.w	r4, #0
 80017aa:	0a13      	lsrs	r3, r2, #8
 80017ac:	2400      	movs	r4, #0
 80017ae:	76bb      	strb	r3, [r7, #26]
      mtx2 = (uint8_t)(value_tmp >> 32);
 80017b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	f04f 0400 	mov.w	r4, #0
 80017bc:	0013      	movs	r3, r2
 80017be:	2400      	movs	r4, #0
 80017c0:	767b      	strb	r3, [r7, #25]
      mtx3 = (uint8_t)(value_tmp >> 24);
 80017c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f04f 0400 	mov.w	r4, #0
 80017ce:	0e0b      	lsrs	r3, r1, #24
 80017d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017d4:	0e14      	lsrs	r4, r2, #24
 80017d6:	763b      	strb	r3, [r7, #24]
      mtx4 = (uint8_t)(value_tmp >> 16);
 80017d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	f04f 0400 	mov.w	r4, #0
 80017e4:	0c0b      	lsrs	r3, r1, #16
 80017e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80017ea:	0c14      	lsrs	r4, r2, #16
 80017ec:	75fb      	strb	r3, [r7, #23]
      mtx5 = (uint8_t)(value_tmp >> 8);
 80017ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	f04f 0400 	mov.w	r4, #0
 80017fa:	0a0b      	lsrs	r3, r1, #8
 80017fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001800:	0a14      	lsrs	r4, r2, #8
 8001802:	75bb      	strb	r3, [r7, #22]
      mtx6 = (uint8_t)(value_tmp);
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	757b      	strb	r3, [r7, #21]
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_TSLB, tslb);
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	7efa      	ldrb	r2, [r7, #27]
 800180e:	213a      	movs	r1, #58	; 0x3a
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fa97 	bl	8001d44 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX1, mtx1);
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	7eba      	ldrb	r2, [r7, #26]
 800181c:	214f      	movs	r1, #79	; 0x4f
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fa90 	bl	8001d44 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX2, mtx2);
 8001824:	89fb      	ldrh	r3, [r7, #14]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	7e7a      	ldrb	r2, [r7, #25]
 800182a:	2150      	movs	r1, #80	; 0x50
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fa89 	bl	8001d44 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX3, mtx3);
 8001832:	89fb      	ldrh	r3, [r7, #14]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	7e3a      	ldrb	r2, [r7, #24]
 8001838:	2151      	movs	r1, #81	; 0x51
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fa82 	bl	8001d44 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX4, mtx4);
 8001840:	89fb      	ldrh	r3, [r7, #14]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	7dfa      	ldrb	r2, [r7, #23]
 8001846:	2152      	movs	r1, #82	; 0x52
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fa7b 	bl	8001d44 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX5, mtx5);
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	7dba      	ldrb	r2, [r7, #22]
 8001854:	2153      	movs	r1, #83	; 0x53
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fa74 	bl	8001d44 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX6, mtx6);
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	7d7a      	ldrb	r2, [r7, #21]
 8001862:	2154      	movs	r1, #84	; 0x54
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fa6d 	bl	8001d44 <CAMERA_IO_Write>
      break;
 800186a:	bf00      	nop
    }
  }
}
 800186c:	bf00      	nop
 800186e:	372c      	adds	r7, #44	; 0x2c
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}

08001874 <ov9655_ReadID>:
  * @brief  Read the OV9655 Camera identity.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval the OV9655 ID
  */
uint16_t ov9655_ReadID(uint16_t DeviceAddr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C */
  CAMERA_IO_Init();
 800187e:	f000 fa57 	bl	8001d30 <CAMERA_IO_Init>

  /* Get the camera ID */
  return (CAMERA_IO_Read(DeviceAddr, OV9655_SENSOR_PIDH));
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	210a      	movs	r1, #10
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fa75 	bl	8001d78 <CAMERA_IO_Read>
 800188e:	4603      	mov	r3, r0
 8001890:	b29b      	uxth	r3, r3
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <ov9655_ConvertValue>:
  * @param  feature: Camera feature to be configured
  * @param  value: Value to be configured
  * @retval The converted value
  */
static uint64_t ov9655_ConvertValue(uint32_t feature, uint32_t value)
{
 800189c:	b490      	push	{r4, r7}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint64_t ret = 0;
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	f04f 0400 	mov.w	r4, #0
 80018ae:	e9c7 3402 	strd	r3, r4, [r7, #8]

  switch(feature)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d005      	beq.n	80018c4 <ov9655_ConvertValue+0x28>
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d332      	bcc.n	8001922 <ov9655_ConvertValue+0x86>
 80018bc:	2b03      	cmp	r3, #3
 80018be:	f000 8099 	beq.w	80019f4 <ov9655_ConvertValue+0x158>
 80018c2:	e0c8      	b.n	8001a56 <ov9655_ConvertValue+0x1ba>
  {
  case CAMERA_BLACK_WHITE:
    {
      switch(value)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d824      	bhi.n	8001914 <ov9655_ConvertValue+0x78>
 80018ca:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <ov9655_ConvertValue+0x34>)
 80018cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d0:	080018e1 	.word	0x080018e1
 80018d4:	080018ef 	.word	0x080018ef
 80018d8:	080018fb 	.word	0x080018fb
 80018dc:	08001909 	.word	0x08001909
      {
      case CAMERA_BLACK_WHITE_BW:
        {
          ret =  OV9655_BLACK_WHITE_BW;
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 80018e8:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80018ec:	e018      	b.n	8001920 <ov9655_ConvertValue+0x84>
        }
      case CAMERA_BLACK_WHITE_NEGATIVE:
        {
          ret =  OV9655_BLACK_WHITE_NEGATIVE;
 80018ee:	f248 0380 	movw	r3, #32896	; 0x8080
 80018f2:	4c60      	ldr	r4, [pc, #384]	; (8001a74 <ov9655_ConvertValue+0x1d8>)
 80018f4:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80018f8:	e012      	b.n	8001920 <ov9655_ConvertValue+0x84>
        }
      case CAMERA_BLACK_WHITE_BW_NEGATIVE:
        {
          ret =  OV9655_BLACK_WHITE_BW_NEGATIVE;
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	f44f 046c 	mov.w	r4, #15466496	; 0xec0000
 8001902:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001906:	e00b      	b.n	8001920 <ov9655_ConvertValue+0x84>
        }
      case CAMERA_BLACK_WHITE_NORMAL:
        {
          ret =  OV9655_BLACK_WHITE_NORMAL;
 8001908:	f248 0380 	movw	r3, #32896	; 0x8080
 800190c:	4c5a      	ldr	r4, [pc, #360]	; (8001a78 <ov9655_ConvertValue+0x1dc>)
 800190e:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001912:	e005      	b.n	8001920 <ov9655_ConvertValue+0x84>
        }
      default:
        {
          ret =  OV9655_BLACK_WHITE_NORMAL;
 8001914:	f248 0380 	movw	r3, #32896	; 0x8080
 8001918:	4c57      	ldr	r4, [pc, #348]	; (8001a78 <ov9655_ConvertValue+0x1dc>)
 800191a:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 800191e:	bf00      	nop
        }
      }
      break;
 8001920:	e0a0      	b.n	8001a64 <ov9655_ConvertValue+0x1c8>
    }
  case CAMERA_CONTRAST_BRIGHTNESS:
    {
      switch(value)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d85d      	bhi.n	80019e4 <ov9655_ConvertValue+0x148>
 8001928:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <ov9655_ConvertValue+0x94>)
 800192a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192e:	bf00      	nop
 8001930:	08001959 	.word	0x08001959
 8001934:	08001967 	.word	0x08001967
 8001938:	08001975 	.word	0x08001975
 800193c:	08001983 	.word	0x08001983
 8001940:	08001991 	.word	0x08001991
 8001944:	0800199f 	.word	0x0800199f
 8001948:	080019ad 	.word	0x080019ad
 800194c:	080019bb 	.word	0x080019bb
 8001950:	080019c9 	.word	0x080019c9
 8001954:	080019d7 	.word	0x080019d7
      {
      case CAMERA_BRIGHTNESS_LEVEL0:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL0;
 8001958:	f04f 03b0 	mov.w	r3, #176	; 0xb0
 800195c:	f04f 0400 	mov.w	r4, #0
 8001960:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001964:	e045      	b.n	80019f2 <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL1:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL1;
 8001966:	f04f 0398 	mov.w	r3, #152	; 0x98
 800196a:	f04f 0400 	mov.w	r4, #0
 800196e:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001972:	e03e      	b.n	80019f2 <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL2:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL2;
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	f04f 0400 	mov.w	r4, #0
 800197c:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001980:	e037      	b.n	80019f2 <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL3:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL3;
 8001982:	f04f 0318 	mov.w	r3, #24
 8001986:	f04f 0400 	mov.w	r4, #0
 800198a:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 800198e:	e030      	b.n	80019f2 <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL4:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL4;
 8001990:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001994:	f04f 0400 	mov.w	r4, #0
 8001998:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 800199c:	e029      	b.n	80019f2 <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL0:
        {
          ret =  OV9655_CONTRAST_LEVEL0;
 800199e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80019a2:	f04f 0400 	mov.w	r4, #0
 80019a6:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80019aa:	e022      	b.n	80019f2 <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL1:
        {
          ret =  OV9655_CONTRAST_LEVEL1;
 80019ac:	f04f 0338 	mov.w	r3, #56	; 0x38
 80019b0:	f04f 0400 	mov.w	r4, #0
 80019b4:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80019b8:	e01b      	b.n	80019f2 <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL2:
        {
          ret =  OV9655_CONTRAST_LEVEL2;
 80019ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80019be:	f04f 0400 	mov.w	r4, #0
 80019c2:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80019c6:	e014      	b.n	80019f2 <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL3:
        {
          ret =  OV9655_CONTRAST_LEVEL3;
 80019c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019cc:	f04f 0400 	mov.w	r4, #0
 80019d0:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80019d4:	e00d      	b.n	80019f2 <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL4:
        {
          ret =  OV9655_CONTRAST_LEVEL4;
 80019d6:	f04f 0360 	mov.w	r3, #96	; 0x60
 80019da:	f04f 0400 	mov.w	r4, #0
 80019de:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80019e2:	e006      	b.n	80019f2 <ov9655_ConvertValue+0x156>
        }
      default:
        {
          ret =  OV9655_CONTRAST_LEVEL0;
 80019e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80019e8:	f04f 0400 	mov.w	r4, #0
 80019ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 80019f0:	bf00      	nop
        }
      }
      break;
 80019f2:	e037      	b.n	8001a64 <ov9655_ConvertValue+0x1c8>
    }
  case CAMERA_COLOR_EFFECT:
    {
      switch(value)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d825      	bhi.n	8001a48 <ov9655_ConvertValue+0x1ac>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <ov9655_ConvertValue+0x168>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001a21 	.word	0x08001a21
 8001a08:	08001a2f 	.word	0x08001a2f
 8001a0c:	08001a3d 	.word	0x08001a3d
 8001a10:	08001a15 	.word	0x08001a15
      {
      case CAMERA_COLOR_EFFECT_ANTIQUE:
        {
          ret =  OV9655_COLOR_EFFECT_ANTIQUE;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <ov9655_ConvertValue+0x1e0>)
 8001a16:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 8001a1a:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001a1e:	e019      	b.n	8001a54 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_BLUE:
        {
          ret =  OV9655_COLOR_EFFECT_BLUE;
 8001a20:	f04f 0360 	mov.w	r3, #96	; 0x60
 8001a24:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 8001a28:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001a2c:	e012      	b.n	8001a54 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_GREEN:
        {
          ret =  OV9655_COLOR_EFFECT_GREEN;
 8001a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a32:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 8001a36:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001a3a:	e00b      	b.n	8001a54 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_RED:
        {
          ret =  OV9655_COLOR_EFFECT_RED;
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	4c0f      	ldr	r4, [pc, #60]	; (8001a80 <ov9655_ConvertValue+0x1e4>)
 8001a42:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001a46:	e005      	b.n	8001a54 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_NONE:
      default:
        {
          ret =  OV9655_COLOR_EFFECT_NONE;
 8001a48:	f248 0380 	movw	r3, #32896	; 0x8080
 8001a4c:	4c0a      	ldr	r4, [pc, #40]	; (8001a78 <ov9655_ConvertValue+0x1dc>)
 8001a4e:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001a52:	bf00      	nop
        }
      }
      break;
 8001a54:	e006      	b.n	8001a64 <ov9655_ConvertValue+0x1c8>
    default:
      {
        ret = 0;
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	f04f 0400 	mov.w	r4, #0
 8001a5e:	e9c7 3402 	strd	r3, r4, [r7, #8]
        break;
 8001a62:	bf00      	nop
      }
    }
  }

  return ret;
 8001a64:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc90      	pop	{r4, r7}
 8001a72:	4770      	bx	lr
 8001a74:	00ec8080 	.word	0x00ec8080
 8001a78:	00cc8080 	.word	0x00cc8080
 8001a7c:	20f00000 	.word	0x20f00000
 8001a80:	00cc6000 	.word	0x00cc6000

08001a84 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <I2Cx_MspInit+0x150>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d14d      	bne.n	8001b30 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4a4f      	ldr	r2, [pc, #316]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001ab0:	2312      	movs	r3, #18
 8001ab2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001abc:	2304      	movs	r3, #4
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4845      	ldr	r0, [pc, #276]	; (8001bdc <I2Cx_MspInit+0x158>)
 8001ac8:	f003 f97c 	bl	8004dc4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4840      	ldr	r0, [pc, #256]	; (8001bdc <I2Cx_MspInit+0x158>)
 8001ada:	f003 f973 	bl	8004dc4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a3d      	ldr	r2, [pc, #244]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001ae4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a37      	ldr	r2, [pc, #220]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001afc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b00:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001b02:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001b08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b0c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	210f      	movs	r1, #15
 8001b12:	2048      	movs	r0, #72	; 0x48
 8001b14:	f001 f821 	bl	8002b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001b18:	2048      	movs	r0, #72	; 0x48
 8001b1a:	f001 f83a 	bl	8002b92 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	210f      	movs	r1, #15
 8001b22:	2049      	movs	r0, #73	; 0x49
 8001b24:	f001 f819 	bl	8002b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001b28:	2049      	movs	r0, #73	; 0x49
 8001b2a:	f001 f832 	bl	8002b92 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001b2e:	e04d      	b.n	8001bcc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	4a28      	ldr	r2, [pc, #160]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001b48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b4e:	2312      	movs	r3, #18
 8001b50:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001b56:	2302      	movs	r3, #2
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	481e      	ldr	r0, [pc, #120]	; (8001be0 <I2Cx_MspInit+0x15c>)
 8001b66:	f003 f92d 	bl	8004dc4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	481a      	ldr	r0, [pc, #104]	; (8001be0 <I2Cx_MspInit+0x15c>)
 8001b78:	f003 f924 	bl	8004dc4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b86:	6413      	str	r3, [r2, #64]	; 0x40
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001b9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b9e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <I2Cx_MspInit+0x154>)
 8001ba6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001baa:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	210f      	movs	r1, #15
 8001bb0:	201f      	movs	r0, #31
 8001bb2:	f000 ffd2 	bl	8002b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001bb6:	201f      	movs	r0, #31
 8001bb8:	f000 ffeb 	bl	8002b92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	2020      	movs	r0, #32
 8001bc2:	f000 ffca 	bl	8002b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001bc6:	2020      	movs	r0, #32
 8001bc8:	f000 ffe3 	bl	8002b92 <HAL_NVIC_EnableIRQ>
}
 8001bcc:	bf00      	nop
 8001bce:	3730      	adds	r7, #48	; 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200000e4 	.word	0x200000e4
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40021c00 	.word	0x40021c00
 8001be0:	40020400 	.word	0x40020400

08001be4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f003 fdaf 	bl	8005750 <HAL_I2C_GetState>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d125      	bne.n	8001c44 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <I2Cx_Init+0x68>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d103      	bne.n	8001c08 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <I2Cx_Init+0x6c>)
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e002      	b.n	8001c0e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <I2Cx_Init+0x70>)
 8001c0c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <I2Cx_Init+0x74>)
 8001c12:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff23 	bl	8001a84 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f003 fa84 	bl	800514c <HAL_I2C_Init>
  }
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200000e4 	.word	0x200000e4
 8001c50:	40005c00 	.word	0x40005c00
 8001c54:	40005400 	.word	0x40005400
 8001c58:	40912732 	.word	0x40912732

08001c5c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af04      	add	r7, sp, #16
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	72fb      	strb	r3, [r7, #11]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	813b      	strh	r3, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c7a:	7afb      	ldrb	r3, [r7, #11]
 8001c7c:	b299      	uxth	r1, r3
 8001c7e:	88f8      	ldrh	r0, [r7, #6]
 8001c80:	893a      	ldrh	r2, [r7, #8]
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	4603      	mov	r3, r0
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f003 fc42 	bl	800551c <HAL_I2C_Mem_Read>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f832 	bl	8001d10 <I2Cx_Error>
  }
  return status;    
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b08a      	sub	sp, #40	; 0x28
 8001cba:	af04      	add	r7, sp, #16
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	4608      	mov	r0, r1
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	72fb      	strb	r3, [r7, #11]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	813b      	strh	r3, [r7, #8]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cd4:	7afb      	ldrb	r3, [r7, #11]
 8001cd6:	b299      	uxth	r1, r3
 8001cd8:	88f8      	ldrh	r0, [r7, #6]
 8001cda:	893a      	ldrh	r2, [r7, #8]
 8001cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce0:	9302      	str	r3, [sp, #8]
 8001ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4603      	mov	r3, r0
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f003 fb01 	bl	80052f4 <HAL_I2C_Mem_Write>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f805 	bl	8001d10 <I2Cx_Error>
  }
  return status;
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f003 faa5 	bl	800526c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff5e 	bl	8001be4 <I2Cx_Init>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <CAMERA_IO_Init>:
/**
  * @brief  Initializes Camera low level.
  * @retval None
  */
void CAMERA_IO_Init(void) 
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cExtHandler);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <CAMERA_IO_Init+0x10>)
 8001d36:	f7ff ff55 	bl	8001be4 <I2Cx_Init>
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000130 	.word	0x20000130

08001d44 <CAMERA_IO_Write>:
  * @param  Reg: Register address 
  * @param  Value: Data to be written
  * @retval None
  */
void CAMERA_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	71bb      	strb	r3, [r7, #6]
 8001d52:	4613      	mov	r3, r2
 8001d54:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001d56:	79bb      	ldrb	r3, [r7, #6]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	79f9      	ldrb	r1, [r7, #7]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	1d7b      	adds	r3, r7, #5
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2301      	movs	r3, #1
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <CAMERA_IO_Write+0x30>)
 8001d68:	f7ff ffa5 	bl	8001cb6 <I2Cx_WriteMultiple>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000130 	.word	0x20000130

08001d78 <CAMERA_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address 
  * @retval Read data
  */
uint8_t CAMERA_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	4603      	mov	r3, r0
 8001d80:	460a      	mov	r2, r1
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	4613      	mov	r3, r2
 8001d86:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cExtHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	79f9      	ldrb	r1, [r7, #7]
 8001d92:	2301      	movs	r3, #1
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	f107 030f 	add.w	r3, r7, #15
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4804      	ldr	r0, [pc, #16]	; (8001db0 <CAMERA_IO_Read+0x38>)
 8001da0:	f7ff ff5c 	bl	8001c5c <I2Cx_ReadMultiple>

  return read_value;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000130 	.word	0x20000130

08001db4 <CAMERA_Delay>:
  * @brief  Camera delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void CAMERA_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fdcf 	bl	8002960 <HAL_Delay>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001dd2:	4a2a      	ldr	r2, [pc, #168]	; (8001e7c <BSP_SDRAM_Init+0xb0>)
 8001dd4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <BSP_SDRAM_Init+0xb4>)
 8001dd8:	2202      	movs	r2, #2
 8001dda:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <BSP_SDRAM_Init+0xb4>)
 8001dde:	2207      	movs	r2, #7
 8001de0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001de2:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <BSP_SDRAM_Init+0xb4>)
 8001de4:	2204      	movs	r2, #4
 8001de6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <BSP_SDRAM_Init+0xb4>)
 8001dea:	2207      	movs	r2, #7
 8001dec:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <BSP_SDRAM_Init+0xb4>)
 8001df0:	2202      	movs	r2, #2
 8001df2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001df4:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <BSP_SDRAM_Init+0xb4>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <BSP_SDRAM_Init+0xb4>)
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e0e:	2204      	movs	r2, #4
 8001e10:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e14:	2210      	movs	r2, #16
 8001e16:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e24:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e32:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001e42:	2100      	movs	r1, #0
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e46:	f000 f8af 	bl	8001fa8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001e4a:	490d      	ldr	r1, [pc, #52]	; (8001e80 <BSP_SDRAM_Init+0xb4>)
 8001e4c:	480a      	ldr	r0, [pc, #40]	; (8001e78 <BSP_SDRAM_Init+0xac>)
 8001e4e:	f005 fa13 	bl	8007278 <HAL_SDRAM_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <BSP_SDRAM_Init+0xb8>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e002      	b.n	8001e66 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <BSP_SDRAM_Init+0xb8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001e66:	f240 6003 	movw	r0, #1539	; 0x603
 8001e6a:	f000 f80d 	bl	8001e88 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <BSP_SDRAM_Init+0xb8>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20025c90 	.word	0x20025c90
 8001e7c:	a0000140 	.word	0xa0000140
 8001e80:	2000017c 	.word	0x2000017c
 8001e84:	20000014 	.word	0x20000014

08001e88 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb0:	4923      	ldr	r1, [pc, #140]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eb2:	4824      	ldr	r0, [pc, #144]	; (8001f44 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001eb4:	f005 fa96 	bl	80073e4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f000 fd51 	bl	8002960 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eda:	4919      	ldr	r1, [pc, #100]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001edc:	4819      	ldr	r0, [pc, #100]	; (8001f44 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ede:	f005 fa81 	bl	80073e4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eea:	2210      	movs	r2, #16
 8001eec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001efe:	4910      	ldr	r1, [pc, #64]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f00:	4810      	ldr	r0, [pc, #64]	; (8001f44 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f02:	f005 fa6f 	bl	80073e4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001f06:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001f0a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f0e:	2204      	movs	r2, #4
 8001f10:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f14:	2210      	movs	r2, #16
 8001f16:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f22:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f28:	4905      	ldr	r1, [pc, #20]	; (8001f40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f2c:	f005 fa5a 	bl	80073e4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4804      	ldr	r0, [pc, #16]	; (8001f44 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f34:	f005 fa81 	bl	800743a <HAL_SDRAM_ProgramRefreshRate>
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000198 	.word	0x20000198
 8001f44:	20025c90 	.word	0x20025c90

08001f48 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  if(HAL_SDRAM_Read_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8001f54:	68f9      	ldr	r1, [r7, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <BSP_SDRAM_ReadData+0x2c>)
 8001f5c:	f005 f9c0 	bl	80072e0 <HAL_SDRAM_Read_32b>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <BSP_SDRAM_ReadData+0x22>
  {
    return SDRAM_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <BSP_SDRAM_ReadData+0x24>
  }
  else
  {
    return SDRAM_OK;
 8001f6a:	2300      	movs	r3, #0
  } 
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20025c90 	.word	0x20025c90

08001f78 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  if(HAL_SDRAM_Write_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8001f84:	68f9      	ldr	r1, [r7, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <BSP_SDRAM_WriteData+0x2c>)
 8001f8c:	f005 f9e7 	bl	800735e <HAL_SDRAM_Write_32b>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <BSP_SDRAM_WriteData+0x22>
  {
    return SDRAM_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <BSP_SDRAM_WriteData+0x24>
  }
  else
  {
    return SDRAM_OK;
 8001f9a:	2300      	movs	r3, #0
  }
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20025c90 	.word	0x20025c90

08001fa8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b090      	sub	sp, #64	; 0x40
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fb2:	4b70      	ldr	r3, [pc, #448]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	4a6f      	ldr	r2, [pc, #444]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6393      	str	r3, [r2, #56]	; 0x38
 8001fbe:	4b6d      	ldr	r3, [pc, #436]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001fca:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a69      	ldr	r2, [pc, #420]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8001fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b67      	ldr	r3, [pc, #412]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	4b64      	ldr	r3, [pc, #400]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a63      	ldr	r2, [pc, #396]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b61      	ldr	r3, [pc, #388]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	623b      	str	r3, [r7, #32]
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffa:	4b5e      	ldr	r3, [pc, #376]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a5d      	ldr	r2, [pc, #372]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b5b      	ldr	r3, [pc, #364]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002012:	4b58      	ldr	r3, [pc, #352]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a57      	ldr	r2, [pc, #348]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002018:	f043 0310 	orr.w	r3, r3, #16
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b55      	ldr	r3, [pc, #340]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800202a:	4b52      	ldr	r3, [pc, #328]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a51      	ldr	r2, [pc, #324]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002030:	f043 0320 	orr.w	r3, r3, #32
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b4f      	ldr	r3, [pc, #316]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002042:	4b4c      	ldr	r3, [pc, #304]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b49      	ldr	r3, [pc, #292]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800205a:	4b46      	ldr	r3, [pc, #280]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a45      	ldr	r2, [pc, #276]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b43      	ldr	r3, [pc, #268]	; (8002174 <BSP_SDRAM_MspInit+0x1cc>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002076:	2301      	movs	r3, #1
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800207a:	2302      	movs	r3, #2
 800207c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800207e:	230c      	movs	r3, #12
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002082:	2308      	movs	r3, #8
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208a:	4619      	mov	r1, r3
 800208c:	483a      	ldr	r0, [pc, #232]	; (8002178 <BSP_SDRAM_MspInit+0x1d0>)
 800208e:	f002 fe99 	bl	8004dc4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002092:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800209c:	4619      	mov	r1, r3
 800209e:	4837      	ldr	r0, [pc, #220]	; (800217c <BSP_SDRAM_MspInit+0x1d4>)
 80020a0:	f002 fe90 	bl	8004dc4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80020a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80020aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ae:	4619      	mov	r1, r3
 80020b0:	4833      	ldr	r0, [pc, #204]	; (8002180 <BSP_SDRAM_MspInit+0x1d8>)
 80020b2:	f002 fe87 	bl	8004dc4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80020b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80020bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c0:	4619      	mov	r1, r3
 80020c2:	4830      	ldr	r0, [pc, #192]	; (8002184 <BSP_SDRAM_MspInit+0x1dc>)
 80020c4:	f002 fe7e 	bl	8004dc4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80020c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80020ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d2:	4619      	mov	r1, r3
 80020d4:	482c      	ldr	r0, [pc, #176]	; (8002188 <BSP_SDRAM_MspInit+0x1e0>)
 80020d6:	f002 fe75 	bl	8004dc4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80020da:	2328      	movs	r3, #40	; 0x28
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80020de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e2:	4619      	mov	r1, r3
 80020e4:	4829      	ldr	r0, [pc, #164]	; (800218c <BSP_SDRAM_MspInit+0x1e4>)
 80020e6:	f002 fe6d 	bl	8004dc4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 80020f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 8002100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002104:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 8002108:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800210c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 8002110:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002114:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 8002118:	2200      	movs	r2, #0
 800211a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 800211e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002122:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 800212c:	2203      	movs	r2, #3
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 8002132:	2200      	movs	r2, #0
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 800213e:	4a15      	ldr	r2, [pc, #84]	; (8002194 <BSP_SDRAM_MspInit+0x1ec>)
 8002140:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800214e:	4810      	ldr	r0, [pc, #64]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 8002150:	f001 f89e 	bl	8003290 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002154:	480e      	ldr	r0, [pc, #56]	; (8002190 <BSP_SDRAM_MspInit+0x1e8>)
 8002156:	f000 ffed 	bl	8003134 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	210f      	movs	r1, #15
 800215e:	2038      	movs	r0, #56	; 0x38
 8002160:	f000 fcfb 	bl	8002b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002164:	2038      	movs	r0, #56	; 0x38
 8002166:	f000 fd14 	bl	8002b92 <HAL_NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3740      	adds	r7, #64	; 0x40
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40020800 	.word	0x40020800
 800217c:	40020c00 	.word	0x40020c00
 8002180:	40021000 	.word	0x40021000
 8002184:	40021400 	.word	0x40021400
 8002188:	40021800 	.word	0x40021800
 800218c:	40021c00 	.word	0x40021c00
 8002190:	200001a8 	.word	0x200001a8
 8002194:	40026410 	.word	0x40026410

08002198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_MspInit+0x44>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <HAL_MspInit+0x44>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_MspInit+0x44>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_MspInit+0x44>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_MspInit+0x44>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_MspInit+0x44>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08e      	sub	sp, #56	; 0x38
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a72      	ldr	r2, [pc, #456]	; (80023c8 <HAL_DCMI_MspInit+0x1e8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	f040 80de 	bne.w	80023c0 <HAL_DCMI_MspInit+0x1e0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002204:	4b71      	ldr	r3, [pc, #452]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 8002206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002208:	4a70      	ldr	r2, [pc, #448]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6353      	str	r3, [r2, #52]	; 0x34
 8002210:	4b6e      	ldr	r3, [pc, #440]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	623b      	str	r3, [r7, #32]
 800221a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800221c:	4b6b      	ldr	r3, [pc, #428]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	4a6a      	ldr	r2, [pc, #424]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6313      	str	r3, [r2, #48]	; 0x30
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002234:	4b65      	ldr	r3, [pc, #404]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a64      	ldr	r2, [pc, #400]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800224c:	4b5f      	ldr	r3, [pc, #380]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	4a5e      	ldr	r2, [pc, #376]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 8002252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002256:	6313      	str	r3, [r2, #48]	; 0x30
 8002258:	4b5c      	ldr	r3, [pc, #368]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002264:	4b59      	ldr	r3, [pc, #356]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 800226a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226e:	6313      	str	r3, [r2, #48]	; 0x30
 8002270:	4b56      	ldr	r3, [pc, #344]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6313      	str	r3, [r2, #48]	; 0x30
 8002288:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_DCMI_MspInit+0x1ec>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002294:	2360      	movs	r3, #96	; 0x60
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022a4:	230d      	movs	r3, #13
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	4848      	ldr	r0, [pc, #288]	; (80023d0 <HAL_DCMI_MspInit+0x1f0>)
 80022b0:	f002 fd88 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80022b4:	2308      	movs	r3, #8
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022c4:	230d      	movs	r3, #13
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	4619      	mov	r1, r3
 80022ce:	4841      	ldr	r0, [pc, #260]	; (80023d4 <HAL_DCMI_MspInit+0x1f4>)
 80022d0:	f002 fd78 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80022d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022e6:	230d      	movs	r3, #13
 80022e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ee:	4619      	mov	r1, r3
 80022f0:	4839      	ldr	r0, [pc, #228]	; (80023d8 <HAL_DCMI_MspInit+0x1f8>)
 80022f2:	f002 fd67 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80022f6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002308:	230d      	movs	r3, #13
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800230c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002310:	4619      	mov	r1, r3
 8002312:	4832      	ldr	r0, [pc, #200]	; (80023dc <HAL_DCMI_MspInit+0x1fc>)
 8002314:	f002 fd56 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002318:	2350      	movs	r3, #80	; 0x50
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002328:	230d      	movs	r3, #13
 800232a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002330:	4619      	mov	r1, r3
 8002332:	482b      	ldr	r0, [pc, #172]	; (80023e0 <HAL_DCMI_MspInit+0x200>)
 8002334:	f002 fd46 	bl	8004dc4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 800233a:	4a2b      	ldr	r2, [pc, #172]	; (80023e8 <HAL_DCMI_MspInit+0x208>)
 800233c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800233e:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 8002340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002344:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 8002354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002358:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 800235c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002360:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 8002364:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002368:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 800236c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002370:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 8002374:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002378:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 800237c:	2204      	movs	r2, #4
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 8002382:	2203      	movs	r2, #3
 8002384:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 8002388:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002394:	4813      	ldr	r0, [pc, #76]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 8002396:	f000 fecd 	bl	8003134 <HAL_DMA_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_DCMI_MspInit+0x1c4>
    {
      Error_Handler();
 80023a0:	f7ff f942 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a0f      	ldr	r2, [pc, #60]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 80023a8:	649a      	str	r2, [r3, #72]	; 0x48
 80023aa:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <HAL_DCMI_MspInit+0x204>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	204e      	movs	r0, #78	; 0x4e
 80023b6:	f000 fbd0 	bl	8002b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80023ba:	204e      	movs	r0, #78	; 0x4e
 80023bc:	f000 fbe9 	bl	8002b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80023c0:	bf00      	nop
 80023c2:	3738      	adds	r7, #56	; 0x38
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	50050000 	.word	0x50050000
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40021800 	.word	0x40021800
 80023dc:	40021c00 	.word	0x40021c00
 80023e0:	40020000 	.word	0x40020000
 80023e4:	20000210 	.word	0x20000210
 80023e8:	40026428 	.word	0x40026428

080023ec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_DMA2D_MspInit+0x38>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d10b      	bne.n	8002416 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_DMA2D_MspInit+0x3c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_DMA2D_MspInit+0x3c>)
 8002404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <HAL_DMA2D_MspInit+0x3c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	4002b000 	.word	0x4002b000
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08e      	sub	sp, #56	; 0x38
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a51      	ldr	r2, [pc, #324]	; (8002590 <HAL_LTDC_MspInit+0x164>)
 800244a:	4293      	cmp	r3, r2
 800244c:	f040 809b 	bne.w	8002586 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	4a4f      	ldr	r2, [pc, #316]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 8002456:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800245a:	6453      	str	r3, [r2, #68]	; 0x44
 800245c:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002468:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4a49      	ldr	r2, [pc, #292]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 800246e:	f043 0310 	orr.w	r3, r3, #16
 8002472:	6313      	str	r3, [r2, #48]	; 0x30
 8002474:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002480:	4b44      	ldr	r3, [pc, #272]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	4a43      	ldr	r2, [pc, #268]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 8002486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248a:	6313      	str	r3, [r2, #48]	; 0x30
 800248c:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002498:	4b3e      	ldr	r3, [pc, #248]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	4a3d      	ldr	r2, [pc, #244]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	6313      	str	r3, [r2, #48]	; 0x30
 80024a4:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024b0:	4b38      	ldr	r3, [pc, #224]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	4a37      	ldr	r2, [pc, #220]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 80024b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ba:	6313      	str	r3, [r2, #48]	; 0x30
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	4a31      	ldr	r2, [pc, #196]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6313      	str	r3, [r2, #48]	; 0x30
 80024d4:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <HAL_LTDC_MspInit+0x168>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80024e0:	2310      	movs	r3, #16
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024f0:	230e      	movs	r3, #14
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80024f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f8:	4619      	mov	r1, r3
 80024fa:	4827      	ldr	r0, [pc, #156]	; (8002598 <HAL_LTDC_MspInit+0x16c>)
 80024fc:	f002 fc62 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002500:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002512:	230e      	movs	r3, #14
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800251a:	4619      	mov	r1, r3
 800251c:	481f      	ldr	r0, [pc, #124]	; (800259c <HAL_LTDC_MspInit+0x170>)
 800251e:	f002 fc51 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002522:	23f7      	movs	r3, #247	; 0xf7
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002532:	230e      	movs	r3, #14
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253a:	4619      	mov	r1, r3
 800253c:	4818      	ldr	r0, [pc, #96]	; (80025a0 <HAL_LTDC_MspInit+0x174>)
 800253e:	f002 fc41 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002554:	2309      	movs	r3, #9
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255c:	4619      	mov	r1, r3
 800255e:	4811      	ldr	r0, [pc, #68]	; (80025a4 <HAL_LTDC_MspInit+0x178>)
 8002560:	f002 fc30 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002564:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002576:	230e      	movs	r3, #14
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800257a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257e:	4619      	mov	r1, r3
 8002580:	4809      	ldr	r0, [pc, #36]	; (80025a8 <HAL_LTDC_MspInit+0x17c>)
 8002582:	f002 fc1f 	bl	8004dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002586:	bf00      	nop
 8002588:	3738      	adds	r7, #56	; 0x38
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40016800 	.word	0x40016800
 8002594:	40023800 	.word	0x40023800
 8002598:	40021000 	.word	0x40021000
 800259c:	40022400 	.word	0x40022400
 80025a0:	40022800 	.word	0x40022800
 80025a4:	40021800 	.word	0x40021800
 80025a8:	40022000 	.word	0x40022000

080025ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a25      	ldr	r2, [pc, #148]	; (8002660 <HAL_UART_MspInit+0xb4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d144      	bne.n	8002658 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_UART_MspInit+0xb8>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a24      	ldr	r2, [pc, #144]	; (8002664 <HAL_UART_MspInit+0xb8>)
 80025d4:	f043 0310 	orr.w	r3, r3, #16
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_UART_MspInit+0xb8>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_UART_MspInit+0xb8>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <HAL_UART_MspInit+0xb8>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <HAL_UART_MspInit+0xb8>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_UART_MspInit+0xb8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_UART_MspInit+0xb8>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <HAL_UART_MspInit+0xb8>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002626:	2307      	movs	r3, #7
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4619      	mov	r1, r3
 8002630:	480d      	ldr	r0, [pc, #52]	; (8002668 <HAL_UART_MspInit+0xbc>)
 8002632:	f002 fbc7 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800263a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002648:	2307      	movs	r3, #7
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4619      	mov	r1, r3
 8002652:	4806      	ldr	r0, [pc, #24]	; (800266c <HAL_UART_MspInit+0xc0>)
 8002654:	f002 fbb6 	bl	8004dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002658:	bf00      	nop
 800265a:	3728      	adds	r7, #40	; 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40011000 	.word	0x40011000
 8002664:	40023800 	.word	0x40023800
 8002668:	40020400 	.word	0x40020400
 800266c:	40020000 	.word	0x40020000

08002670 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002684:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <HAL_FMC_MspInit+0x100>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d16d      	bne.n	8002768 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800268c:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_FMC_MspInit+0x100>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_FMC_MspInit+0x104>)
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	4a37      	ldr	r2, [pc, #220]	; (8002774 <HAL_FMC_MspInit+0x104>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6393      	str	r3, [r2, #56]	; 0x38
 800269e:	4b35      	ldr	r3, [pc, #212]	; (8002774 <HAL_FMC_MspInit+0x104>)
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80026aa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80026ae:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026bc:	230c      	movs	r3, #12
 80026be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	482c      	ldr	r0, [pc, #176]	; (8002778 <HAL_FMC_MspInit+0x108>)
 80026c6:	f002 fb7d 	bl	8004dc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80026ca:	f248 1333 	movw	r3, #33075	; 0x8133
 80026ce:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d8:	2303      	movs	r3, #3
 80026da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026dc:	230c      	movs	r3, #12
 80026de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	4619      	mov	r1, r3
 80026e4:	4825      	ldr	r0, [pc, #148]	; (800277c <HAL_FMC_MspInit+0x10c>)
 80026e6:	f002 fb6d 	bl	8004dc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80026ea:	f24c 7303 	movw	r3, #50947	; 0xc703
 80026ee:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026fc:	230c      	movs	r3, #12
 80026fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	4619      	mov	r1, r3
 8002704:	481e      	ldr	r0, [pc, #120]	; (8002780 <HAL_FMC_MspInit+0x110>)
 8002706:	f002 fb5d 	bl	8004dc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800270a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800270e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800271c:	230c      	movs	r3, #12
 800271e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	4619      	mov	r1, r3
 8002724:	4817      	ldr	r0, [pc, #92]	; (8002784 <HAL_FMC_MspInit+0x114>)
 8002726:	f002 fb4d 	bl	8004dc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800272a:	2328      	movs	r3, #40	; 0x28
 800272c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800273a:	230c      	movs	r3, #12
 800273c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	4619      	mov	r1, r3
 8002742:	4811      	ldr	r0, [pc, #68]	; (8002788 <HAL_FMC_MspInit+0x118>)
 8002744:	f002 fb3e 	bl	8004dc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002748:	2308      	movs	r3, #8
 800274a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002754:	2303      	movs	r3, #3
 8002756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002758:	230c      	movs	r3, #12
 800275a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	4619      	mov	r1, r3
 8002760:	480a      	ldr	r0, [pc, #40]	; (800278c <HAL_FMC_MspInit+0x11c>)
 8002762:	f002 fb2f 	bl	8004dc4 <HAL_GPIO_Init>
 8002766:	e000      	b.n	800276a <HAL_FMC_MspInit+0xfa>
    return;
 8002768:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000208 	.word	0x20000208
 8002774:	40023800 	.word	0x40023800
 8002778:	40021000 	.word	0x40021000
 800277c:	40021800 	.word	0x40021800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40021400 	.word	0x40021400
 8002788:	40021c00 	.word	0x40021c00
 800278c:	40020800 	.word	0x40020800

08002790 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002798:	f7ff ff6a 	bl	8002670 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <HardFault_Handler+0x4>

080027b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <MemManage_Handler+0x4>

080027be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <BusFault_Handler+0x4>

080027c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <UsageFault_Handler+0x4>

080027ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f8:	f000 f892 	bl	8002920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}

08002800 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <DMA2_Stream1_IRQHandler+0x10>)
 8002806:	f000 fe23 	bl	8003450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000210 	.word	0x20000210

08002814 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <DCMI_IRQHandler+0x10>)
 800281a:	f000 fafd 	bl	8002e18 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000034c 	.word	0x2000034c

08002828 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <SystemInit+0x28>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	4a07      	ldr	r2, [pc, #28]	; (8002850 <SystemInit+0x28>)
 8002834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <SystemInit+0x28>)
 800283e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002842:	609a      	str	r2, [r3, #8]
#endif
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800288c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002858:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800285a:	e003      	b.n	8002864 <LoopCopyDataInit>

0800285c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800285e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002860:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002862:	3104      	adds	r1, #4

08002864 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002864:	480b      	ldr	r0, [pc, #44]	; (8002894 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002868:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800286a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800286c:	d3f6      	bcc.n	800285c <CopyDataInit>
  ldr  r2, =_sbss
 800286e:	4a0b      	ldr	r2, [pc, #44]	; (800289c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002870:	e002      	b.n	8002878 <LoopFillZerobss>

08002872 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002872:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002874:	f842 3b04 	str.w	r3, [r2], #4

08002878 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800287a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800287c:	d3f9      	bcc.n	8002872 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800287e:	f7ff ffd3 	bl	8002828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002882:	f005 fb65 	bl	8007f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002886:	f7fd fe99 	bl	80005bc <main>
  bx  lr    
 800288a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800288c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002890:	08009e28 	.word	0x08009e28
  ldr  r0, =_sdata
 8002894:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002898:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 800289c:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 80028a0:	20025cc8 	.word	0x20025cc8

080028a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a4:	e7fe      	b.n	80028a4 <ADC_IRQHandler>

080028a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028aa:	2003      	movs	r0, #3
 80028ac:	f000 f94a 	bl	8002b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f000 f805 	bl	80028c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80028b6:	f7ff fc6f 	bl	8002198 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_InitTick+0x54>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_InitTick+0x58>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4619      	mov	r1, r3
 80028d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f965 	bl	8002bae <HAL_SYSTICK_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00e      	b.n	800290c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b0f      	cmp	r3, #15
 80028f2:	d80a      	bhi.n	800290a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f4:	2200      	movs	r2, #0
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f000 f92d 	bl	8002b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002900:	4a06      	ldr	r2, [pc, #24]	; (800291c <HAL_InitTick+0x5c>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000018 	.word	0x20000018
 8002918:	20000020 	.word	0x20000020
 800291c:	2000001c 	.word	0x2000001c

08002920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_IncTick+0x20>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_IncTick+0x24>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4413      	add	r3, r2
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_IncTick+0x24>)
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000020 	.word	0x20000020
 8002944:	20025cc4 	.word	0x20025cc4

08002948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return uwTick;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_GetTick+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20025cc4 	.word	0x20025cc4

08002960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff ffee 	bl	8002948 <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d005      	beq.n	8002986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_Delay+0x40>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002986:	bf00      	nop
 8002988:	f7ff ffde 	bl	8002948 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	429a      	cmp	r2, r3
 8002996:	d8f7      	bhi.n	8002988 <HAL_Delay+0x28>
  {
  }
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000020 	.word	0x20000020

080029a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <__NVIC_SetPriorityGrouping+0x40>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <__NVIC_SetPriorityGrouping+0x40>)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	60d3      	str	r3, [r2, #12]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00
 80029e8:	05fa0000 	.word	0x05fa0000

080029ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0b      	blt.n	8002a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <__NVIC_EnableIRQ+0x38>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000e100 	.word	0xe000e100

08002a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db0a      	blt.n	8002a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	490c      	ldr	r1, [pc, #48]	; (8002a90 <__NVIC_SetPriority+0x4c>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a6c:	e00a      	b.n	8002a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4908      	ldr	r1, [pc, #32]	; (8002a94 <__NVIC_SetPriority+0x50>)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	761a      	strb	r2, [r3, #24]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000e100 	.word	0xe000e100
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	bf28      	it	cs
 8002ab6:	2304      	movcs	r3, #4
 8002ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d902      	bls.n	8002ac8 <NVIC_EncodePriority+0x30>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3b03      	subs	r3, #3
 8002ac6:	e000      	b.n	8002aca <NVIC_EncodePriority+0x32>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	4313      	orrs	r3, r2
         );
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b10:	d301      	bcc.n	8002b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00f      	b.n	8002b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <SysTick_Config+0x40>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b1e:	210f      	movs	r1, #15
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f7ff ff8e 	bl	8002a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <SysTick_Config+0x40>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <SysTick_Config+0x40>)
 8002b30:	2207      	movs	r2, #7
 8002b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	e000e010 	.word	0xe000e010

08002b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ff29 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b086      	sub	sp, #24
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b6c:	f7ff ff3e 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	6978      	ldr	r0, [r7, #20]
 8002b78:	f7ff ff8e 	bl	8002a98 <NVIC_EncodePriority>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff5d 	bl	8002a44 <__NVIC_SetPriority>
}
 8002b8a:	bf00      	nop
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff31 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff ffa2 	bl	8002b00 <SysTick_Config>
 8002bbc:	4603      	mov	r3, r0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e069      	b.n	8002cae <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fafa 	bl	80021e0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6819      	ldr	r1, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_DCMI_Init+0xf0>)
 8002c0e:	400b      	ands	r3, r1
 8002c10:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6819      	ldr	r1, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002c26:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002c32:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002c3e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002c4a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002c56:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d112      	bne.n	8002c8e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7f1b      	ldrb	r3, [r3, #28]
 8002c6c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7f5b      	ldrb	r3, [r3, #29]
 8002c72:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002c74:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7f9b      	ldrb	r3, [r3, #30]
 8002c7a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002c7c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7fdb      	ldrb	r3, [r3, #31]
 8002c84:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002c8a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002c8c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 021e 	orr.w	r2, r2, #30
 8002c9c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	ffe0f007 	.word	0xffe0f007

08002cbc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_DCMI_Start_DMA+0x20>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e095      	b.n	8002e08 <HAL_DCMI_Start_DMA+0x14c>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0202 	bic.w	r2, r2, #2
 8002d0a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d20:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <HAL_DCMI_Start_DMA+0x154>)
 8002d22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d28:	4a3a      	ldr	r2, [pc, #232]	; (8002e14 <HAL_DCMI_Start_DMA+0x158>)
 8002d2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d30:	2200      	movs	r2, #0
 8002d32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d20e      	bcs.n	8002d72 <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3328      	adds	r3, #40	; 0x28
 8002d5e:	4619      	mov	r1, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	f000 faf2 	bl	800334c <HAL_DMA_Start_IT>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d03f      	beq.n	8002dee <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e04a      	b.n	8002e08 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d76:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <HAL_DCMI_Start_DMA+0x154>)
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8002d8c:	e009      	b.n	8002da2 <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	085a      	lsrs	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	005a      	lsls	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d2f0      	bcs.n	8002d8e <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	1e9a      	subs	r2, r3, #2
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3328      	adds	r3, #40	; 0x28
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	f000 fe7a 	bl	8003ad8 <HAL_DMAEx_MultiBufferStart_IT>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00c      	b.n	8002e08 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	08002fd1 	.word	0x08002fd1
 8002e14:	080030fb 	.word	0x080030fb

08002e18 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d016      	beq.n	8002e60 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2204      	movs	r2, #4
 8002e38:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	f043 0202 	orr.w	r2, r3, #2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e52:	4a35      	ldr	r2, [pc, #212]	; (8002f28 <HAL_DCMI_IRQHandler+0x110>)
 8002e54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fad6 	bl	800340c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01e      	beq.n	8002ea8 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2204      	movs	r2, #4
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8a:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <HAL_DCMI_IRQHandler+0x110>)
 8002e8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 faba 	bl	800340c <HAL_DMA_Abort_IT>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f929 	bl	80030fa <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f840 	bl	8002f40 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2208      	movs	r2, #8
 8002ed0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f83e 	bl	8002f54 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01d      	beq.n	8002f1e <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d107      	bne.n	8002f00 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 021e 	bic.w	r2, r2, #30
 8002efe:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2201      	movs	r2, #1
 8002f16:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f825 	bl	8002f68 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	080030fb 	.word	0x080030fb

08002f2c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_DCMI_DisableCrop+0x16>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e018      	b.n	8002fc4 <HAL_DCMI_DisableCrop+0x48>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0204 	bic.w	r2, r2, #4
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d043      	beq.n	8003072 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff6:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d118      	bne.n	8003036 <DCMI_DMAXferCplt+0x66>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d015      	beq.n	8003036 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	00da      	lsls	r2, r3, #3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	2200      	movs	r2, #0
 8003024:	4619      	mov	r1, r3
 8003026:	f001 fe8d 	bl	8004d44 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	1e5a      	subs	r2, r3, #1
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
 8003034:	e044      	b.n	80030c0 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d13c      	bne.n	80030c0 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	00da      	lsls	r2, r3, #3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	2201      	movs	r2, #1
 8003060:	4619      	mov	r1, r3
 8003062:	f001 fe6f 	bl	8004d44 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	1e5a      	subs	r2, r3, #1
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
 8003070:	e026      	b.n	80030c0 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d006      	beq.n	8003090 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	e017      	b.n	80030c0 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10f      	bne.n	80030c0 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	0099      	lsls	r1, r3, #2
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	440a      	add	r2, r1
 80030b6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d112      	bne.n	80030f2 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d103      	bne.n	80030f2 <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	2b02      	cmp	r3, #2
 8003110:	d009      	beq.n	8003126 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff ff00 	bl	8002f2c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff fc02 	bl	8002948 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e099      	b.n	8003284 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003170:	e00f      	b.n	8003192 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003172:	f7ff fbe9 	bl	8002948 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b05      	cmp	r3, #5
 800317e:	d908      	bls.n	8003192 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2203      	movs	r2, #3
 800318a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e078      	b.n	8003284 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e8      	bne.n	8003172 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4b38      	ldr	r3, [pc, #224]	; (800328c <HAL_DMA_Init+0x158>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d107      	bne.n	80031fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	4313      	orrs	r3, r2
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f023 0307 	bic.w	r3, r3, #7
 8003212:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b04      	cmp	r3, #4
 8003224:	d117      	bne.n	8003256 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00e      	beq.n	8003256 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 faf7 	bl	800382c <DMA_CheckFifoParam>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2240      	movs	r2, #64	; 0x40
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003252:	2301      	movs	r3, #1
 8003254:	e016      	b.n	8003284 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 faae 	bl	80037c0 <DMA_CalcBaseAndBitshift>
 8003264:	4603      	mov	r3, r0
 8003266:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	223f      	movs	r2, #63	; 0x3f
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	f010803f 	.word	0xf010803f

08003290 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e050      	b.n	8003344 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d101      	bne.n	80032b2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	e048      	b.n	8003344 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2200      	movs	r2, #0
 80032e0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2221      	movs	r2, #33	; 0x21
 80032f0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fa64 	bl	80037c0 <DMA_CalcBaseAndBitshift>
 80032f8:	4603      	mov	r3, r0
 80032fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	223f      	movs	r2, #63	; 0x3f
 8003302:	409a      	lsls	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_DMA_Start_IT+0x26>
 800336e:	2302      	movs	r3, #2
 8003370:	e048      	b.n	8003404 <HAL_DMA_Start_IT+0xb8>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d137      	bne.n	80033f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2202      	movs	r2, #2
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f9e2 	bl	8003764 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	223f      	movs	r2, #63	; 0x3f
 80033a6:	409a      	lsls	r2, r3
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0216 	orr.w	r2, r2, #22
 80033ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0208 	orr.w	r2, r2, #8
 80033e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e005      	b.n	8003402 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
 8003400:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d004      	beq.n	800342a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e00c      	b.n	8003444 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2205      	movs	r2, #5
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800345c:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_DMA_IRQHandler+0x258>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a92      	ldr	r2, [pc, #584]	; (80036ac <HAL_DMA_IRQHandler+0x25c>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	0a9b      	lsrs	r3, r3, #10
 8003468:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	2208      	movs	r2, #8
 800347c:	409a      	lsls	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01a      	beq.n	80034bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0204 	bic.w	r2, r2, #4
 80034a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2208      	movs	r2, #8
 80034aa:	409a      	lsls	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	2201      	movs	r2, #1
 80034e0:	409a      	lsls	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	2204      	movs	r2, #4
 80034f8:	409a      	lsls	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2204      	movs	r2, #4
 8003516:	409a      	lsls	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	f043 0204 	orr.w	r2, r3, #4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2210      	movs	r2, #16
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d043      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d03c      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	2210      	movs	r2, #16
 800354c:	409a      	lsls	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d018      	beq.n	8003592 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d108      	bne.n	8003580 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d024      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
 800357e:	e01f      	b.n	80035c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01b      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
 8003590:	e016      	b.n	80035c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0208 	bic.w	r2, r2, #8
 80035ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	2220      	movs	r2, #32
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 808e 	beq.w	80036ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8086 	beq.w	80036ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	2220      	movs	r2, #32
 80035e8:	409a      	lsls	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d136      	bne.n	8003668 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0216 	bic.w	r2, r2, #22
 8003608:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003618:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <HAL_DMA_IRQHandler+0x1da>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0208 	bic.w	r2, r2, #8
 8003638:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	223f      	movs	r2, #63	; 0x3f
 8003640:	409a      	lsls	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	2b00      	cmp	r3, #0
 800365c:	d07d      	beq.n	800375a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
        }
        return;
 8003666:	e078      	b.n	800375a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01c      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d108      	bne.n	8003696 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	2b00      	cmp	r3, #0
 800368a:	d030      	beq.n	80036ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	e02b      	b.n	80036ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d027      	beq.n	80036ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
 80036a6:	e022      	b.n	80036ee <HAL_DMA_IRQHandler+0x29e>
 80036a8:	20000018 	.word	0x20000018
 80036ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0210 	bic.w	r2, r2, #16
 80036cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d032      	beq.n	800375c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d022      	beq.n	8003748 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2205      	movs	r2, #5
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	3301      	adds	r3, #1
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	429a      	cmp	r2, r3
 8003724:	d307      	bcc.n	8003736 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f2      	bne.n	800371a <HAL_DMA_IRQHandler+0x2ca>
 8003734:	e000      	b.n	8003738 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003736:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
 8003758:	e000      	b.n	800375c <HAL_DMA_IRQHandler+0x30c>
        return;
 800375a:	bf00      	nop
    }
  }
}
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop

08003764 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003780:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d108      	bne.n	80037a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037a2:	e007      	b.n	80037b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	60da      	str	r2, [r3, #12]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	3b10      	subs	r3, #16
 80037d0:	4a13      	ldr	r2, [pc, #76]	; (8003820 <DMA_CalcBaseAndBitshift+0x60>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <DMA_CalcBaseAndBitshift+0x64>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d908      	bls.n	8003800 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <DMA_CalcBaseAndBitshift+0x68>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	1d1a      	adds	r2, r3, #4
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	659a      	str	r2, [r3, #88]	; 0x58
 80037fe:	e006      	b.n	800380e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <DMA_CalcBaseAndBitshift+0x68>)
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	aaaaaaab 	.word	0xaaaaaaab
 8003824:	08009e10 	.word	0x08009e10
 8003828:	fffffc00 	.word	0xfffffc00

0800382c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11f      	bne.n	8003886 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d855      	bhi.n	80038f8 <DMA_CheckFifoParam+0xcc>
 800384c:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <DMA_CheckFifoParam+0x28>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003865 	.word	0x08003865
 8003858:	08003877 	.word	0x08003877
 800385c:	08003865 	.word	0x08003865
 8003860:	080038f9 	.word	0x080038f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d045      	beq.n	80038fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003874:	e042      	b.n	80038fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800387e:	d13f      	bne.n	8003900 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003884:	e03c      	b.n	8003900 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388e:	d121      	bne.n	80038d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d836      	bhi.n	8003904 <DMA_CheckFifoParam+0xd8>
 8003896:	a201      	add	r2, pc, #4	; (adr r2, 800389c <DMA_CheckFifoParam+0x70>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038ad 	.word	0x080038ad
 80038a0:	080038b3 	.word	0x080038b3
 80038a4:	080038ad 	.word	0x080038ad
 80038a8:	080038c5 	.word	0x080038c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      break;
 80038b0:	e02f      	b.n	8003912 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d024      	beq.n	8003908 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c2:	e021      	b.n	8003908 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038cc:	d11e      	bne.n	800390c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038d2:	e01b      	b.n	800390c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d902      	bls.n	80038e0 <DMA_CheckFifoParam+0xb4>
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d003      	beq.n	80038e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038de:	e018      	b.n	8003912 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	e015      	b.n	8003912 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00e      	beq.n	8003910 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      break;
 80038f6:	e00b      	b.n	8003910 <DMA_CheckFifoParam+0xe4>
      break;
 80038f8:	bf00      	nop
 80038fa:	e00a      	b.n	8003912 <DMA_CheckFifoParam+0xe6>
      break;
 80038fc:	bf00      	nop
 80038fe:	e008      	b.n	8003912 <DMA_CheckFifoParam+0xe6>
      break;
 8003900:	bf00      	nop
 8003902:	e006      	b.n	8003912 <DMA_CheckFifoParam+0xe6>
      break;
 8003904:	bf00      	nop
 8003906:	e004      	b.n	8003912 <DMA_CheckFifoParam+0xe6>
      break;
 8003908:	bf00      	nop
 800390a:	e002      	b.n	8003912 <DMA_CheckFifoParam+0xe6>
      break;   
 800390c:	bf00      	nop
 800390e:	e000      	b.n	8003912 <DMA_CheckFifoParam+0xe6>
      break;
 8003910:	bf00      	nop
    }
  } 
  
  return status; 
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e039      	b.n	80039a6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fe fd50 	bl	80023ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003970:	f023 0107 	bic.w	r1, r3, #7
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_DMA2D_Init+0x90>)
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68d1      	ldr	r1, [r2, #12]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	430b      	orrs	r3, r1
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	ffffc000 	.word	0xffffc000

080039b4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_DMA2D_ConfigLayer+0x20>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e079      	b.n	8003ac8 <HAL_DMA2D_ConfigLayer+0x114>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	3318      	adds	r3, #24
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80039fe:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003a00:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b0a      	cmp	r3, #10
 8003a08:	d003      	beq.n	8003a12 <HAL_DMA2D_ConfigLayer+0x5e>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b09      	cmp	r3, #9
 8003a10:	d107      	bne.n	8003a22 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e005      	b.n	8003a2e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	061b      	lsls	r3, r3, #24
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d120      	bne.n	8003a76 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	ea02 0103 	and.w	r1, r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b0a      	cmp	r3, #10
 8003a5c:	d003      	beq.n	8003a66 <HAL_DMA2D_ConfigLayer+0xb2>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b09      	cmp	r3, #9
 8003a64:	d127      	bne.n	8003ab6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28
 8003a74:	e01f      	b.n	8003ab6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	ea02 0103 	and.w	r1, r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b0a      	cmp	r3, #10
 8003a9e:	d003      	beq.n	8003aa8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b09      	cmp	r3, #9
 8003aa6:	d106      	bne.n	8003ab6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ab4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	ff03000f 	.word	0xff03000f

08003ad8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b80      	cmp	r3, #128	; 0x80
 8003af0:	d106      	bne.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f001 b901 	b.w	8004d02 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d102      	bne.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	f001 b8f9 	b.w	8004d02 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f041 80e7 	bne.w	8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0x121c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b42:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f001 f910 	bl	8004d78 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b99      	ldr	r3, [pc, #612]	; (8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d960      	bls.n	8003c26 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a97      	ldr	r2, [pc, #604]	; (8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d057      	beq.n	8003c1e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a96      	ldr	r2, [pc, #600]	; (8003dcc <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d050      	beq.n	8003c1a <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a94      	ldr	r2, [pc, #592]	; (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d049      	beq.n	8003c16 <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a93      	ldr	r2, [pc, #588]	; (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d042      	beq.n	8003c12 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a91      	ldr	r2, [pc, #580]	; (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d03a      	beq.n	8003c0c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a90      	ldr	r2, [pc, #576]	; (8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d032      	beq.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a8e      	ldr	r2, [pc, #568]	; (8003de0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d02a      	beq.n	8003c00 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a8d      	ldr	r2, [pc, #564]	; (8003de4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d022      	beq.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a8b      	ldr	r2, [pc, #556]	; (8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01a      	beq.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a8a      	ldr	r2, [pc, #552]	; (8003dec <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d012      	beq.n	8003bee <HAL_DMAEx_MultiBufferStart_IT+0x116>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a88      	ldr	r2, [pc, #544]	; (8003df0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00a      	beq.n	8003be8 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a87      	ldr	r2, [pc, #540]	; (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d102      	bne.n	8003be2 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8003bdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003be0:	e01e      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003be2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003be6:	e01b      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003be8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bec:	e018      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003bee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bf2:	e015      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003bf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bf8:	e012      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003bfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bfe:	e00f      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c04:	e00c      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c0a:	e009      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c10:	e006      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003c12:	2320      	movs	r3, #32
 8003c14:	e004      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003c16:	2320      	movs	r3, #32
 8003c18:	e002      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003c1a:	2320      	movs	r3, #32
 8003c1c:	e000      	b.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8003c1e:	2320      	movs	r3, #32
 8003c20:	4a75      	ldr	r2, [pc, #468]	; (8003df8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8003c22:	60d3      	str	r3, [r2, #12]
 8003c24:	e150      	b.n	8003ec8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b73      	ldr	r3, [pc, #460]	; (8003dfc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d960      	bls.n	8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a64      	ldr	r2, [pc, #400]	; (8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d057      	beq.n	8003cec <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a62      	ldr	r2, [pc, #392]	; (8003dcc <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d050      	beq.n	8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a61      	ldr	r2, [pc, #388]	; (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d049      	beq.n	8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a5f      	ldr	r2, [pc, #380]	; (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d042      	beq.n	8003ce0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a5e      	ldr	r2, [pc, #376]	; (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d03a      	beq.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a5c      	ldr	r2, [pc, #368]	; (8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d032      	beq.n	8003cd4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a5b      	ldr	r2, [pc, #364]	; (8003de0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d02a      	beq.n	8003cce <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a59      	ldr	r2, [pc, #356]	; (8003de4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d022      	beq.n	8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d01a      	beq.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a56      	ldr	r2, [pc, #344]	; (8003dec <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d012      	beq.n	8003cbc <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a55      	ldr	r2, [pc, #340]	; (8003df0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a53      	ldr	r2, [pc, #332]	; (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d102      	bne.n	8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 8003caa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cae:	e01e      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003cb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cb4:	e01b      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003cb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cba:	e018      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003cbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cc0:	e015      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003cc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cc6:	e012      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ccc:	e00f      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cd2:	e00c      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cd8:	e009      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003cda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cde:	e006      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e004      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	e002      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003ce8:	2320      	movs	r3, #32
 8003cea:	e000      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8003cec:	2320      	movs	r3, #32
 8003cee:	4a42      	ldr	r2, [pc, #264]	; (8003df8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8003cf0:	6093      	str	r3, [r2, #8]
 8003cf2:	e0e9      	b.n	8003ec8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b41      	ldr	r3, [pc, #260]	; (8003e00 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	f240 8083 	bls.w	8003e08 <HAL_DMAEx_MultiBufferStart_IT+0x330>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a30      	ldr	r2, [pc, #192]	; (8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d057      	beq.n	8003dbc <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2e      	ldr	r2, [pc, #184]	; (8003dcc <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d050      	beq.n	8003db8 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d049      	beq.n	8003db4 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2b      	ldr	r2, [pc, #172]	; (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d042      	beq.n	8003db0 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d03a      	beq.n	8003daa <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d032      	beq.n	8003da4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a27      	ldr	r2, [pc, #156]	; (8003de0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d02a      	beq.n	8003d9e <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a24      	ldr	r2, [pc, #144]	; (8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d01a      	beq.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a22      	ldr	r2, [pc, #136]	; (8003dec <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d012      	beq.n	8003d8c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a21      	ldr	r2, [pc, #132]	; (8003df0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00a      	beq.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d102      	bne.n	8003d80 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 8003d7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d7e:	e01e      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d84:	e01b      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003d86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d8a:	e018      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003d8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d90:	e015      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003d92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d96:	e012      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d9c:	e00f      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003da2:	e00c      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003da4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003da8:	e009      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dae:	e006      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003db0:	2320      	movs	r3, #32
 8003db2:	e004      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003db4:	2320      	movs	r3, #32
 8003db6:	e002      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003db8:	2320      	movs	r3, #32
 8003dba:	e000      	b.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8003dbc:	2320      	movs	r3, #32
 8003dbe:	4a11      	ldr	r2, [pc, #68]	; (8003e04 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003dc0:	60d3      	str	r3, [r2, #12]
 8003dc2:	e081      	b.n	8003ec8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8003dc4:	40026458 	.word	0x40026458
 8003dc8:	40026010 	.word	0x40026010
 8003dcc:	40026410 	.word	0x40026410
 8003dd0:	40026070 	.word	0x40026070
 8003dd4:	40026470 	.word	0x40026470
 8003dd8:	40026028 	.word	0x40026028
 8003ddc:	40026428 	.word	0x40026428
 8003de0:	40026088 	.word	0x40026088
 8003de4:	40026488 	.word	0x40026488
 8003de8:	40026040 	.word	0x40026040
 8003dec:	40026440 	.word	0x40026440
 8003df0:	400260a0 	.word	0x400260a0
 8003df4:	400264a0 	.word	0x400264a0
 8003df8:	40026400 	.word	0x40026400
 8003dfc:	400260b8 	.word	0x400260b8
 8003e00:	40026058 	.word	0x40026058
 8003e04:	40026000 	.word	0x40026000
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a96      	ldr	r2, [pc, #600]	; (8004068 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d057      	beq.n	8003ec2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a95      	ldr	r2, [pc, #596]	; (800406c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d050      	beq.n	8003ebe <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a93      	ldr	r2, [pc, #588]	; (8004070 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d049      	beq.n	8003eba <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a92      	ldr	r2, [pc, #584]	; (8004074 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d042      	beq.n	8003eb6 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a90      	ldr	r2, [pc, #576]	; (8004078 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d03a      	beq.n	8003eb0 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a8f      	ldr	r2, [pc, #572]	; (800407c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d032      	beq.n	8003eaa <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a8d      	ldr	r2, [pc, #564]	; (8004080 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02a      	beq.n	8003ea4 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a8c      	ldr	r2, [pc, #560]	; (8004084 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d022      	beq.n	8003e9e <HAL_DMAEx_MultiBufferStart_IT+0x3c6>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a8a      	ldr	r2, [pc, #552]	; (8004088 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01a      	beq.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a89      	ldr	r2, [pc, #548]	; (800408c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d012      	beq.n	8003e92 <HAL_DMAEx_MultiBufferStart_IT+0x3ba>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a87      	ldr	r2, [pc, #540]	; (8004090 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00a      	beq.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x3b4>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a86      	ldr	r2, [pc, #536]	; (8004094 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d102      	bne.n	8003e86 <HAL_DMAEx_MultiBufferStart_IT+0x3ae>
 8003e80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e84:	e01e      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003e86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e8a:	e01b      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003e8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e90:	e018      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003e92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e96:	e015      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003e98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e9c:	e012      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003e9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ea2:	e00f      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003ea4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ea8:	e00c      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003eaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eae:	e009      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eb4:	e006      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	e004      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003eba:	2320      	movs	r3, #32
 8003ebc:	e002      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	e000      	b.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8003ec2:	2320      	movs	r3, #32
 8003ec4:	4a74      	ldr	r2, [pc, #464]	; (8004098 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003ec6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b73      	ldr	r3, [pc, #460]	; (800409c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d960      	bls.n	8003f96 <HAL_DMAEx_MultiBufferStart_IT+0x4be>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a63      	ldr	r2, [pc, #396]	; (8004068 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d057      	beq.n	8003f8e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a62      	ldr	r2, [pc, #392]	; (800406c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d050      	beq.n	8003f8a <HAL_DMAEx_MultiBufferStart_IT+0x4b2>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a60      	ldr	r2, [pc, #384]	; (8004070 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d049      	beq.n	8003f86 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a5f      	ldr	r2, [pc, #380]	; (8004074 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d042      	beq.n	8003f82 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a5d      	ldr	r2, [pc, #372]	; (8004078 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d03a      	beq.n	8003f7c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a5c      	ldr	r2, [pc, #368]	; (800407c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d032      	beq.n	8003f76 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a5a      	ldr	r2, [pc, #360]	; (8004080 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d02a      	beq.n	8003f70 <HAL_DMAEx_MultiBufferStart_IT+0x498>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a59      	ldr	r2, [pc, #356]	; (8004084 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d022      	beq.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0x492>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a57      	ldr	r2, [pc, #348]	; (8004088 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01a      	beq.n	8003f64 <HAL_DMAEx_MultiBufferStart_IT+0x48c>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a56      	ldr	r2, [pc, #344]	; (800408c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d012      	beq.n	8003f5e <HAL_DMAEx_MultiBufferStart_IT+0x486>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a54      	ldr	r2, [pc, #336]	; (8004090 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00a      	beq.n	8003f58 <HAL_DMAEx_MultiBufferStart_IT+0x480>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a53      	ldr	r2, [pc, #332]	; (8004094 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d102      	bne.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x47a>
 8003f4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f50:	e01e      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f56:	e01b      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f5c:	e018      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f62:	e015      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f68:	e012      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f6e:	e00f      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f74:	e00c      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f7a:	e009      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f80:	e006      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f82:	2310      	movs	r3, #16
 8003f84:	e004      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f86:	2310      	movs	r3, #16
 8003f88:	e002      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	e000      	b.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8003f8e:	2310      	movs	r3, #16
 8003f90:	4a43      	ldr	r2, [pc, #268]	; (80040a0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003f92:	60d3      	str	r3, [r2, #12]
 8003f94:	e14f      	b.n	8004236 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b41      	ldr	r3, [pc, #260]	; (80040a4 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	f240 8082 	bls.w	80040a8 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2f      	ldr	r2, [pc, #188]	; (8004068 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d057      	beq.n	800405e <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2e      	ldr	r2, [pc, #184]	; (800406c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d050      	beq.n	800405a <HAL_DMAEx_MultiBufferStart_IT+0x582>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2c      	ldr	r2, [pc, #176]	; (8004070 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d049      	beq.n	8004056 <HAL_DMAEx_MultiBufferStart_IT+0x57e>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2b      	ldr	r2, [pc, #172]	; (8004074 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d042      	beq.n	8004052 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a29      	ldr	r2, [pc, #164]	; (8004078 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d03a      	beq.n	800404c <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a28      	ldr	r2, [pc, #160]	; (800407c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d032      	beq.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a26      	ldr	r2, [pc, #152]	; (8004080 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d02a      	beq.n	8004040 <HAL_DMAEx_MultiBufferStart_IT+0x568>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a25      	ldr	r2, [pc, #148]	; (8004084 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_DMAEx_MultiBufferStart_IT+0x562>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a23      	ldr	r2, [pc, #140]	; (8004088 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01a      	beq.n	8004034 <HAL_DMAEx_MultiBufferStart_IT+0x55c>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a22      	ldr	r2, [pc, #136]	; (800408c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d012      	beq.n	800402e <HAL_DMAEx_MultiBufferStart_IT+0x556>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a20      	ldr	r2, [pc, #128]	; (8004090 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00a      	beq.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0x550>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d102      	bne.n	8004022 <HAL_DMAEx_MultiBufferStart_IT+0x54a>
 800401c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004020:	e01e      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004022:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004026:	e01b      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004028:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800402c:	e018      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800402e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004032:	e015      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004034:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004038:	e012      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800403a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403e:	e00f      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004044:	e00c      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404a:	e009      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800404c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004050:	e006      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004052:	2310      	movs	r3, #16
 8004054:	e004      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004056:	2310      	movs	r3, #16
 8004058:	e002      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800405a:	2310      	movs	r3, #16
 800405c:	e000      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800405e:	2310      	movs	r3, #16
 8004060:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004062:	6093      	str	r3, [r2, #8]
 8004064:	e0e7      	b.n	8004236 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004066:	bf00      	nop
 8004068:	40026010 	.word	0x40026010
 800406c:	40026410 	.word	0x40026410
 8004070:	40026070 	.word	0x40026070
 8004074:	40026470 	.word	0x40026470
 8004078:	40026028 	.word	0x40026028
 800407c:	40026428 	.word	0x40026428
 8004080:	40026088 	.word	0x40026088
 8004084:	40026488 	.word	0x40026488
 8004088:	40026040 	.word	0x40026040
 800408c:	40026440 	.word	0x40026440
 8004090:	400260a0 	.word	0x400260a0
 8004094:	400264a0 	.word	0x400264a0
 8004098:	40026000 	.word	0x40026000
 800409c:	40026458 	.word	0x40026458
 80040a0:	40026400 	.word	0x40026400
 80040a4:	400260b8 	.word	0x400260b8
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b96      	ldr	r3, [pc, #600]	; (8004308 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d960      	bls.n	8004176 <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a94      	ldr	r2, [pc, #592]	; (800430c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d057      	beq.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a93      	ldr	r2, [pc, #588]	; (8004310 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d050      	beq.n	800416a <HAL_DMAEx_MultiBufferStart_IT+0x692>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a91      	ldr	r2, [pc, #580]	; (8004314 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d049      	beq.n	8004166 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a90      	ldr	r2, [pc, #576]	; (8004318 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d042      	beq.n	8004162 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a8e      	ldr	r2, [pc, #568]	; (800431c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d03a      	beq.n	800415c <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a8d      	ldr	r2, [pc, #564]	; (8004320 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d032      	beq.n	8004156 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a8b      	ldr	r2, [pc, #556]	; (8004324 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02a      	beq.n	8004150 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a8a      	ldr	r2, [pc, #552]	; (8004328 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d022      	beq.n	800414a <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a88      	ldr	r2, [pc, #544]	; (800432c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01a      	beq.n	8004144 <HAL_DMAEx_MultiBufferStart_IT+0x66c>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a87      	ldr	r2, [pc, #540]	; (8004330 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d012      	beq.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x666>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a85      	ldr	r2, [pc, #532]	; (8004334 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00a      	beq.n	8004138 <HAL_DMAEx_MultiBufferStart_IT+0x660>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a84      	ldr	r2, [pc, #528]	; (8004338 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d102      	bne.n	8004132 <HAL_DMAEx_MultiBufferStart_IT+0x65a>
 800412c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004130:	e01e      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004132:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004136:	e01b      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004138:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800413c:	e018      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800413e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004142:	e015      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004144:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004148:	e012      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800414a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800414e:	e00f      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004154:	e00c      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800415a:	e009      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800415c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004160:	e006      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004162:	2310      	movs	r3, #16
 8004164:	e004      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004166:	2310      	movs	r3, #16
 8004168:	e002      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800416a:	2310      	movs	r3, #16
 800416c:	e000      	b.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800416e:	2310      	movs	r3, #16
 8004170:	4a72      	ldr	r2, [pc, #456]	; (800433c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004172:	60d3      	str	r3, [r2, #12]
 8004174:	e05f      	b.n	8004236 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a64      	ldr	r2, [pc, #400]	; (800430c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d057      	beq.n	8004230 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a62      	ldr	r2, [pc, #392]	; (8004310 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d050      	beq.n	800422c <HAL_DMAEx_MultiBufferStart_IT+0x754>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a61      	ldr	r2, [pc, #388]	; (8004314 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d049      	beq.n	8004228 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a5f      	ldr	r2, [pc, #380]	; (8004318 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d042      	beq.n	8004224 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a5e      	ldr	r2, [pc, #376]	; (800431c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d03a      	beq.n	800421e <HAL_DMAEx_MultiBufferStart_IT+0x746>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a5c      	ldr	r2, [pc, #368]	; (8004320 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d032      	beq.n	8004218 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a5b      	ldr	r2, [pc, #364]	; (8004324 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d02a      	beq.n	8004212 <HAL_DMAEx_MultiBufferStart_IT+0x73a>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a59      	ldr	r2, [pc, #356]	; (8004328 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d022      	beq.n	800420c <HAL_DMAEx_MultiBufferStart_IT+0x734>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a58      	ldr	r2, [pc, #352]	; (800432c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d01a      	beq.n	8004206 <HAL_DMAEx_MultiBufferStart_IT+0x72e>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a56      	ldr	r2, [pc, #344]	; (8004330 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d012      	beq.n	8004200 <HAL_DMAEx_MultiBufferStart_IT+0x728>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a55      	ldr	r2, [pc, #340]	; (8004334 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00a      	beq.n	80041fa <HAL_DMAEx_MultiBufferStart_IT+0x722>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a53      	ldr	r2, [pc, #332]	; (8004338 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d102      	bne.n	80041f4 <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 80041ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041f2:	e01e      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80041f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041f8:	e01b      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80041fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041fe:	e018      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004200:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004204:	e015      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004206:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800420a:	e012      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 800420c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004210:	e00f      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004216:	e00c      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800421c:	e009      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 800421e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004222:	e006      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004224:	2310      	movs	r3, #16
 8004226:	e004      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004228:	2310      	movs	r3, #16
 800422a:	e002      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 800422c:	2310      	movs	r3, #16
 800422e:	e000      	b.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004230:	2310      	movs	r3, #16
 8004232:	4a42      	ldr	r2, [pc, #264]	; (800433c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004234:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	4b40      	ldr	r3, [pc, #256]	; (8004340 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800423e:	429a      	cmp	r2, r3
 8004240:	f240 8082 	bls.w	8004348 <HAL_DMAEx_MultiBufferStart_IT+0x870>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a30      	ldr	r2, [pc, #192]	; (800430c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d057      	beq.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x826>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2f      	ldr	r2, [pc, #188]	; (8004310 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d050      	beq.n	80042fa <HAL_DMAEx_MultiBufferStart_IT+0x822>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2d      	ldr	r2, [pc, #180]	; (8004314 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d049      	beq.n	80042f6 <HAL_DMAEx_MultiBufferStart_IT+0x81e>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2c      	ldr	r2, [pc, #176]	; (8004318 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d042      	beq.n	80042f2 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2a      	ldr	r2, [pc, #168]	; (800431c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d03a      	beq.n	80042ec <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a29      	ldr	r2, [pc, #164]	; (8004320 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d032      	beq.n	80042e6 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a27      	ldr	r2, [pc, #156]	; (8004324 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02a      	beq.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x808>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a26      	ldr	r2, [pc, #152]	; (8004328 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d022      	beq.n	80042da <HAL_DMAEx_MultiBufferStart_IT+0x802>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a24      	ldr	r2, [pc, #144]	; (800432c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01a      	beq.n	80042d4 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a23      	ldr	r2, [pc, #140]	; (8004330 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d012      	beq.n	80042ce <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a21      	ldr	r2, [pc, #132]	; (8004334 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00a      	beq.n	80042c8 <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a20      	ldr	r2, [pc, #128]	; (8004338 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d102      	bne.n	80042c2 <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 80042bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80042c0:	e01e      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042c6:	e01b      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80042cc:	e018      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80042d2:	e015      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80042d8:	e012      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042de:	e00f      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042e4:	e00c      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ea:	e009      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042f0:	e006      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042f2:	2308      	movs	r3, #8
 80042f4:	e004      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042f6:	2308      	movs	r3, #8
 80042f8:	e002      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042fa:	2308      	movs	r3, #8
 80042fc:	e000      	b.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80042fe:	2308      	movs	r3, #8
 8004300:	4a10      	ldr	r2, [pc, #64]	; (8004344 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8004302:	60d3      	str	r3, [r2, #12]
 8004304:	e16f      	b.n	80045e6 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8004306:	bf00      	nop
 8004308:	40026058 	.word	0x40026058
 800430c:	40026010 	.word	0x40026010
 8004310:	40026410 	.word	0x40026410
 8004314:	40026070 	.word	0x40026070
 8004318:	40026470 	.word	0x40026470
 800431c:	40026028 	.word	0x40026028
 8004320:	40026428 	.word	0x40026428
 8004324:	40026088 	.word	0x40026088
 8004328:	40026488 	.word	0x40026488
 800432c:	40026040 	.word	0x40026040
 8004330:	40026440 	.word	0x40026440
 8004334:	400260a0 	.word	0x400260a0
 8004338:	400264a0 	.word	0x400264a0
 800433c:	40026000 	.word	0x40026000
 8004340:	40026458 	.word	0x40026458
 8004344:	40026400 	.word	0x40026400
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	4b94      	ldr	r3, [pc, #592]	; (80045a0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d960      	bls.n	8004416 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a92      	ldr	r2, [pc, #584]	; (80045a4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d057      	beq.n	800440e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a91      	ldr	r2, [pc, #580]	; (80045a8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d050      	beq.n	800440a <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a8f      	ldr	r2, [pc, #572]	; (80045ac <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d049      	beq.n	8004406 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a8e      	ldr	r2, [pc, #568]	; (80045b0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d042      	beq.n	8004402 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a8c      	ldr	r2, [pc, #560]	; (80045b4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d03a      	beq.n	80043fc <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a8b      	ldr	r2, [pc, #556]	; (80045b8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d032      	beq.n	80043f6 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a89      	ldr	r2, [pc, #548]	; (80045bc <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d02a      	beq.n	80043f0 <HAL_DMAEx_MultiBufferStart_IT+0x918>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a88      	ldr	r2, [pc, #544]	; (80045c0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d022      	beq.n	80043ea <HAL_DMAEx_MultiBufferStart_IT+0x912>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a86      	ldr	r2, [pc, #536]	; (80045c4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01a      	beq.n	80043e4 <HAL_DMAEx_MultiBufferStart_IT+0x90c>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a85      	ldr	r2, [pc, #532]	; (80045c8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d012      	beq.n	80043de <HAL_DMAEx_MultiBufferStart_IT+0x906>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a83      	ldr	r2, [pc, #524]	; (80045cc <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00a      	beq.n	80043d8 <HAL_DMAEx_MultiBufferStart_IT+0x900>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a82      	ldr	r2, [pc, #520]	; (80045d0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d102      	bne.n	80043d2 <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 80043cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043d0:	e01e      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80043d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043d6:	e01b      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80043d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043dc:	e018      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80043de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043e2:	e015      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80043e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043e8:	e012      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80043ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ee:	e00f      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80043f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043f4:	e00c      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80043f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043fa:	e009      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80043fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004400:	e006      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004402:	2308      	movs	r3, #8
 8004404:	e004      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004406:	2308      	movs	r3, #8
 8004408:	e002      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800440a:	2308      	movs	r3, #8
 800440c:	e000      	b.n	8004410 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800440e:	2308      	movs	r3, #8
 8004410:	4a70      	ldr	r2, [pc, #448]	; (80045d4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8004412:	6093      	str	r3, [r2, #8]
 8004414:	e0e7      	b.n	80045e6 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	4b6e      	ldr	r3, [pc, #440]	; (80045d8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800441e:	429a      	cmp	r2, r3
 8004420:	d960      	bls.n	80044e4 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a5f      	ldr	r2, [pc, #380]	; (80045a4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d057      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5d      	ldr	r2, [pc, #372]	; (80045a8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d050      	beq.n	80044d8 <HAL_DMAEx_MultiBufferStart_IT+0xa00>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a5c      	ldr	r2, [pc, #368]	; (80045ac <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d049      	beq.n	80044d4 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5a      	ldr	r2, [pc, #360]	; (80045b0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d042      	beq.n	80044d0 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a59      	ldr	r2, [pc, #356]	; (80045b4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d03a      	beq.n	80044ca <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a57      	ldr	r2, [pc, #348]	; (80045b8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d032      	beq.n	80044c4 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a56      	ldr	r2, [pc, #344]	; (80045bc <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d02a      	beq.n	80044be <HAL_DMAEx_MultiBufferStart_IT+0x9e6>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a54      	ldr	r2, [pc, #336]	; (80045c0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d022      	beq.n	80044b8 <HAL_DMAEx_MultiBufferStart_IT+0x9e0>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a53      	ldr	r2, [pc, #332]	; (80045c4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d01a      	beq.n	80044b2 <HAL_DMAEx_MultiBufferStart_IT+0x9da>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a51      	ldr	r2, [pc, #324]	; (80045c8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d012      	beq.n	80044ac <HAL_DMAEx_MultiBufferStart_IT+0x9d4>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a50      	ldr	r2, [pc, #320]	; (80045cc <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00a      	beq.n	80044a6 <HAL_DMAEx_MultiBufferStart_IT+0x9ce>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a4e      	ldr	r2, [pc, #312]	; (80045d0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d102      	bne.n	80044a0 <HAL_DMAEx_MultiBufferStart_IT+0x9c8>
 800449a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800449e:	e01e      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a4:	e01b      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044aa:	e018      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044b0:	e015      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044b6:	e012      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044bc:	e00f      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044c2:	e00c      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044c8:	e009      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ce:	e006      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044d0:	2308      	movs	r3, #8
 80044d2:	e004      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044d4:	2308      	movs	r3, #8
 80044d6:	e002      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044d8:	2308      	movs	r3, #8
 80044da:	e000      	b.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80044dc:	2308      	movs	r3, #8
 80044de:	4a3f      	ldr	r2, [pc, #252]	; (80045dc <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80044e0:	60d3      	str	r3, [r2, #12]
 80044e2:	e080      	b.n	80045e6 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2e      	ldr	r2, [pc, #184]	; (80045a4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d078      	beq.n	80045e0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2d      	ldr	r2, [pc, #180]	; (80045a8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d050      	beq.n	800459a <HAL_DMAEx_MultiBufferStart_IT+0xac2>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a2b      	ldr	r2, [pc, #172]	; (80045ac <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d049      	beq.n	8004596 <HAL_DMAEx_MultiBufferStart_IT+0xabe>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2a      	ldr	r2, [pc, #168]	; (80045b0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d042      	beq.n	8004592 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a28      	ldr	r2, [pc, #160]	; (80045b4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d03a      	beq.n	800458c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a27      	ldr	r2, [pc, #156]	; (80045b8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d032      	beq.n	8004586 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a25      	ldr	r2, [pc, #148]	; (80045bc <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d02a      	beq.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a24      	ldr	r2, [pc, #144]	; (80045c0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d022      	beq.n	800457a <HAL_DMAEx_MultiBufferStart_IT+0xaa2>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a22      	ldr	r2, [pc, #136]	; (80045c4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01a      	beq.n	8004574 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a21      	ldr	r2, [pc, #132]	; (80045c8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d012      	beq.n	800456e <HAL_DMAEx_MultiBufferStart_IT+0xa96>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00a      	beq.n	8004568 <HAL_DMAEx_MultiBufferStart_IT+0xa90>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1e      	ldr	r2, [pc, #120]	; (80045d0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d102      	bne.n	8004562 <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 800455c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004560:	e03f      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004566:	e03c      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004568:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800456c:	e039      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800456e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004572:	e036      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004574:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004578:	e033      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800457a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800457e:	e030      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004584:	e02d      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800458a:	e02a      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800458c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004590:	e027      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004592:	2308      	movs	r3, #8
 8004594:	e025      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004596:	2308      	movs	r3, #8
 8004598:	e023      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800459a:	2308      	movs	r3, #8
 800459c:	e021      	b.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800459e:	bf00      	nop
 80045a0:	400260b8 	.word	0x400260b8
 80045a4:	40026010 	.word	0x40026010
 80045a8:	40026410 	.word	0x40026410
 80045ac:	40026070 	.word	0x40026070
 80045b0:	40026470 	.word	0x40026470
 80045b4:	40026028 	.word	0x40026028
 80045b8:	40026428 	.word	0x40026428
 80045bc:	40026088 	.word	0x40026088
 80045c0:	40026488 	.word	0x40026488
 80045c4:	40026040 	.word	0x40026040
 80045c8:	40026440 	.word	0x40026440
 80045cc:	400260a0 	.word	0x400260a0
 80045d0:	400264a0 	.word	0x400264a0
 80045d4:	40026400 	.word	0x40026400
 80045d8:	40026058 	.word	0x40026058
 80045dc:	40026000 	.word	0x40026000
 80045e0:	2308      	movs	r3, #8
 80045e2:	4a9a      	ldr	r2, [pc, #616]	; (800484c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80045e4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	4b98      	ldr	r3, [pc, #608]	; (8004850 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d960      	bls.n	80046b4 <HAL_DMAEx_MultiBufferStart_IT+0xbdc>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a97      	ldr	r2, [pc, #604]	; (8004854 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d057      	beq.n	80046ac <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a95      	ldr	r2, [pc, #596]	; (8004858 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d050      	beq.n	80046a8 <HAL_DMAEx_MultiBufferStart_IT+0xbd0>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a94      	ldr	r2, [pc, #592]	; (800485c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d049      	beq.n	80046a4 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a92      	ldr	r2, [pc, #584]	; (8004860 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d042      	beq.n	80046a0 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a91      	ldr	r2, [pc, #580]	; (8004864 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d03a      	beq.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a8f      	ldr	r2, [pc, #572]	; (8004868 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d032      	beq.n	8004694 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a8e      	ldr	r2, [pc, #568]	; (800486c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d02a      	beq.n	800468e <HAL_DMAEx_MultiBufferStart_IT+0xbb6>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a8c      	ldr	r2, [pc, #560]	; (8004870 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a8b      	ldr	r2, [pc, #556]	; (8004874 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01a      	beq.n	8004682 <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a89      	ldr	r2, [pc, #548]	; (8004878 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d012      	beq.n	800467c <HAL_DMAEx_MultiBufferStart_IT+0xba4>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a88      	ldr	r2, [pc, #544]	; (800487c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00a      	beq.n	8004676 <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a86      	ldr	r2, [pc, #536]	; (8004880 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d102      	bne.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
 800466a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800466e:	e01e      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004674:	e01b      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004676:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800467a:	e018      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800467c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004680:	e015      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004682:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004686:	e012      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800468c:	e00f      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800468e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004692:	e00c      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004698:	e009      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800469a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800469e:	e006      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 80046a0:	2304      	movs	r3, #4
 80046a2:	e004      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 80046a4:	2304      	movs	r3, #4
 80046a6:	e002      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 80046a8:	2304      	movs	r3, #4
 80046aa:	e000      	b.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 80046ac:	2304      	movs	r3, #4
 80046ae:	4a75      	ldr	r2, [pc, #468]	; (8004884 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80046b0:	60d3      	str	r3, [r2, #12]
 80046b2:	e151      	b.n	8004958 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b73      	ldr	r3, [pc, #460]	; (8004888 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80046bc:	429a      	cmp	r2, r3
 80046be:	d960      	bls.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0xcaa>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a63      	ldr	r2, [pc, #396]	; (8004854 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d057      	beq.n	800477a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a62      	ldr	r2, [pc, #392]	; (8004858 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d050      	beq.n	8004776 <HAL_DMAEx_MultiBufferStart_IT+0xc9e>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a60      	ldr	r2, [pc, #384]	; (800485c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d049      	beq.n	8004772 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a5f      	ldr	r2, [pc, #380]	; (8004860 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d042      	beq.n	800476e <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a5d      	ldr	r2, [pc, #372]	; (8004864 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d03a      	beq.n	8004768 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a5c      	ldr	r2, [pc, #368]	; (8004868 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d032      	beq.n	8004762 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a5a      	ldr	r2, [pc, #360]	; (800486c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d02a      	beq.n	800475c <HAL_DMAEx_MultiBufferStart_IT+0xc84>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a59      	ldr	r2, [pc, #356]	; (8004870 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d022      	beq.n	8004756 <HAL_DMAEx_MultiBufferStart_IT+0xc7e>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a57      	ldr	r2, [pc, #348]	; (8004874 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01a      	beq.n	8004750 <HAL_DMAEx_MultiBufferStart_IT+0xc78>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a56      	ldr	r2, [pc, #344]	; (8004878 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d012      	beq.n	800474a <HAL_DMAEx_MultiBufferStart_IT+0xc72>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a54      	ldr	r2, [pc, #336]	; (800487c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00a      	beq.n	8004744 <HAL_DMAEx_MultiBufferStart_IT+0xc6c>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a53      	ldr	r2, [pc, #332]	; (8004880 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d102      	bne.n	800473e <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004738:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800473c:	e01e      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800473e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004742:	e01b      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004744:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004748:	e018      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800474a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800474e:	e015      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004750:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004754:	e012      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800475a:	e00f      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800475c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004760:	e00c      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004766:	e009      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800476c:	e006      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800476e:	2304      	movs	r3, #4
 8004770:	e004      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004772:	2304      	movs	r3, #4
 8004774:	e002      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004776:	2304      	movs	r3, #4
 8004778:	e000      	b.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800477a:	2304      	movs	r3, #4
 800477c:	4a41      	ldr	r2, [pc, #260]	; (8004884 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800477e:	6093      	str	r3, [r2, #8]
 8004780:	e0ea      	b.n	8004958 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	4b40      	ldr	r3, [pc, #256]	; (800488c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800478a:	429a      	cmp	r2, r3
 800478c:	f240 8084 	bls.w	8004898 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d07a      	beq.n	8004890 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2e      	ldr	r2, [pc, #184]	; (8004858 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d050      	beq.n	8004846 <HAL_DMAEx_MultiBufferStart_IT+0xd6e>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2c      	ldr	r2, [pc, #176]	; (800485c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d049      	beq.n	8004842 <HAL_DMAEx_MultiBufferStart_IT+0xd6a>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2b      	ldr	r2, [pc, #172]	; (8004860 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d042      	beq.n	800483e <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a29      	ldr	r2, [pc, #164]	; (8004864 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d03a      	beq.n	8004838 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a28      	ldr	r2, [pc, #160]	; (8004868 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d032      	beq.n	8004832 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a26      	ldr	r2, [pc, #152]	; (800486c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d02a      	beq.n	800482c <HAL_DMAEx_MultiBufferStart_IT+0xd54>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a25      	ldr	r2, [pc, #148]	; (8004870 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d022      	beq.n	8004826 <HAL_DMAEx_MultiBufferStart_IT+0xd4e>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a23      	ldr	r2, [pc, #140]	; (8004874 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01a      	beq.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0xd48>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a22      	ldr	r2, [pc, #136]	; (8004878 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d012      	beq.n	800481a <HAL_DMAEx_MultiBufferStart_IT+0xd42>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a20      	ldr	r2, [pc, #128]	; (800487c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00a      	beq.n	8004814 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d102      	bne.n	800480e <HAL_DMAEx_MultiBufferStart_IT+0xd36>
 8004808:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800480c:	e041      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800480e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004812:	e03e      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004814:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004818:	e03b      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800481a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800481e:	e038      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004820:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004824:	e035      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800482a:	e032      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800482c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004830:	e02f      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004836:	e02c      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800483c:	e029      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800483e:	2304      	movs	r3, #4
 8004840:	e027      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004842:	2304      	movs	r3, #4
 8004844:	e025      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004846:	2304      	movs	r3, #4
 8004848:	e023      	b.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800484a:	bf00      	nop
 800484c:	40026000 	.word	0x40026000
 8004850:	40026458 	.word	0x40026458
 8004854:	40026010 	.word	0x40026010
 8004858:	40026410 	.word	0x40026410
 800485c:	40026070 	.word	0x40026070
 8004860:	40026470 	.word	0x40026470
 8004864:	40026028 	.word	0x40026028
 8004868:	40026428 	.word	0x40026428
 800486c:	40026088 	.word	0x40026088
 8004870:	40026488 	.word	0x40026488
 8004874:	40026040 	.word	0x40026040
 8004878:	40026440 	.word	0x40026440
 800487c:	400260a0 	.word	0x400260a0
 8004880:	400264a0 	.word	0x400264a0
 8004884:	40026400 	.word	0x40026400
 8004888:	400260b8 	.word	0x400260b8
 800488c:	40026058 	.word	0x40026058
 8004890:	2304      	movs	r3, #4
 8004892:	4a94      	ldr	r2, [pc, #592]	; (8004ae4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004894:	60d3      	str	r3, [r2, #12]
 8004896:	e05f      	b.n	8004958 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a92      	ldr	r2, [pc, #584]	; (8004ae8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d057      	beq.n	8004952 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a91      	ldr	r2, [pc, #580]	; (8004aec <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d050      	beq.n	800494e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a8f      	ldr	r2, [pc, #572]	; (8004af0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d049      	beq.n	800494a <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a8e      	ldr	r2, [pc, #568]	; (8004af4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d042      	beq.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a8c      	ldr	r2, [pc, #560]	; (8004af8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d03a      	beq.n	8004940 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a8b      	ldr	r2, [pc, #556]	; (8004afc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d032      	beq.n	800493a <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a89      	ldr	r2, [pc, #548]	; (8004b00 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d02a      	beq.n	8004934 <HAL_DMAEx_MultiBufferStart_IT+0xe5c>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a88      	ldr	r2, [pc, #544]	; (8004b04 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <HAL_DMAEx_MultiBufferStart_IT+0xe56>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a86      	ldr	r2, [pc, #536]	; (8004b08 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01a      	beq.n	8004928 <HAL_DMAEx_MultiBufferStart_IT+0xe50>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a85      	ldr	r2, [pc, #532]	; (8004b0c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d012      	beq.n	8004922 <HAL_DMAEx_MultiBufferStart_IT+0xe4a>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a83      	ldr	r2, [pc, #524]	; (8004b10 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00a      	beq.n	800491c <HAL_DMAEx_MultiBufferStart_IT+0xe44>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a82      	ldr	r2, [pc, #520]	; (8004b14 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d102      	bne.n	8004916 <HAL_DMAEx_MultiBufferStart_IT+0xe3e>
 8004910:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004914:	e01e      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800491a:	e01b      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800491c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004920:	e018      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004922:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004926:	e015      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004928:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800492c:	e012      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800492e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004932:	e00f      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004938:	e00c      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800493a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800493e:	e009      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004944:	e006      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004946:	2304      	movs	r3, #4
 8004948:	e004      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800494a:	2304      	movs	r3, #4
 800494c:	e002      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800494e:	2304      	movs	r3, #4
 8004950:	e000      	b.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004952:	2304      	movs	r3, #4
 8004954:	4a63      	ldr	r2, [pc, #396]	; (8004ae4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004956:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	4b6e      	ldr	r3, [pc, #440]	; (8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8004960:	429a      	cmp	r2, r3
 8004962:	d95c      	bls.n	8004a1e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a5f      	ldr	r2, [pc, #380]	; (8004ae8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d053      	beq.n	8004a16 <HAL_DMAEx_MultiBufferStart_IT+0xf3e>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a5e      	ldr	r2, [pc, #376]	; (8004aec <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d04c      	beq.n	8004a12 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5c      	ldr	r2, [pc, #368]	; (8004af0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d045      	beq.n	8004a0e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a5b      	ldr	r2, [pc, #364]	; (8004af4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d03e      	beq.n	8004a0a <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a59      	ldr	r2, [pc, #356]	; (8004af8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d037      	beq.n	8004a06 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a58      	ldr	r2, [pc, #352]	; (8004afc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d030      	beq.n	8004a02 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a56      	ldr	r2, [pc, #344]	; (8004b00 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d029      	beq.n	80049fe <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a55      	ldr	r2, [pc, #340]	; (8004b04 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d022      	beq.n	80049fa <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a53      	ldr	r2, [pc, #332]	; (8004b08 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d01a      	beq.n	80049f4 <HAL_DMAEx_MultiBufferStart_IT+0xf1c>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a52      	ldr	r2, [pc, #328]	; (8004b0c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d012      	beq.n	80049ee <HAL_DMAEx_MultiBufferStart_IT+0xf16>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a50      	ldr	r2, [pc, #320]	; (8004b10 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00a      	beq.n	80049e8 <HAL_DMAEx_MultiBufferStart_IT+0xf10>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a4f      	ldr	r2, [pc, #316]	; (8004b14 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d102      	bne.n	80049e2 <HAL_DMAEx_MultiBufferStart_IT+0xf0a>
 80049dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049e0:	e01a      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80049e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049e6:	e017      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80049e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049ec:	e014      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80049ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049f2:	e011      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80049f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049f8:	e00e      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80049fa:	2340      	movs	r3, #64	; 0x40
 80049fc:	e00c      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80049fe:	2340      	movs	r3, #64	; 0x40
 8004a00:	e00a      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004a02:	2340      	movs	r3, #64	; 0x40
 8004a04:	e008      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004a06:	2340      	movs	r3, #64	; 0x40
 8004a08:	e006      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e004      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e002      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004a16:	2301      	movs	r3, #1
 8004a18:	4a40      	ldr	r2, [pc, #256]	; (8004b1c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004a1a:	60d3      	str	r3, [r2, #12]
 8004a1c:	e141      	b.n	8004ca2 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d97c      	bls.n	8004b24 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a2e      	ldr	r2, [pc, #184]	; (8004ae8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d053      	beq.n	8004adc <HAL_DMAEx_MultiBufferStart_IT+0x1004>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a2c      	ldr	r2, [pc, #176]	; (8004aec <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d04c      	beq.n	8004ad8 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2b      	ldr	r2, [pc, #172]	; (8004af0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d045      	beq.n	8004ad4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a29      	ldr	r2, [pc, #164]	; (8004af4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d03e      	beq.n	8004ad0 <HAL_DMAEx_MultiBufferStart_IT+0xff8>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a28      	ldr	r2, [pc, #160]	; (8004af8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d037      	beq.n	8004acc <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a26      	ldr	r2, [pc, #152]	; (8004afc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d030      	beq.n	8004ac8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a25      	ldr	r2, [pc, #148]	; (8004b00 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d029      	beq.n	8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0xfec>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a23      	ldr	r2, [pc, #140]	; (8004b04 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d022      	beq.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d01a      	beq.n	8004aba <HAL_DMAEx_MultiBufferStart_IT+0xfe2>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a20      	ldr	r2, [pc, #128]	; (8004b0c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d012      	beq.n	8004ab4 <HAL_DMAEx_MultiBufferStart_IT+0xfdc>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00a      	beq.n	8004aae <HAL_DMAEx_MultiBufferStart_IT+0xfd6>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d102      	bne.n	8004aa8 <HAL_DMAEx_MultiBufferStart_IT+0xfd0>
 8004aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aa6:	e01a      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004aa8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004aac:	e017      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab2:	e014      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab8:	e011      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004abe:	e00e      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	e00c      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004ac4:	2340      	movs	r3, #64	; 0x40
 8004ac6:	e00a      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004ac8:	2340      	movs	r3, #64	; 0x40
 8004aca:	e008      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004acc:	2340      	movs	r3, #64	; 0x40
 8004ace:	e006      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e004      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e002      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004adc:	2301      	movs	r3, #1
 8004ade:	4a0f      	ldr	r2, [pc, #60]	; (8004b1c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004ae0:	6093      	str	r3, [r2, #8]
 8004ae2:	e0de      	b.n	8004ca2 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8004ae4:	40026000 	.word	0x40026000
 8004ae8:	40026010 	.word	0x40026010
 8004aec:	40026410 	.word	0x40026410
 8004af0:	40026070 	.word	0x40026070
 8004af4:	40026470 	.word	0x40026470
 8004af8:	40026028 	.word	0x40026028
 8004afc:	40026428 	.word	0x40026428
 8004b00:	40026088 	.word	0x40026088
 8004b04:	40026488 	.word	0x40026488
 8004b08:	40026040 	.word	0x40026040
 8004b0c:	40026440 	.word	0x40026440
 8004b10:	400260a0 	.word	0x400260a0
 8004b14:	400264a0 	.word	0x400264a0
 8004b18:	40026458 	.word	0x40026458
 8004b1c:	40026400 	.word	0x40026400
 8004b20:	400260b8 	.word	0x400260b8
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b78      	ldr	r3, [pc, #480]	; (8004d0c <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d95c      	bls.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a76      	ldr	r2, [pc, #472]	; (8004d10 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d053      	beq.n	8004be2 <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a75      	ldr	r2, [pc, #468]	; (8004d14 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d04c      	beq.n	8004bde <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a73      	ldr	r2, [pc, #460]	; (8004d18 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d045      	beq.n	8004bda <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a72      	ldr	r2, [pc, #456]	; (8004d1c <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d03e      	beq.n	8004bd6 <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a70      	ldr	r2, [pc, #448]	; (8004d20 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d037      	beq.n	8004bd2 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6f      	ldr	r2, [pc, #444]	; (8004d24 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d030      	beq.n	8004bce <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6d      	ldr	r2, [pc, #436]	; (8004d28 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d029      	beq.n	8004bca <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6c      	ldr	r2, [pc, #432]	; (8004d2c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d022      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6a      	ldr	r2, [pc, #424]	; (8004d30 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d01a      	beq.n	8004bc0 <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a69      	ldr	r2, [pc, #420]	; (8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d012      	beq.n	8004bba <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a67      	ldr	r2, [pc, #412]	; (8004d38 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a66      	ldr	r2, [pc, #408]	; (8004d3c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d102      	bne.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
 8004ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bac:	e01a      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bb2:	e017      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bb8:	e014      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bbe:	e011      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bc4:	e00e      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bc6:	2340      	movs	r3, #64	; 0x40
 8004bc8:	e00c      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bca:	2340      	movs	r3, #64	; 0x40
 8004bcc:	e00a      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bce:	2340      	movs	r3, #64	; 0x40
 8004bd0:	e008      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bd2:	2340      	movs	r3, #64	; 0x40
 8004bd4:	e006      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e004      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e002      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004be2:	2301      	movs	r3, #1
 8004be4:	4a56      	ldr	r2, [pc, #344]	; (8004d40 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004be6:	60d3      	str	r3, [r2, #12]
 8004be8:	e05b      	b.n	8004ca2 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a48      	ldr	r2, [pc, #288]	; (8004d10 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d053      	beq.n	8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x11c4>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a46      	ldr	r2, [pc, #280]	; (8004d14 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d04c      	beq.n	8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a45      	ldr	r2, [pc, #276]	; (8004d18 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d045      	beq.n	8004c94 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a43      	ldr	r2, [pc, #268]	; (8004d1c <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d03e      	beq.n	8004c90 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a42      	ldr	r2, [pc, #264]	; (8004d20 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d037      	beq.n	8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a40      	ldr	r2, [pc, #256]	; (8004d24 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d030      	beq.n	8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a3f      	ldr	r2, [pc, #252]	; (8004d28 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d029      	beq.n	8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a3d      	ldr	r2, [pc, #244]	; (8004d2c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d022      	beq.n	8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a3c      	ldr	r2, [pc, #240]	; (8004d30 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d01a      	beq.n	8004c7a <HAL_DMAEx_MultiBufferStart_IT+0x11a2>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a3a      	ldr	r2, [pc, #232]	; (8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d012      	beq.n	8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x119c>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a39      	ldr	r2, [pc, #228]	; (8004d38 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00a      	beq.n	8004c6e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a37      	ldr	r2, [pc, #220]	; (8004d3c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d102      	bne.n	8004c68 <HAL_DMAEx_MultiBufferStart_IT+0x1190>
 8004c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c66:	e01a      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c6c:	e017      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c72:	e014      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c78:	e011      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c7e:	e00e      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c80:	2340      	movs	r3, #64	; 0x40
 8004c82:	e00c      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c84:	2340      	movs	r3, #64	; 0x40
 8004c86:	e00a      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c88:	2340      	movs	r3, #64	; 0x40
 8004c8a:	e008      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c8c:	2340      	movs	r3, #64	; 0x40
 8004c8e:	e006      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e004      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e002      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004ca0:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0216 	orr.w	r2, r2, #22
 8004cb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <HAL_DMAEx_MultiBufferStart_IT+0x11fa>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <HAL_DMAEx_MultiBufferStart_IT+0x120a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0208 	orr.w	r2, r2, #8
 8004ce0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e005      	b.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x1228>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40026058 	.word	0x40026058
 8004d10:	40026010 	.word	0x40026010
 8004d14:	40026410 	.word	0x40026410
 8004d18:	40026070 	.word	0x40026070
 8004d1c:	40026470 	.word	0x40026470
 8004d20:	40026028 	.word	0x40026028
 8004d24:	40026428 	.word	0x40026428
 8004d28:	40026088 	.word	0x40026088
 8004d2c:	40026488 	.word	0x40026488
 8004d30:	40026040 	.word	0x40026040
 8004d34:	40026440 	.word	0x40026440
 8004d38:	400260a0 	.word	0x400260a0
 8004d3c:	400264a0 	.word	0x400264a0
 8004d40:	40026000 	.word	0x40026000

08004d44 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	60da      	str	r2, [r3, #12]
 8004d60:	e003      	b.n	8004d6a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d108      	bne.n	8004da8 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004da6:	e007      	b.n	8004db8 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b089      	sub	sp, #36	; 0x24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	e175      	b.n	80050d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004de4:	2201      	movs	r2, #1
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	f040 8164 	bne.w	80050ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d00b      	beq.n	8004e22 <HAL_GPIO_Init+0x5e>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d007      	beq.n	8004e22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e16:	2b11      	cmp	r3, #17
 8004e18:	d003      	beq.n	8004e22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b12      	cmp	r3, #18
 8004e20:	d130      	bne.n	8004e84 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43db      	mvns	r3, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4013      	ands	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e58:	2201      	movs	r2, #1
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f003 0201 	and.w	r2, r3, #1
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	2203      	movs	r2, #3
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d003      	beq.n	8004ec4 <HAL_GPIO_Init+0x100>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b12      	cmp	r3, #18
 8004ec2:	d123      	bne.n	8004f0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	08da      	lsrs	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3208      	adds	r2, #8
 8004ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	220f      	movs	r2, #15
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	08da      	lsrs	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3208      	adds	r2, #8
 8004f06:	69b9      	ldr	r1, [r7, #24]
 8004f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	2203      	movs	r2, #3
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4013      	ands	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0203 	and.w	r2, r3, #3
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80be 	beq.w	80050ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4e:	4b65      	ldr	r3, [pc, #404]	; (80050e4 <HAL_GPIO_Init+0x320>)
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	4a64      	ldr	r2, [pc, #400]	; (80050e4 <HAL_GPIO_Init+0x320>)
 8004f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f58:	6453      	str	r3, [r2, #68]	; 0x44
 8004f5a:	4b62      	ldr	r3, [pc, #392]	; (80050e4 <HAL_GPIO_Init+0x320>)
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004f66:	4a60      	ldr	r2, [pc, #384]	; (80050e8 <HAL_GPIO_Init+0x324>)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	089b      	lsrs	r3, r3, #2
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	220f      	movs	r2, #15
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a57      	ldr	r2, [pc, #348]	; (80050ec <HAL_GPIO_Init+0x328>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d037      	beq.n	8005002 <HAL_GPIO_Init+0x23e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a56      	ldr	r2, [pc, #344]	; (80050f0 <HAL_GPIO_Init+0x32c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d031      	beq.n	8004ffe <HAL_GPIO_Init+0x23a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a55      	ldr	r2, [pc, #340]	; (80050f4 <HAL_GPIO_Init+0x330>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d02b      	beq.n	8004ffa <HAL_GPIO_Init+0x236>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a54      	ldr	r2, [pc, #336]	; (80050f8 <HAL_GPIO_Init+0x334>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d025      	beq.n	8004ff6 <HAL_GPIO_Init+0x232>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a53      	ldr	r2, [pc, #332]	; (80050fc <HAL_GPIO_Init+0x338>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01f      	beq.n	8004ff2 <HAL_GPIO_Init+0x22e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a52      	ldr	r2, [pc, #328]	; (8005100 <HAL_GPIO_Init+0x33c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d019      	beq.n	8004fee <HAL_GPIO_Init+0x22a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a51      	ldr	r2, [pc, #324]	; (8005104 <HAL_GPIO_Init+0x340>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_GPIO_Init+0x226>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a50      	ldr	r2, [pc, #320]	; (8005108 <HAL_GPIO_Init+0x344>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00d      	beq.n	8004fe6 <HAL_GPIO_Init+0x222>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a4f      	ldr	r2, [pc, #316]	; (800510c <HAL_GPIO_Init+0x348>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <HAL_GPIO_Init+0x21e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a4e      	ldr	r2, [pc, #312]	; (8005110 <HAL_GPIO_Init+0x34c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_GPIO_Init+0x21a>
 8004fda:	2309      	movs	r3, #9
 8004fdc:	e012      	b.n	8005004 <HAL_GPIO_Init+0x240>
 8004fde:	230a      	movs	r3, #10
 8004fe0:	e010      	b.n	8005004 <HAL_GPIO_Init+0x240>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	e00e      	b.n	8005004 <HAL_GPIO_Init+0x240>
 8004fe6:	2307      	movs	r3, #7
 8004fe8:	e00c      	b.n	8005004 <HAL_GPIO_Init+0x240>
 8004fea:	2306      	movs	r3, #6
 8004fec:	e00a      	b.n	8005004 <HAL_GPIO_Init+0x240>
 8004fee:	2305      	movs	r3, #5
 8004ff0:	e008      	b.n	8005004 <HAL_GPIO_Init+0x240>
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	e006      	b.n	8005004 <HAL_GPIO_Init+0x240>
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e004      	b.n	8005004 <HAL_GPIO_Init+0x240>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e002      	b.n	8005004 <HAL_GPIO_Init+0x240>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_GPIO_Init+0x240>
 8005002:	2300      	movs	r3, #0
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	f002 0203 	and.w	r2, r2, #3
 800500a:	0092      	lsls	r2, r2, #2
 800500c:	4093      	lsls	r3, r2
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4313      	orrs	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005014:	4934      	ldr	r1, [pc, #208]	; (80050e8 <HAL_GPIO_Init+0x324>)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	089b      	lsrs	r3, r3, #2
 800501a:	3302      	adds	r3, #2
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005022:	4b3c      	ldr	r3, [pc, #240]	; (8005114 <HAL_GPIO_Init+0x350>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	43db      	mvns	r3, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4013      	ands	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005046:	4a33      	ldr	r2, [pc, #204]	; (8005114 <HAL_GPIO_Init+0x350>)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800504c:	4b31      	ldr	r3, [pc, #196]	; (8005114 <HAL_GPIO_Init+0x350>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005070:	4a28      	ldr	r2, [pc, #160]	; (8005114 <HAL_GPIO_Init+0x350>)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005076:	4b27      	ldr	r3, [pc, #156]	; (8005114 <HAL_GPIO_Init+0x350>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800509a:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <HAL_GPIO_Init+0x350>)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050a0:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <HAL_GPIO_Init+0x350>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050c4:	4a13      	ldr	r2, [pc, #76]	; (8005114 <HAL_GPIO_Init+0x350>)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3301      	adds	r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2b0f      	cmp	r3, #15
 80050d4:	f67f ae86 	bls.w	8004de4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80050d8:	bf00      	nop
 80050da:	3724      	adds	r7, #36	; 0x24
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40023800 	.word	0x40023800
 80050e8:	40013800 	.word	0x40013800
 80050ec:	40020000 	.word	0x40020000
 80050f0:	40020400 	.word	0x40020400
 80050f4:	40020800 	.word	0x40020800
 80050f8:	40020c00 	.word	0x40020c00
 80050fc:	40021000 	.word	0x40021000
 8005100:	40021400 	.word	0x40021400
 8005104:	40021800 	.word	0x40021800
 8005108:	40021c00 	.word	0x40021c00
 800510c:	40022000 	.word	0x40022000
 8005110:	40022400 	.word	0x40022400
 8005114:	40013c00 	.word	0x40013c00

08005118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
 8005124:	4613      	mov	r3, r2
 8005126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005128:	787b      	ldrb	r3, [r7, #1]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800512e:	887a      	ldrh	r2, [r7, #2]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005134:	e003      	b.n	800513e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005136:	887b      	ldrh	r3, [r7, #2]
 8005138:	041a      	lsls	r2, r3, #16
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	619a      	str	r2, [r3, #24]
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e07f      	b.n	800525e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f8a9 	bl	80052ca <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	; 0x24
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800519c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d107      	bne.n	80051c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	e006      	b.n	80051d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80051d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d104      	bne.n	80051e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <HAL_I2C_Init+0x11c>)
 80051f2:	430b      	orrs	r3, r1
 80051f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005204:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	ea42 0103 	orr.w	r1, r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69d9      	ldr	r1, [r3, #28]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	02008000 	.word	0x02008000

0800526c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e021      	b.n	80052c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2224      	movs	r2, #36	; 0x24
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f821 	bl	80052de <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	461a      	mov	r2, r3
 8005302:	4603      	mov	r3, r0
 8005304:	817b      	strh	r3, [r7, #10]
 8005306:	460b      	mov	r3, r1
 8005308:	813b      	strh	r3, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b20      	cmp	r3, #32
 8005318:	f040 80f9 	bne.w	800550e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_I2C_Mem_Write+0x34>
 8005322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0ed      	b.n	8005510 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_I2C_Mem_Write+0x4e>
 800533e:	2302      	movs	r3, #2
 8005340:	e0e6      	b.n	8005510 <HAL_I2C_Mem_Write+0x21c>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800534a:	f7fd fafd 	bl	8002948 <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2319      	movs	r3, #25
 8005356:	2201      	movs	r2, #1
 8005358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fad1 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0d1      	b.n	8005510 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2221      	movs	r2, #33	; 0x21
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2240      	movs	r2, #64	; 0x40
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a3a      	ldr	r2, [r7, #32]
 8005386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800538c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005394:	88f8      	ldrh	r0, [r7, #6]
 8005396:	893a      	ldrh	r2, [r7, #8]
 8005398:	8979      	ldrh	r1, [r7, #10]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	4603      	mov	r3, r0
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f9e1 	bl	800576c <I2C_RequestMemoryWrite>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0a9      	b.n	8005510 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2bff      	cmp	r3, #255	; 0xff
 80053c4:	d90e      	bls.n	80053e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	22ff      	movs	r2, #255	; 0xff
 80053ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	8979      	ldrh	r1, [r7, #10]
 80053d4:	2300      	movs	r3, #0
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fbb3 	bl	8005b48 <I2C_TransferConfig>
 80053e2:	e00f      	b.n	8005404 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	8979      	ldrh	r1, [r7, #10]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fba2 	bl	8005b48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fabb 	bl	8005984 <I2C_WaitOnTXISFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e07b      	b.n	8005510 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	781a      	ldrb	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d034      	beq.n	80054bc <HAL_I2C_Mem_Write+0x1c8>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d130      	bne.n	80054bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	2200      	movs	r2, #0
 8005462:	2180      	movs	r1, #128	; 0x80
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 fa4d 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e04d      	b.n	8005510 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005478:	b29b      	uxth	r3, r3
 800547a:	2bff      	cmp	r3, #255	; 0xff
 800547c:	d90e      	bls.n	800549c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	22ff      	movs	r2, #255	; 0xff
 8005482:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005488:	b2da      	uxtb	r2, r3
 800548a:	8979      	ldrh	r1, [r7, #10]
 800548c:	2300      	movs	r3, #0
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fb57 	bl	8005b48 <I2C_TransferConfig>
 800549a:	e00f      	b.n	80054bc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	8979      	ldrh	r1, [r7, #10]
 80054ae:	2300      	movs	r3, #0
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fb46 	bl	8005b48 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d19e      	bne.n	8005404 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 fa9a 	bl	8005a04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e01a      	b.n	8005510 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2220      	movs	r2, #32
 80054e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6859      	ldr	r1, [r3, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <HAL_I2C_Mem_Write+0x224>)
 80054ee:	400b      	ands	r3, r1
 80054f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e000      	b.n	8005510 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800550e:	2302      	movs	r3, #2
  }
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	fe00e800 	.word	0xfe00e800

0800551c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	4608      	mov	r0, r1
 8005526:	4611      	mov	r1, r2
 8005528:	461a      	mov	r2, r3
 800552a:	4603      	mov	r3, r0
 800552c:	817b      	strh	r3, [r7, #10]
 800552e:	460b      	mov	r3, r1
 8005530:	813b      	strh	r3, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b20      	cmp	r3, #32
 8005540:	f040 80fd 	bne.w	800573e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_I2C_Mem_Read+0x34>
 800554a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005556:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0f1      	b.n	8005740 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_I2C_Mem_Read+0x4e>
 8005566:	2302      	movs	r3, #2
 8005568:	e0ea      	b.n	8005740 <HAL_I2C_Mem_Read+0x224>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005572:	f7fd f9e9 	bl	8002948 <HAL_GetTick>
 8005576:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2319      	movs	r3, #25
 800557e:	2201      	movs	r2, #1
 8005580:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f9bd 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0d5      	b.n	8005740 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2222      	movs	r2, #34	; 0x22
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2240      	movs	r2, #64	; 0x40
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055bc:	88f8      	ldrh	r0, [r7, #6]
 80055be:	893a      	ldrh	r2, [r7, #8]
 80055c0:	8979      	ldrh	r1, [r7, #10]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	4603      	mov	r3, r0
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f921 	bl	8005814 <I2C_RequestMemoryRead>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0ad      	b.n	8005740 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2bff      	cmp	r3, #255	; 0xff
 80055ec:	d90e      	bls.n	800560c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	22ff      	movs	r2, #255	; 0xff
 80055f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	8979      	ldrh	r1, [r7, #10]
 80055fc:	4b52      	ldr	r3, [pc, #328]	; (8005748 <HAL_I2C_Mem_Read+0x22c>)
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 fa9f 	bl	8005b48 <I2C_TransferConfig>
 800560a:	e00f      	b.n	800562c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561a:	b2da      	uxtb	r2, r3
 800561c:	8979      	ldrh	r1, [r7, #10]
 800561e:	4b4a      	ldr	r3, [pc, #296]	; (8005748 <HAL_I2C_Mem_Read+0x22c>)
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fa8e 	bl	8005b48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	2200      	movs	r2, #0
 8005634:	2104      	movs	r1, #4
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f964 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e07c      	b.n	8005740 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d034      	beq.n	80056ec <HAL_I2C_Mem_Read+0x1d0>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d130      	bne.n	80056ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	2200      	movs	r2, #0
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f935 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e04d      	b.n	8005740 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2bff      	cmp	r3, #255	; 0xff
 80056ac:	d90e      	bls.n	80056cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	22ff      	movs	r2, #255	; 0xff
 80056b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	8979      	ldrh	r1, [r7, #10]
 80056bc:	2300      	movs	r3, #0
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fa3f 	bl	8005b48 <I2C_TransferConfig>
 80056ca:	e00f      	b.n	80056ec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	8979      	ldrh	r1, [r7, #10]
 80056de:	2300      	movs	r3, #0
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fa2e 	bl	8005b48 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d19a      	bne.n	800562c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f982 	bl	8005a04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e01a      	b.n	8005740 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2220      	movs	r2, #32
 8005710:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_I2C_Mem_Read+0x230>)
 800571e:	400b      	ands	r3, r1
 8005720:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e000      	b.n	8005740 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800573e:	2302      	movs	r3, #2
  }
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	80002400 	.word	0x80002400
 800574c:	fe00e800 	.word	0xfe00e800

08005750 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575e:	b2db      	uxtb	r3, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	4608      	mov	r0, r1
 8005776:	4611      	mov	r1, r2
 8005778:	461a      	mov	r2, r3
 800577a:	4603      	mov	r3, r0
 800577c:	817b      	strh	r3, [r7, #10]
 800577e:	460b      	mov	r3, r1
 8005780:	813b      	strh	r3, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	8979      	ldrh	r1, [r7, #10]
 800578c:	4b20      	ldr	r3, [pc, #128]	; (8005810 <I2C_RequestMemoryWrite+0xa4>)
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f9d7 	bl	8005b48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	69b9      	ldr	r1, [r7, #24]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 f8f0 	bl	8005984 <I2C_WaitOnTXISFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e02c      	b.n	8005808 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d105      	bne.n	80057c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057b4:	893b      	ldrh	r3, [r7, #8]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	629a      	str	r2, [r3, #40]	; 0x28
 80057be:	e015      	b.n	80057ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057c0:	893b      	ldrh	r3, [r7, #8]
 80057c2:	0a1b      	lsrs	r3, r3, #8
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	69b9      	ldr	r1, [r7, #24]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f8d6 	bl	8005984 <I2C_WaitOnTXISFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e012      	b.n	8005808 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057e2:	893b      	ldrh	r3, [r7, #8]
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2200      	movs	r2, #0
 80057f4:	2180      	movs	r1, #128	; 0x80
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f884 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	80002000 	.word	0x80002000

08005814 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	4608      	mov	r0, r1
 800581e:	4611      	mov	r1, r2
 8005820:	461a      	mov	r2, r3
 8005822:	4603      	mov	r3, r0
 8005824:	817b      	strh	r3, [r7, #10]
 8005826:	460b      	mov	r3, r1
 8005828:	813b      	strh	r3, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	8979      	ldrh	r1, [r7, #10]
 8005834:	4b20      	ldr	r3, [pc, #128]	; (80058b8 <I2C_RequestMemoryRead+0xa4>)
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f984 	bl	8005b48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	69b9      	ldr	r1, [r7, #24]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f89d 	bl	8005984 <I2C_WaitOnTXISFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e02c      	b.n	80058ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d105      	bne.n	8005866 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800585a:	893b      	ldrh	r3, [r7, #8]
 800585c:	b2da      	uxtb	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	629a      	str	r2, [r3, #40]	; 0x28
 8005864:	e015      	b.n	8005892 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005866:	893b      	ldrh	r3, [r7, #8]
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	b29b      	uxth	r3, r3
 800586c:	b2da      	uxtb	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	69b9      	ldr	r1, [r7, #24]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f883 	bl	8005984 <I2C_WaitOnTXISFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e012      	b.n	80058ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005888:	893b      	ldrh	r3, [r7, #8]
 800588a:	b2da      	uxtb	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2200      	movs	r2, #0
 800589a:	2140      	movs	r1, #64	; 0x40
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f831 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	80002000 	.word	0x80002000

080058bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d103      	bne.n	80058da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d007      	beq.n	80058f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	619a      	str	r2, [r3, #24]
  }
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005914:	e022      	b.n	800595c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d01e      	beq.n	800595c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7fd f813 	bl	8002948 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d113      	bne.n	800595c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e00f      	b.n	800597c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4013      	ands	r3, r2
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	429a      	cmp	r2, r3
 800596a:	bf0c      	ite	eq
 800596c:	2301      	moveq	r3, #1
 800596e:	2300      	movne	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	429a      	cmp	r2, r3
 8005978:	d0cd      	beq.n	8005916 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005990:	e02c      	b.n	80059ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f870 	bl	8005a7c <I2C_IsAcknowledgeFailed>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e02a      	b.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d01e      	beq.n	80059ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ae:	f7fc ffcb 	bl	8002948 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d302      	bcc.n	80059c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d113      	bne.n	80059ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e007      	b.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d1cb      	bne.n	8005992 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a10:	e028      	b.n	8005a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f830 	bl	8005a7c <I2C_IsAcknowledgeFailed>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e026      	b.n	8005a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a26:	f7fc ff8f 	bl	8002948 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d113      	bne.n	8005a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	f043 0220 	orr.w	r2, r3, #32
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e007      	b.n	8005a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d1cf      	bne.n	8005a12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b10      	cmp	r3, #16
 8005a94:	d151      	bne.n	8005b3a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a96:	e022      	b.n	8005ade <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d01e      	beq.n	8005ade <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa0:	f7fc ff52 	bl	8002948 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d302      	bcc.n	8005ab6 <I2C_IsAcknowledgeFailed+0x3a>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d113      	bne.n	8005ade <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	f043 0220 	orr.w	r2, r3, #32
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e02e      	b.n	8005b3c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d1d5      	bne.n	8005a98 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2210      	movs	r2, #16
 8005af2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2220      	movs	r2, #32
 8005afa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff fedd 	bl	80058bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6859      	ldr	r1, [r3, #4]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <I2C_IsAcknowledgeFailed+0xc8>)
 8005b0e:	400b      	ands	r3, r1
 8005b10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f043 0204 	orr.w	r2, r3, #4
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	fe00e800 	.word	0xfe00e800

08005b48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	817b      	strh	r3, [r7, #10]
 8005b56:	4613      	mov	r3, r2
 8005b58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	0d5b      	lsrs	r3, r3, #21
 8005b64:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b68:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <I2C_TransferConfig+0x58>)
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	ea02 0103 	and.w	r1, r2, r3
 8005b72:	897b      	ldrh	r3, [r7, #10]
 8005b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b78:	7a7b      	ldrb	r3, [r7, #9]
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	03ff63ff 	.word	0x03ff63ff

08005ba4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e0bf      	b.n	8005d36 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fc fc2e 	bl	800242c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005be6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6999      	ldr	r1, [r3, #24]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005bfc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6899      	ldr	r1, [r3, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <HAL_LTDC_Init+0x19c>)
 8005c18:	400b      	ands	r3, r1
 8005c1a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	041b      	lsls	r3, r3, #16
 8005c22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6899      	ldr	r1, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68d9      	ldr	r1, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4b3e      	ldr	r3, [pc, #248]	; (8005d40 <HAL_LTDC_Init+0x19c>)
 8005c46:	400b      	ands	r3, r1
 8005c48:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68d9      	ldr	r1, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1a      	ldr	r2, [r3, #32]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6919      	ldr	r1, [r3, #16]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b33      	ldr	r3, [pc, #204]	; (8005d40 <HAL_LTDC_Init+0x19c>)
 8005c74:	400b      	ands	r3, r1
 8005c76:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	041b      	lsls	r3, r3, #16
 8005c7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6919      	ldr	r1, [r3, #16]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6959      	ldr	r1, [r3, #20]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4b27      	ldr	r3, [pc, #156]	; (8005d40 <HAL_LTDC_Init+0x19c>)
 8005ca2:	400b      	ands	r3, r1
 8005ca4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6959      	ldr	r1, [r3, #20]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005cd4:	041b      	lsls	r3, r3, #16
 8005cd6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0206 	orr.w	r2, r2, #6
 8005d12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	f000f800 	.word	0xf000f800

08005d44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d44:	b5b0      	push	{r4, r5, r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HAL_LTDC_ConfigLayer+0x1a>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e02c      	b.n	8005db8 <HAL_LTDC_ConfigLayer+0x74>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2134      	movs	r1, #52	; 0x34
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4614      	mov	r4, r2
 8005d82:	461d      	mov	r5, r3
 8005d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f81f 	bl	8005ddc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2201      	movs	r2, #1
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bdb0      	pop	{r4, r5, r7, pc}

08005dc0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005dce:	b2db      	uxtb	r3, r3
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df8:	4413      	add	r3, r2
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	01db      	lsls	r3, r3, #7
 8005e08:	4413      	add	r3, r2
 8005e0a:	3384      	adds	r3, #132	; 0x84
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	4611      	mov	r1, r2
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	01d2      	lsls	r2, r2, #7
 8005e18:	440a      	add	r2, r1
 8005e1a:	3284      	adds	r2, #132	; 0x84
 8005e1c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e20:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	0c1b      	lsrs	r3, r3, #16
 8005e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e32:	4413      	add	r3, r2
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	01db      	lsls	r3, r3, #7
 8005e40:	440b      	add	r3, r1
 8005e42:	3384      	adds	r3, #132	; 0x84
 8005e44:	4619      	mov	r1, r3
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e5a:	4413      	add	r3, r2
 8005e5c:	041b      	lsls	r3, r3, #16
 8005e5e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3384      	adds	r3, #132	; 0x84
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	4611      	mov	r1, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	01d2      	lsls	r2, r2, #7
 8005e7a:	440a      	add	r2, r1
 8005e7c:	3284      	adds	r2, #132	; 0x84
 8005e7e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e82:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e92:	4413      	add	r3, r2
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	01db      	lsls	r3, r3, #7
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3384      	adds	r3, #132	; 0x84
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	01db      	lsls	r3, r3, #7
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3384      	adds	r3, #132	; 0x84
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	01d2      	lsls	r2, r2, #7
 8005ec6:	440a      	add	r2, r1
 8005ec8:	3284      	adds	r2, #132	; 0x84
 8005eca:	f023 0307 	bic.w	r3, r3, #7
 8005ece:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	01db      	lsls	r3, r3, #7
 8005eda:	4413      	add	r3, r2
 8005edc:	3384      	adds	r3, #132	; 0x84
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005ef6:	041b      	lsls	r3, r3, #16
 8005ef8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	061b      	lsls	r3, r3, #24
 8005f00:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	01db      	lsls	r3, r3, #7
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3384      	adds	r3, #132	; 0x84
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	01db      	lsls	r3, r3, #7
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3384      	adds	r3, #132	; 0x84
 8005f20:	461a      	mov	r2, r3
 8005f22:	2300      	movs	r3, #0
 8005f24:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	431a      	orrs	r2, r3
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	01db      	lsls	r3, r3, #7
 8005f40:	440b      	add	r3, r1
 8005f42:	3384      	adds	r3, #132	; 0x84
 8005f44:	4619      	mov	r1, r3
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	01db      	lsls	r3, r3, #7
 8005f56:	4413      	add	r3, r2
 8005f58:	3384      	adds	r3, #132	; 0x84
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	4611      	mov	r1, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	01d2      	lsls	r2, r2, #7
 8005f66:	440a      	add	r2, r1
 8005f68:	3284      	adds	r2, #132	; 0x84
 8005f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	01db      	lsls	r3, r3, #7
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3384      	adds	r3, #132	; 0x84
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	01db      	lsls	r3, r3, #7
 8005f90:	4413      	add	r3, r2
 8005f92:	3384      	adds	r3, #132	; 0x84
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	01db      	lsls	r3, r3, #7
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3384      	adds	r3, #132	; 0x84
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4b58      	ldr	r3, [pc, #352]	; (8006108 <LTDC_SetConfig+0x32c>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	68f9      	ldr	r1, [r7, #12]
 8005fb6:	6809      	ldr	r1, [r1, #0]
 8005fb8:	4608      	mov	r0, r1
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	01c9      	lsls	r1, r1, #7
 8005fbe:	4401      	add	r1, r0
 8005fc0:	3184      	adds	r1, #132	; 0x84
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	01db      	lsls	r3, r3, #7
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3384      	adds	r3, #132	; 0x84
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	01db      	lsls	r3, r3, #7
 8005fe0:	4413      	add	r3, r2
 8005fe2:	3384      	adds	r3, #132	; 0x84
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	01db      	lsls	r3, r3, #7
 8005ff4:	4413      	add	r3, r2
 8005ff6:	3384      	adds	r3, #132	; 0x84
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006008:	2304      	movs	r3, #4
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	e01b      	b.n	8006046 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d102      	bne.n	800601c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006016:	2303      	movs	r3, #3
 8006018:	61fb      	str	r3, [r7, #28]
 800601a:	e014      	b.n	8006046 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2b04      	cmp	r3, #4
 8006022:	d00b      	beq.n	800603c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006028:	2b02      	cmp	r3, #2
 800602a:	d007      	beq.n	800603c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006030:	2b03      	cmp	r3, #3
 8006032:	d003      	beq.n	800603c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006038:	2b07      	cmp	r3, #7
 800603a:	d102      	bne.n	8006042 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800603c:	2302      	movs	r3, #2
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	e001      	b.n	8006046 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006042:	2301      	movs	r3, #1
 8006044:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	01db      	lsls	r3, r3, #7
 8006050:	4413      	add	r3, r2
 8006052:	3384      	adds	r3, #132	; 0x84
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	4611      	mov	r1, r2
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	01d2      	lsls	r2, r2, #7
 8006060:	440a      	add	r2, r1
 8006062:	3284      	adds	r2, #132	; 0x84
 8006064:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006068:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	fb02 f303 	mul.w	r3, r2, r3
 8006074:	041a      	lsls	r2, r3, #16
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	6859      	ldr	r1, [r3, #4]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	1acb      	subs	r3, r1, r3
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	fb01 f303 	mul.w	r3, r1, r3
 8006086:	3303      	adds	r3, #3
 8006088:	68f9      	ldr	r1, [r7, #12]
 800608a:	6809      	ldr	r1, [r1, #0]
 800608c:	4608      	mov	r0, r1
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	01c9      	lsls	r1, r1, #7
 8006092:	4401      	add	r1, r0
 8006094:	3184      	adds	r1, #132	; 0x84
 8006096:	4313      	orrs	r3, r2
 8006098:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	01db      	lsls	r3, r3, #7
 80060a4:	4413      	add	r3, r2
 80060a6:	3384      	adds	r3, #132	; 0x84
 80060a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4619      	mov	r1, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	01db      	lsls	r3, r3, #7
 80060b4:	440b      	add	r3, r1
 80060b6:	3384      	adds	r3, #132	; 0x84
 80060b8:	4619      	mov	r1, r3
 80060ba:	4b14      	ldr	r3, [pc, #80]	; (800610c <LTDC_SetConfig+0x330>)
 80060bc:	4013      	ands	r3, r2
 80060be:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	01db      	lsls	r3, r3, #7
 80060ca:	4413      	add	r3, r2
 80060cc:	3384      	adds	r3, #132	; 0x84
 80060ce:	461a      	mov	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	01db      	lsls	r3, r3, #7
 80060e0:	4413      	add	r3, r2
 80060e2:	3384      	adds	r3, #132	; 0x84
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	4611      	mov	r1, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	01d2      	lsls	r2, r2, #7
 80060f0:	440a      	add	r2, r1
 80060f2:	3284      	adds	r2, #132	; 0x84
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	6013      	str	r3, [r2, #0]
}
 80060fa:	bf00      	nop
 80060fc:	3724      	adds	r7, #36	; 0x24
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	fffff8f8 	.word	0xfffff8f8
 800610c:	fffff800 	.word	0xfffff800

08006110 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800611a:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006124:	6413      	str	r3, [r2, #64]	; 0x40
 8006126:	4b20      	ldr	r3, [pc, #128]	; (80061a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006132:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1d      	ldr	r2, [pc, #116]	; (80061ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800613c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800613e:	f7fc fc03 	bl	8002948 <HAL_GetTick>
 8006142:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006144:	e009      	b.n	800615a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006146:	f7fc fbff 	bl	8002948 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006154:	d901      	bls.n	800615a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e022      	b.n	80061a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800615a:	4b14      	ldr	r3, [pc, #80]	; (80061ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006166:	d1ee      	bne.n	8006146 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006168:	4b10      	ldr	r3, [pc, #64]	; (80061ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a0f      	ldr	r2, [pc, #60]	; (80061ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800616e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006172:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006174:	f7fc fbe8 	bl	8002948 <HAL_GetTick>
 8006178:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800617a:	e009      	b.n	8006190 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800617c:	f7fc fbe4 	bl	8002948 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800618a:	d901      	bls.n	8006190 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e007      	b.n	80061a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006190:	4b06      	ldr	r3, [pc, #24]	; (80061ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800619c:	d1ee      	bne.n	800617c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40007000 	.word	0x40007000

080061b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80061b8:	2300      	movs	r3, #0
 80061ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e291      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 8087 	beq.w	80062e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061d4:	4b96      	ldr	r3, [pc, #600]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 030c 	and.w	r3, r3, #12
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d00c      	beq.n	80061fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061e0:	4b93      	ldr	r3, [pc, #588]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 030c 	and.w	r3, r3, #12
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d112      	bne.n	8006212 <HAL_RCC_OscConfig+0x62>
 80061ec:	4b90      	ldr	r3, [pc, #576]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f8:	d10b      	bne.n	8006212 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061fa:	4b8d      	ldr	r3, [pc, #564]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d06c      	beq.n	80062e0 <HAL_RCC_OscConfig+0x130>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d168      	bne.n	80062e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e26b      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621a:	d106      	bne.n	800622a <HAL_RCC_OscConfig+0x7a>
 800621c:	4b84      	ldr	r3, [pc, #528]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a83      	ldr	r2, [pc, #524]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	e02e      	b.n	8006288 <HAL_RCC_OscConfig+0xd8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0x9c>
 8006232:	4b7f      	ldr	r3, [pc, #508]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a7e      	ldr	r2, [pc, #504]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4b7c      	ldr	r3, [pc, #496]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a7b      	ldr	r2, [pc, #492]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e01d      	b.n	8006288 <HAL_RCC_OscConfig+0xd8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006254:	d10c      	bne.n	8006270 <HAL_RCC_OscConfig+0xc0>
 8006256:	4b76      	ldr	r3, [pc, #472]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a75      	ldr	r2, [pc, #468]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 800625c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	4b73      	ldr	r3, [pc, #460]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a72      	ldr	r2, [pc, #456]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e00b      	b.n	8006288 <HAL_RCC_OscConfig+0xd8>
 8006270:	4b6f      	ldr	r3, [pc, #444]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a6e      	ldr	r2, [pc, #440]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	4b6c      	ldr	r3, [pc, #432]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a6b      	ldr	r2, [pc, #428]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d013      	beq.n	80062b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fc fb5a 	bl	8002948 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006298:	f7fc fb56 	bl	8002948 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	; 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e21f      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062aa:	4b61      	ldr	r3, [pc, #388]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f0      	beq.n	8006298 <HAL_RCC_OscConfig+0xe8>
 80062b6:	e014      	b.n	80062e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fc fb46 	bl	8002948 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fc fb42 	bl	8002948 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	; 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e20b      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d2:	4b57      	ldr	r3, [pc, #348]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x110>
 80062de:	e000      	b.n	80062e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d069      	beq.n	80063c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062ee:	4b50      	ldr	r3, [pc, #320]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062fa:	4b4d      	ldr	r3, [pc, #308]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 030c 	and.w	r3, r3, #12
 8006302:	2b08      	cmp	r3, #8
 8006304:	d11c      	bne.n	8006340 <HAL_RCC_OscConfig+0x190>
 8006306:	4b4a      	ldr	r3, [pc, #296]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d116      	bne.n	8006340 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006312:	4b47      	ldr	r3, [pc, #284]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <HAL_RCC_OscConfig+0x17a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d001      	beq.n	800632a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e1df      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632a:	4b41      	ldr	r3, [pc, #260]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	493d      	ldr	r1, [pc, #244]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 800633a:	4313      	orrs	r3, r2
 800633c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633e:	e040      	b.n	80063c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d023      	beq.n	8006390 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006348:	4b39      	ldr	r3, [pc, #228]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a38      	ldr	r2, [pc, #224]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 800634e:	f043 0301 	orr.w	r3, r3, #1
 8006352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fc faf8 	bl	8002948 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800635c:	f7fc faf4 	bl	8002948 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e1bd      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636e:	4b30      	ldr	r3, [pc, #192]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800637a:	4b2d      	ldr	r3, [pc, #180]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	4929      	ldr	r1, [pc, #164]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 800638a:	4313      	orrs	r3, r2
 800638c:	600b      	str	r3, [r1, #0]
 800638e:	e018      	b.n	80063c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006390:	4b27      	ldr	r3, [pc, #156]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a26      	ldr	r2, [pc, #152]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fc fad4 	bl	8002948 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063a4:	f7fc fad0 	bl	8002948 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e199      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b6:	4b1e      	ldr	r3, [pc, #120]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f0      	bne.n	80063a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d038      	beq.n	8006440 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d019      	beq.n	800640a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063d6:	4b16      	ldr	r3, [pc, #88]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80063d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063da:	4a15      	ldr	r2, [pc, #84]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e2:	f7fc fab1 	bl	8002948 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ea:	f7fc faad 	bl	8002948 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e176      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063fc:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 80063fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f0      	beq.n	80063ea <HAL_RCC_OscConfig+0x23a>
 8006408:	e01a      	b.n	8006440 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800640a:	4b09      	ldr	r3, [pc, #36]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 800640c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640e:	4a08      	ldr	r2, [pc, #32]	; (8006430 <HAL_RCC_OscConfig+0x280>)
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006416:	f7fc fa97 	bl	8002948 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800641c:	e00a      	b.n	8006434 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800641e:	f7fc fa93 	bl	8002948 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d903      	bls.n	8006434 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e15c      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
 8006430:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006434:	4b91      	ldr	r3, [pc, #580]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ee      	bne.n	800641e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 80a4 	beq.w	8006596 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800644e:	4b8b      	ldr	r3, [pc, #556]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10d      	bne.n	8006476 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800645a:	4b88      	ldr	r3, [pc, #544]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	4a87      	ldr	r2, [pc, #540]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006464:	6413      	str	r3, [r2, #64]	; 0x40
 8006466:	4b85      	ldr	r3, [pc, #532]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646e:	60bb      	str	r3, [r7, #8]
 8006470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006472:	2301      	movs	r3, #1
 8006474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006476:	4b82      	ldr	r3, [pc, #520]	; (8006680 <HAL_RCC_OscConfig+0x4d0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647e:	2b00      	cmp	r3, #0
 8006480:	d118      	bne.n	80064b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006482:	4b7f      	ldr	r3, [pc, #508]	; (8006680 <HAL_RCC_OscConfig+0x4d0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a7e      	ldr	r2, [pc, #504]	; (8006680 <HAL_RCC_OscConfig+0x4d0>)
 8006488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800648c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800648e:	f7fc fa5b 	bl	8002948 <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006496:	f7fc fa57 	bl	8002948 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b64      	cmp	r3, #100	; 0x64
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e120      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064a8:	4b75      	ldr	r3, [pc, #468]	; (8006680 <HAL_RCC_OscConfig+0x4d0>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0f0      	beq.n	8006496 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d106      	bne.n	80064ca <HAL_RCC_OscConfig+0x31a>
 80064bc:	4b6f      	ldr	r3, [pc, #444]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80064be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c0:	4a6e      	ldr	r2, [pc, #440]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	6713      	str	r3, [r2, #112]	; 0x70
 80064c8:	e02d      	b.n	8006526 <HAL_RCC_OscConfig+0x376>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10c      	bne.n	80064ec <HAL_RCC_OscConfig+0x33c>
 80064d2:	4b6a      	ldr	r3, [pc, #424]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	4a69      	ldr	r2, [pc, #420]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80064d8:	f023 0301 	bic.w	r3, r3, #1
 80064dc:	6713      	str	r3, [r2, #112]	; 0x70
 80064de:	4b67      	ldr	r3, [pc, #412]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	4a66      	ldr	r2, [pc, #408]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80064e4:	f023 0304 	bic.w	r3, r3, #4
 80064e8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ea:	e01c      	b.n	8006526 <HAL_RCC_OscConfig+0x376>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2b05      	cmp	r3, #5
 80064f2:	d10c      	bne.n	800650e <HAL_RCC_OscConfig+0x35e>
 80064f4:	4b61      	ldr	r3, [pc, #388]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f8:	4a60      	ldr	r2, [pc, #384]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80064fa:	f043 0304 	orr.w	r3, r3, #4
 80064fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006500:	4b5e      	ldr	r3, [pc, #376]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006504:	4a5d      	ldr	r2, [pc, #372]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	6713      	str	r3, [r2, #112]	; 0x70
 800650c:	e00b      	b.n	8006526 <HAL_RCC_OscConfig+0x376>
 800650e:	4b5b      	ldr	r3, [pc, #364]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	4a5a      	ldr	r2, [pc, #360]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	6713      	str	r3, [r2, #112]	; 0x70
 800651a:	4b58      	ldr	r3, [pc, #352]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	4a57      	ldr	r2, [pc, #348]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006520:	f023 0304 	bic.w	r3, r3, #4
 8006524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d015      	beq.n	800655a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652e:	f7fc fa0b 	bl	8002948 <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006534:	e00a      	b.n	800654c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006536:	f7fc fa07 	bl	8002948 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	f241 3288 	movw	r2, #5000	; 0x1388
 8006544:	4293      	cmp	r3, r2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e0ce      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654c:	4b4b      	ldr	r3, [pc, #300]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 800654e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0ee      	beq.n	8006536 <HAL_RCC_OscConfig+0x386>
 8006558:	e014      	b.n	8006584 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800655a:	f7fc f9f5 	bl	8002948 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006560:	e00a      	b.n	8006578 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006562:	f7fc f9f1 	bl	8002948 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006570:	4293      	cmp	r3, r2
 8006572:	d901      	bls.n	8006578 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e0b8      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006578:	4b40      	ldr	r3, [pc, #256]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 800657a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1ee      	bne.n	8006562 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d105      	bne.n	8006596 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800658a:	4b3c      	ldr	r3, [pc, #240]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	4a3b      	ldr	r2, [pc, #236]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 80a4 	beq.w	80066e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065a0:	4b36      	ldr	r3, [pc, #216]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f003 030c 	and.w	r3, r3, #12
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d06b      	beq.n	8006684 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d149      	bne.n	8006648 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b4:	4b31      	ldr	r3, [pc, #196]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a30      	ldr	r2, [pc, #192]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80065ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fc f9c2 	bl	8002948 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c8:	f7fc f9be 	bl	8002948 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e087      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065da:	4b28      	ldr	r3, [pc, #160]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f0      	bne.n	80065c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69da      	ldr	r2, [r3, #28]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	019b      	lsls	r3, r3, #6
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	3b01      	subs	r3, #1
 8006600:	041b      	lsls	r3, r3, #16
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	061b      	lsls	r3, r3, #24
 800660a:	4313      	orrs	r3, r2
 800660c:	4a1b      	ldr	r2, [pc, #108]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 800660e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006612:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006614:	4b19      	ldr	r3, [pc, #100]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a18      	ldr	r2, [pc, #96]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 800661a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800661e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006620:	f7fc f992 	bl	8002948 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006628:	f7fc f98e 	bl	8002948 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e057      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800663a:	4b10      	ldr	r3, [pc, #64]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0f0      	beq.n	8006628 <HAL_RCC_OscConfig+0x478>
 8006646:	e04f      	b.n	80066e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a0b      	ldr	r2, [pc, #44]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 800664e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006654:	f7fc f978 	bl	8002948 <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800665c:	f7fc f974 	bl	8002948 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e03d      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666e:	4b03      	ldr	r3, [pc, #12]	; (800667c <HAL_RCC_OscConfig+0x4cc>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1f0      	bne.n	800665c <HAL_RCC_OscConfig+0x4ac>
 800667a:	e035      	b.n	80066e8 <HAL_RCC_OscConfig+0x538>
 800667c:	40023800 	.word	0x40023800
 8006680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006684:	4b1b      	ldr	r3, [pc, #108]	; (80066f4 <HAL_RCC_OscConfig+0x544>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d028      	beq.n	80066e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d121      	bne.n	80066e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d11a      	bne.n	80066e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066bc:	4293      	cmp	r3, r2
 80066be:	d111      	bne.n	80066e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	3b01      	subs	r3, #1
 80066ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d107      	bne.n	80066e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d001      	beq.n	80066e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40023800 	.word	0x40023800

080066f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0d0      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006710:	4b6a      	ldr	r3, [pc, #424]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d910      	bls.n	8006740 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671e:	4b67      	ldr	r3, [pc, #412]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f023 020f 	bic.w	r2, r3, #15
 8006726:	4965      	ldr	r1, [pc, #404]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	4313      	orrs	r3, r2
 800672c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800672e:	4b63      	ldr	r3, [pc, #396]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d001      	beq.n	8006740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e0b8      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d020      	beq.n	800678e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006758:	4b59      	ldr	r3, [pc, #356]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4a58      	ldr	r2, [pc, #352]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 800675e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006762:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006770:	4b53      	ldr	r3, [pc, #332]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	4a52      	ldr	r2, [pc, #328]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800677a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800677c:	4b50      	ldr	r3, [pc, #320]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	494d      	ldr	r1, [pc, #308]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 800678a:	4313      	orrs	r3, r2
 800678c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d040      	beq.n	800681c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d107      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067a2:	4b47      	ldr	r3, [pc, #284]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d115      	bne.n	80067da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e07f      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d107      	bne.n	80067ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ba:	4b41      	ldr	r3, [pc, #260]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d109      	bne.n	80067da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e073      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ca:	4b3d      	ldr	r3, [pc, #244]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e06b      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067da:	4b39      	ldr	r3, [pc, #228]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f023 0203 	bic.w	r2, r3, #3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	4936      	ldr	r1, [pc, #216]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ec:	f7fc f8ac 	bl	8002948 <HAL_GetTick>
 80067f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f2:	e00a      	b.n	800680a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067f4:	f7fc f8a8 	bl	8002948 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006802:	4293      	cmp	r3, r2
 8006804:	d901      	bls.n	800680a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e053      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800680a:	4b2d      	ldr	r3, [pc, #180]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 020c 	and.w	r2, r3, #12
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	429a      	cmp	r2, r3
 800681a:	d1eb      	bne.n	80067f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800681c:	4b27      	ldr	r3, [pc, #156]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d210      	bcs.n	800684c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682a:	4b24      	ldr	r3, [pc, #144]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f023 020f 	bic.w	r2, r3, #15
 8006832:	4922      	ldr	r1, [pc, #136]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	4313      	orrs	r3, r2
 8006838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800683a:	4b20      	ldr	r3, [pc, #128]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d001      	beq.n	800684c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e032      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006858:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	4916      	ldr	r1, [pc, #88]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006866:	4313      	orrs	r3, r2
 8006868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0308 	and.w	r3, r3, #8
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006876:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	490e      	ldr	r1, [pc, #56]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006886:	4313      	orrs	r3, r2
 8006888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800688a:	f000 f821 	bl	80068d0 <HAL_RCC_GetSysClockFreq>
 800688e:	4601      	mov	r1, r0
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	091b      	lsrs	r3, r3, #4
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	4a0a      	ldr	r2, [pc, #40]	; (80068c4 <HAL_RCC_ClockConfig+0x1cc>)
 800689c:	5cd3      	ldrb	r3, [r2, r3]
 800689e:	fa21 f303 	lsr.w	r3, r1, r3
 80068a2:	4a09      	ldr	r2, [pc, #36]	; (80068c8 <HAL_RCC_ClockConfig+0x1d0>)
 80068a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80068a6:	4b09      	ldr	r3, [pc, #36]	; (80068cc <HAL_RCC_ClockConfig+0x1d4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fc f808 	bl	80028c0 <HAL_InitTick>

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40023c00 	.word	0x40023c00
 80068c0:	40023800 	.word	0x40023800
 80068c4:	08009df8 	.word	0x08009df8
 80068c8:	20000018 	.word	0x20000018
 80068cc:	2000001c 	.word	0x2000001c

080068d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	607b      	str	r3, [r7, #4]
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	2300      	movs	r3, #0
 80068e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068e6:	4b50      	ldr	r3, [pc, #320]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x158>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 030c 	and.w	r3, r3, #12
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d007      	beq.n	8006902 <HAL_RCC_GetSysClockFreq+0x32>
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	d008      	beq.n	8006908 <HAL_RCC_GetSysClockFreq+0x38>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f040 808d 	bne.w	8006a16 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068fc:	4b4b      	ldr	r3, [pc, #300]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x15c>)
 80068fe:	60bb      	str	r3, [r7, #8]
      break;
 8006900:	e08c      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006902:	4b4b      	ldr	r3, [pc, #300]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8006904:	60bb      	str	r3, [r7, #8]
      break;
 8006906:	e089      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006908:	4b47      	ldr	r3, [pc, #284]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x158>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006910:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006912:	4b45      	ldr	r3, [pc, #276]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x158>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d023      	beq.n	8006966 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800691e:	4b42      	ldr	r3, [pc, #264]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x158>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	099b      	lsrs	r3, r3, #6
 8006924:	f04f 0400 	mov.w	r4, #0
 8006928:	f240 11ff 	movw	r1, #511	; 0x1ff
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	ea03 0501 	and.w	r5, r3, r1
 8006934:	ea04 0602 	and.w	r6, r4, r2
 8006938:	4a3d      	ldr	r2, [pc, #244]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x160>)
 800693a:	fb02 f106 	mul.w	r1, r2, r6
 800693e:	2200      	movs	r2, #0
 8006940:	fb02 f205 	mul.w	r2, r2, r5
 8006944:	440a      	add	r2, r1
 8006946:	493a      	ldr	r1, [pc, #232]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8006948:	fba5 0101 	umull	r0, r1, r5, r1
 800694c:	1853      	adds	r3, r2, r1
 800694e:	4619      	mov	r1, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f04f 0400 	mov.w	r4, #0
 8006956:	461a      	mov	r2, r3
 8006958:	4623      	mov	r3, r4
 800695a:	f7f9 fc55 	bl	8000208 <__aeabi_uldivmod>
 800695e:	4603      	mov	r3, r0
 8006960:	460c      	mov	r4, r1
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	e049      	b.n	80069fa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006966:	4b30      	ldr	r3, [pc, #192]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x158>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	099b      	lsrs	r3, r3, #6
 800696c:	f04f 0400 	mov.w	r4, #0
 8006970:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	ea03 0501 	and.w	r5, r3, r1
 800697c:	ea04 0602 	and.w	r6, r4, r2
 8006980:	4629      	mov	r1, r5
 8006982:	4632      	mov	r2, r6
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	f04f 0400 	mov.w	r4, #0
 800698c:	0154      	lsls	r4, r2, #5
 800698e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006992:	014b      	lsls	r3, r1, #5
 8006994:	4619      	mov	r1, r3
 8006996:	4622      	mov	r2, r4
 8006998:	1b49      	subs	r1, r1, r5
 800699a:	eb62 0206 	sbc.w	r2, r2, r6
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	f04f 0400 	mov.w	r4, #0
 80069a6:	0194      	lsls	r4, r2, #6
 80069a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80069ac:	018b      	lsls	r3, r1, #6
 80069ae:	1a5b      	subs	r3, r3, r1
 80069b0:	eb64 0402 	sbc.w	r4, r4, r2
 80069b4:	f04f 0100 	mov.w	r1, #0
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	00e2      	lsls	r2, r4, #3
 80069be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80069c2:	00d9      	lsls	r1, r3, #3
 80069c4:	460b      	mov	r3, r1
 80069c6:	4614      	mov	r4, r2
 80069c8:	195b      	adds	r3, r3, r5
 80069ca:	eb44 0406 	adc.w	r4, r4, r6
 80069ce:	f04f 0100 	mov.w	r1, #0
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	02a2      	lsls	r2, r4, #10
 80069d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80069dc:	0299      	lsls	r1, r3, #10
 80069de:	460b      	mov	r3, r1
 80069e0:	4614      	mov	r4, r2
 80069e2:	4618      	mov	r0, r3
 80069e4:	4621      	mov	r1, r4
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f04f 0400 	mov.w	r4, #0
 80069ec:	461a      	mov	r2, r3
 80069ee:	4623      	mov	r3, r4
 80069f0:	f7f9 fc0a 	bl	8000208 <__aeabi_uldivmod>
 80069f4:	4603      	mov	r3, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x158>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	0c1b      	lsrs	r3, r3, #16
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	3301      	adds	r3, #1
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a12:	60bb      	str	r3, [r7, #8]
      break;
 8006a14:	e002      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a16:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006a18:	60bb      	str	r3, [r7, #8]
      break;
 8006a1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a26:	bf00      	nop
 8006a28:	40023800 	.word	0x40023800
 8006a2c:	00f42400 	.word	0x00f42400
 8006a30:	017d7840 	.word	0x017d7840

08006a34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a38:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000018 	.word	0x20000018

08006a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a50:	f7ff fff0 	bl	8006a34 <HAL_RCC_GetHCLKFreq>
 8006a54:	4601      	mov	r1, r0
 8006a56:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	0a9b      	lsrs	r3, r3, #10
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	4a03      	ldr	r2, [pc, #12]	; (8006a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a62:	5cd3      	ldrb	r3, [r2, r3]
 8006a64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	08009e08 	.word	0x08009e08

08006a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a78:	f7ff ffdc 	bl	8006a34 <HAL_RCC_GetHCLKFreq>
 8006a7c:	4601      	mov	r1, r0
 8006a7e:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	0b5b      	lsrs	r3, r3, #13
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	4a03      	ldr	r2, [pc, #12]	; (8006a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a8a:	5cd3      	ldrb	r3, [r2, r3]
 8006a8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40023800 	.word	0x40023800
 8006a98:	08009e08 	.word	0x08009e08

08006a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d012      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ac4:	4b69      	ldr	r3, [pc, #420]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	4a68      	ldr	r2, [pc, #416]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ace:	6093      	str	r3, [r2, #8]
 8006ad0:	4b66      	ldr	r3, [pc, #408]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad8:	4964      	ldr	r1, [pc, #400]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d017      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006af6:	4b5d      	ldr	r3, [pc, #372]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b04:	4959      	ldr	r1, [pc, #356]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b14:	d101      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006b16:	2301      	movs	r3, #1
 8006b18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006b22:	2301      	movs	r3, #1
 8006b24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d017      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b32:	4b4e      	ldr	r3, [pc, #312]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	494a      	ldr	r1, [pc, #296]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b50:	d101      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006b52:	2301      	movs	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 808b 	beq.w	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b80:	4b3a      	ldr	r3, [pc, #232]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	4a39      	ldr	r2, [pc, #228]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b8c:	4b37      	ldr	r3, [pc, #220]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b98:	4b35      	ldr	r3, [pc, #212]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a34      	ldr	r2, [pc, #208]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba4:	f7fb fed0 	bl	8002948 <HAL_GetTick>
 8006ba8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bac:	f7fb fecc 	bl	8002948 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b64      	cmp	r3, #100	; 0x64
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e355      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006bbe:	4b2c      	ldr	r3, [pc, #176]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bca:	4b28      	ldr	r3, [pc, #160]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d035      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d02e      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be8:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bf2:	4b1e      	ldr	r3, [pc, #120]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf6:	4a1d      	ldr	r2, [pc, #116]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bfe:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	4a1a      	ldr	r2, [pc, #104]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c0a:	4a18      	ldr	r2, [pc, #96]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c10:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d114      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1c:	f7fb fe94 	bl	8002948 <HAL_GetTick>
 8006c20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c22:	e00a      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c24:	f7fb fe90 	bl	8002948 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e317      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c3a:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0ee      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c52:	d111      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c62:	400b      	ands	r3, r1
 8006c64:	4901      	ldr	r1, [pc, #4]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	608b      	str	r3, [r1, #8]
 8006c6a:	e00b      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	40007000 	.word	0x40007000
 8006c74:	0ffffcff 	.word	0x0ffffcff
 8006c78:	4bb0      	ldr	r3, [pc, #704]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4aaf      	ldr	r2, [pc, #700]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c82:	6093      	str	r3, [r2, #8]
 8006c84:	4bad      	ldr	r3, [pc, #692]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c90:	49aa      	ldr	r1, [pc, #680]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d010      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ca2:	4ba6      	ldr	r3, [pc, #664]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca8:	4aa4      	ldr	r2, [pc, #656]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006cb2:	4ba2      	ldr	r3, [pc, #648]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbc:	499f      	ldr	r1, [pc, #636]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cd0:	4b9a      	ldr	r3, [pc, #616]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cde:	4997      	ldr	r1, [pc, #604]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006cf2:	4b92      	ldr	r3, [pc, #584]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d00:	498e      	ldr	r1, [pc, #568]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d14:	4b89      	ldr	r3, [pc, #548]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d22:	4986      	ldr	r1, [pc, #536]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d36:	4b81      	ldr	r3, [pc, #516]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d44:	497d      	ldr	r1, [pc, #500]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d58:	4b78      	ldr	r3, [pc, #480]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5e:	f023 0203 	bic.w	r2, r3, #3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d66:	4975      	ldr	r1, [pc, #468]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d7a:	4b70      	ldr	r3, [pc, #448]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d80:	f023 020c 	bic.w	r2, r3, #12
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d88:	496c      	ldr	r1, [pc, #432]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d9c:	4b67      	ldr	r3, [pc, #412]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006daa:	4964      	ldr	r1, [pc, #400]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006dbe:	4b5f      	ldr	r3, [pc, #380]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dcc:	495b      	ldr	r1, [pc, #364]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006de0:	4b56      	ldr	r3, [pc, #344]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dee:	4953      	ldr	r1, [pc, #332]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e02:	4b4e      	ldr	r3, [pc, #312]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	494a      	ldr	r1, [pc, #296]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00a      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006e24:	4b45      	ldr	r3, [pc, #276]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e32:	4942      	ldr	r1, [pc, #264]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006e46:	4b3d      	ldr	r3, [pc, #244]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e54:	4939      	ldr	r1, [pc, #228]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e68:	4b34      	ldr	r3, [pc, #208]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e76:	4931      	ldr	r1, [pc, #196]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d011      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006e8a:	4b2c      	ldr	r3, [pc, #176]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e98:	4928      	ldr	r1, [pc, #160]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ea8:	d101      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eca:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed8:	4918      	ldr	r1, [pc, #96]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006eec:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efc:	490f      	ldr	r1, [pc, #60]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d005      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f12:	f040 80d8 	bne.w	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f16:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f22:	f7fb fd11 	bl	8002948 <HAL_GetTick>
 8006f26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f28:	e00a      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f2a:	f7fb fd0d 	bl	8002948 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b64      	cmp	r3, #100	; 0x64
 8006f36:	d903      	bls.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e196      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006f3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f40:	4b6c      	ldr	r3, [pc, #432]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ee      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d021      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d11d      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f60:	4b64      	ldr	r3, [pc, #400]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f66:	0c1b      	lsrs	r3, r3, #16
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f6e:	4b61      	ldr	r3, [pc, #388]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f74:	0e1b      	lsrs	r3, r3, #24
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	019a      	lsls	r2, r3, #6
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	041b      	lsls	r3, r3, #16
 8006f86:	431a      	orrs	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	071b      	lsls	r3, r3, #28
 8006f94:	4957      	ldr	r1, [pc, #348]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb0:	d00a      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d02e      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fc6:	d129      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006fc8:	4b4a      	ldr	r3, [pc, #296]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fce:	0c1b      	lsrs	r3, r3, #16
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fd6:	4b47      	ldr	r3, [pc, #284]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fdc:	0f1b      	lsrs	r3, r3, #28
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	019a      	lsls	r2, r3, #6
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	041b      	lsls	r3, r3, #16
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	061b      	lsls	r3, r3, #24
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	071b      	lsls	r3, r3, #28
 8006ffc:	493d      	ldr	r1, [pc, #244]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007004:	4b3b      	ldr	r3, [pc, #236]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800700a:	f023 021f 	bic.w	r2, r3, #31
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	3b01      	subs	r3, #1
 8007014:	4937      	ldr	r1, [pc, #220]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007016:	4313      	orrs	r3, r2
 8007018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01d      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007028:	4b32      	ldr	r3, [pc, #200]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800702a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800702e:	0e1b      	lsrs	r3, r3, #24
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007036:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800703c:	0f1b      	lsrs	r3, r3, #28
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	019a      	lsls	r2, r3, #6
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	041b      	lsls	r3, r3, #16
 8007050:	431a      	orrs	r2, r3
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	061b      	lsls	r3, r3, #24
 8007056:	431a      	orrs	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	071b      	lsls	r3, r3, #28
 800705c:	4925      	ldr	r1, [pc, #148]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800705e:	4313      	orrs	r3, r2
 8007060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d011      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	019a      	lsls	r2, r3, #6
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	041b      	lsls	r3, r3, #16
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	061b      	lsls	r3, r3, #24
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	071b      	lsls	r3, r3, #28
 800708c:	4919      	ldr	r1, [pc, #100]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007094:	4b17      	ldr	r3, [pc, #92]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a16      	ldr	r2, [pc, #88]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800709a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800709e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070a0:	f7fb fc52 	bl	8002948 <HAL_GetTick>
 80070a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070a8:	f7fb fc4e 	bl	8002948 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	; 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e0d7      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070ba:	4b0e      	ldr	r3, [pc, #56]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	f040 80cd 	bne.w	8007268 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a08      	ldr	r2, [pc, #32]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80070d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070da:	f7fb fc35 	bl	8002948 <HAL_GetTick>
 80070de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070e0:	e00a      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070e2:	f7fb fc31 	bl	8002948 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b64      	cmp	r3, #100	; 0x64
 80070ee:	d903      	bls.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e0ba      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80070f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070f8:	4b5e      	ldr	r3, [pc, #376]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007104:	d0ed      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007122:	2b00      	cmp	r3, #0
 8007124:	d02e      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	d12a      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800712e:	4b51      	ldr	r3, [pc, #324]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800713c:	4b4d      	ldr	r3, [pc, #308]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800713e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007142:	0f1b      	lsrs	r3, r3, #28
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	019a      	lsls	r2, r3, #6
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	041b      	lsls	r3, r3, #16
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	061b      	lsls	r3, r3, #24
 800715c:	431a      	orrs	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	071b      	lsls	r3, r3, #28
 8007162:	4944      	ldr	r1, [pc, #272]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800716a:	4b42      	ldr	r3, [pc, #264]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800716c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007170:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	3b01      	subs	r3, #1
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	493d      	ldr	r1, [pc, #244]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d022      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007198:	d11d      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800719a:	4b36      	ldr	r3, [pc, #216]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a0:	0e1b      	lsrs	r3, r3, #24
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071a8:	4b32      	ldr	r3, [pc, #200]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ae:	0f1b      	lsrs	r3, r3, #28
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	019a      	lsls	r2, r3, #6
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	041b      	lsls	r3, r3, #16
 80071c2:	431a      	orrs	r2, r3
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	061b      	lsls	r3, r3, #24
 80071c8:	431a      	orrs	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	071b      	lsls	r3, r3, #28
 80071ce:	4929      	ldr	r1, [pc, #164]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d028      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071e2:	4b24      	ldr	r3, [pc, #144]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e8:	0e1b      	lsrs	r3, r3, #24
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80071f0:	4b20      	ldr	r3, [pc, #128]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f6:	0c1b      	lsrs	r3, r3, #16
 80071f8:	f003 0303 	and.w	r3, r3, #3
 80071fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	019a      	lsls	r2, r3, #6
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	431a      	orrs	r2, r3
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	061b      	lsls	r3, r3, #24
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	071b      	lsls	r3, r3, #28
 8007216:	4917      	ldr	r1, [pc, #92]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007218:	4313      	orrs	r3, r2
 800721a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800721e:	4b15      	ldr	r3, [pc, #84]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007224:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	4911      	ldr	r1, [pc, #68]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800722e:	4313      	orrs	r3, r2
 8007230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007234:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a0e      	ldr	r2, [pc, #56]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800723a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800723e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007240:	f7fb fb82 	bl	8002948 <HAL_GetTick>
 8007244:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007246:	e008      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007248:	f7fb fb7e 	bl	8002948 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b64      	cmp	r3, #100	; 0x64
 8007254:	d901      	bls.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e007      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800725a:	4b06      	ldr	r3, [pc, #24]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007266:	d1ef      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40023800 	.word	0x40023800

08007278 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e025      	b.n	80072d8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d106      	bne.n	80072a6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7fb fa75 	bl	8002790 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3304      	adds	r3, #4
 80072b6:	4619      	mov	r1, r3
 80072b8:	4610      	mov	r0, r2
 80072ba:	f000 fd23 	bl	8007d04 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	461a      	mov	r2, r3
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	f000 fd8d 	bl	8007de8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_SDRAM_Read_32b+0x20>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e028      	b.n	8007352 <HAL_SDRAM_Read_32b+0x72>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d101      	bne.n	8007318 <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 8007314:	2302      	movs	r3, #2
 8007316:	e01c      	b.n	8007352 <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b05      	cmp	r3, #5
 8007322:	d10e      	bne.n	8007342 <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 8007324:	2301      	movs	r3, #1
 8007326:	e014      	b.n	8007352 <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	3304      	adds	r3, #4
 800733a:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	3b01      	subs	r3, #1
 8007340:	603b      	str	r3, [r7, #0]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1ef      	bne.n	8007328 <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 800735e:	b480      	push	{r7}
 8007360:	b087      	sub	sp, #28
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	607a      	str	r2, [r7, #4]
 800736a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_SDRAM_Write_32b+0x24>
 800737e:	2302      	movs	r3, #2
 8007380:	e02a      	b.n	80073d8 <HAL_SDRAM_Write_32b+0x7a>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007390:	b2db      	uxtb	r3, r3
 8007392:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d101      	bne.n	800739e <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 800739a:	2302      	movs	r3, #2
 800739c:	e01c      	b.n	80073d8 <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	d002      	beq.n	80073aa <HAL_SDRAM_Write_32b+0x4c>
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d10e      	bne.n	80073c8 <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 80073aa:	2301      	movs	r3, #1
 80073ac:	e014      	b.n	80073d8 <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3304      	adds	r3, #4
 80073ba:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	3304      	adds	r3, #4
 80073c0:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1ef      	bne.n	80073ae <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d101      	bne.n	8007400 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80073fc:	2302      	movs	r3, #2
 80073fe:	e018      	b.n	8007432 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	68b9      	ldr	r1, [r7, #8]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fd69 	bl	8007ee8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d104      	bne.n	8007428 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2205      	movs	r2, #5
 8007422:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007426:	e003      	b.n	8007430 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d101      	bne.n	8007454 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007450:	2302      	movs	r3, #2
 8007452:	e00e      	b.n	8007472 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f000 fd61 	bl	8007f2a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e040      	b.n	800750e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7fb f885 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2224      	movs	r2, #36	; 0x24
 80074a6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0201 	bic.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f82d 	bl	8007518 <UART_SetConfig>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e022      	b.n	800750e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 facb 	bl	8007a6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fb52 	bl	8007bb0 <UART_CheckIdleState>
 800750c:	4603      	mov	r3, r0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007520:	2300      	movs	r3, #0
 8007522:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	4bb1      	ldr	r3, [pc, #708]	; (800780c <UART_SetConfig+0x2f4>)
 8007548:	4013      	ands	r3, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6812      	ldr	r2, [r2, #0]
 800754e:	6939      	ldr	r1, [r7, #16]
 8007550:	430b      	orrs	r3, r1
 8007552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	430a      	orrs	r2, r1
 800758c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a9f      	ldr	r2, [pc, #636]	; (8007810 <UART_SetConfig+0x2f8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d121      	bne.n	80075dc <UART_SetConfig+0xc4>
 8007598:	4b9e      	ldr	r3, [pc, #632]	; (8007814 <UART_SetConfig+0x2fc>)
 800759a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d816      	bhi.n	80075d4 <UART_SetConfig+0xbc>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <UART_SetConfig+0x94>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080075bd 	.word	0x080075bd
 80075b0:	080075c9 	.word	0x080075c9
 80075b4:	080075c3 	.word	0x080075c3
 80075b8:	080075cf 	.word	0x080075cf
 80075bc:	2301      	movs	r3, #1
 80075be:	77fb      	strb	r3, [r7, #31]
 80075c0:	e151      	b.n	8007866 <UART_SetConfig+0x34e>
 80075c2:	2302      	movs	r3, #2
 80075c4:	77fb      	strb	r3, [r7, #31]
 80075c6:	e14e      	b.n	8007866 <UART_SetConfig+0x34e>
 80075c8:	2304      	movs	r3, #4
 80075ca:	77fb      	strb	r3, [r7, #31]
 80075cc:	e14b      	b.n	8007866 <UART_SetConfig+0x34e>
 80075ce:	2308      	movs	r3, #8
 80075d0:	77fb      	strb	r3, [r7, #31]
 80075d2:	e148      	b.n	8007866 <UART_SetConfig+0x34e>
 80075d4:	2310      	movs	r3, #16
 80075d6:	77fb      	strb	r3, [r7, #31]
 80075d8:	bf00      	nop
 80075da:	e144      	b.n	8007866 <UART_SetConfig+0x34e>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a8d      	ldr	r2, [pc, #564]	; (8007818 <UART_SetConfig+0x300>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d134      	bne.n	8007650 <UART_SetConfig+0x138>
 80075e6:	4b8b      	ldr	r3, [pc, #556]	; (8007814 <UART_SetConfig+0x2fc>)
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ec:	f003 030c 	and.w	r3, r3, #12
 80075f0:	2b0c      	cmp	r3, #12
 80075f2:	d829      	bhi.n	8007648 <UART_SetConfig+0x130>
 80075f4:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <UART_SetConfig+0xe4>)
 80075f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fa:	bf00      	nop
 80075fc:	08007631 	.word	0x08007631
 8007600:	08007649 	.word	0x08007649
 8007604:	08007649 	.word	0x08007649
 8007608:	08007649 	.word	0x08007649
 800760c:	0800763d 	.word	0x0800763d
 8007610:	08007649 	.word	0x08007649
 8007614:	08007649 	.word	0x08007649
 8007618:	08007649 	.word	0x08007649
 800761c:	08007637 	.word	0x08007637
 8007620:	08007649 	.word	0x08007649
 8007624:	08007649 	.word	0x08007649
 8007628:	08007649 	.word	0x08007649
 800762c:	08007643 	.word	0x08007643
 8007630:	2300      	movs	r3, #0
 8007632:	77fb      	strb	r3, [r7, #31]
 8007634:	e117      	b.n	8007866 <UART_SetConfig+0x34e>
 8007636:	2302      	movs	r3, #2
 8007638:	77fb      	strb	r3, [r7, #31]
 800763a:	e114      	b.n	8007866 <UART_SetConfig+0x34e>
 800763c:	2304      	movs	r3, #4
 800763e:	77fb      	strb	r3, [r7, #31]
 8007640:	e111      	b.n	8007866 <UART_SetConfig+0x34e>
 8007642:	2308      	movs	r3, #8
 8007644:	77fb      	strb	r3, [r7, #31]
 8007646:	e10e      	b.n	8007866 <UART_SetConfig+0x34e>
 8007648:	2310      	movs	r3, #16
 800764a:	77fb      	strb	r3, [r7, #31]
 800764c:	bf00      	nop
 800764e:	e10a      	b.n	8007866 <UART_SetConfig+0x34e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a71      	ldr	r2, [pc, #452]	; (800781c <UART_SetConfig+0x304>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d120      	bne.n	800769c <UART_SetConfig+0x184>
 800765a:	4b6e      	ldr	r3, [pc, #440]	; (8007814 <UART_SetConfig+0x2fc>)
 800765c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007660:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007664:	2b10      	cmp	r3, #16
 8007666:	d00f      	beq.n	8007688 <UART_SetConfig+0x170>
 8007668:	2b10      	cmp	r3, #16
 800766a:	d802      	bhi.n	8007672 <UART_SetConfig+0x15a>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <UART_SetConfig+0x164>
 8007670:	e010      	b.n	8007694 <UART_SetConfig+0x17c>
 8007672:	2b20      	cmp	r3, #32
 8007674:	d005      	beq.n	8007682 <UART_SetConfig+0x16a>
 8007676:	2b30      	cmp	r3, #48	; 0x30
 8007678:	d009      	beq.n	800768e <UART_SetConfig+0x176>
 800767a:	e00b      	b.n	8007694 <UART_SetConfig+0x17c>
 800767c:	2300      	movs	r3, #0
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e0f1      	b.n	8007866 <UART_SetConfig+0x34e>
 8007682:	2302      	movs	r3, #2
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e0ee      	b.n	8007866 <UART_SetConfig+0x34e>
 8007688:	2304      	movs	r3, #4
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e0eb      	b.n	8007866 <UART_SetConfig+0x34e>
 800768e:	2308      	movs	r3, #8
 8007690:	77fb      	strb	r3, [r7, #31]
 8007692:	e0e8      	b.n	8007866 <UART_SetConfig+0x34e>
 8007694:	2310      	movs	r3, #16
 8007696:	77fb      	strb	r3, [r7, #31]
 8007698:	bf00      	nop
 800769a:	e0e4      	b.n	8007866 <UART_SetConfig+0x34e>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a5f      	ldr	r2, [pc, #380]	; (8007820 <UART_SetConfig+0x308>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d120      	bne.n	80076e8 <UART_SetConfig+0x1d0>
 80076a6:	4b5b      	ldr	r3, [pc, #364]	; (8007814 <UART_SetConfig+0x2fc>)
 80076a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	d00f      	beq.n	80076d4 <UART_SetConfig+0x1bc>
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d802      	bhi.n	80076be <UART_SetConfig+0x1a6>
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <UART_SetConfig+0x1b0>
 80076bc:	e010      	b.n	80076e0 <UART_SetConfig+0x1c8>
 80076be:	2b80      	cmp	r3, #128	; 0x80
 80076c0:	d005      	beq.n	80076ce <UART_SetConfig+0x1b6>
 80076c2:	2bc0      	cmp	r3, #192	; 0xc0
 80076c4:	d009      	beq.n	80076da <UART_SetConfig+0x1c2>
 80076c6:	e00b      	b.n	80076e0 <UART_SetConfig+0x1c8>
 80076c8:	2300      	movs	r3, #0
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e0cb      	b.n	8007866 <UART_SetConfig+0x34e>
 80076ce:	2302      	movs	r3, #2
 80076d0:	77fb      	strb	r3, [r7, #31]
 80076d2:	e0c8      	b.n	8007866 <UART_SetConfig+0x34e>
 80076d4:	2304      	movs	r3, #4
 80076d6:	77fb      	strb	r3, [r7, #31]
 80076d8:	e0c5      	b.n	8007866 <UART_SetConfig+0x34e>
 80076da:	2308      	movs	r3, #8
 80076dc:	77fb      	strb	r3, [r7, #31]
 80076de:	e0c2      	b.n	8007866 <UART_SetConfig+0x34e>
 80076e0:	2310      	movs	r3, #16
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	bf00      	nop
 80076e6:	e0be      	b.n	8007866 <UART_SetConfig+0x34e>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a4d      	ldr	r2, [pc, #308]	; (8007824 <UART_SetConfig+0x30c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d124      	bne.n	800773c <UART_SetConfig+0x224>
 80076f2:	4b48      	ldr	r3, [pc, #288]	; (8007814 <UART_SetConfig+0x2fc>)
 80076f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007700:	d012      	beq.n	8007728 <UART_SetConfig+0x210>
 8007702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007706:	d802      	bhi.n	800770e <UART_SetConfig+0x1f6>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d007      	beq.n	800771c <UART_SetConfig+0x204>
 800770c:	e012      	b.n	8007734 <UART_SetConfig+0x21c>
 800770e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007712:	d006      	beq.n	8007722 <UART_SetConfig+0x20a>
 8007714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007718:	d009      	beq.n	800772e <UART_SetConfig+0x216>
 800771a:	e00b      	b.n	8007734 <UART_SetConfig+0x21c>
 800771c:	2300      	movs	r3, #0
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e0a1      	b.n	8007866 <UART_SetConfig+0x34e>
 8007722:	2302      	movs	r3, #2
 8007724:	77fb      	strb	r3, [r7, #31]
 8007726:	e09e      	b.n	8007866 <UART_SetConfig+0x34e>
 8007728:	2304      	movs	r3, #4
 800772a:	77fb      	strb	r3, [r7, #31]
 800772c:	e09b      	b.n	8007866 <UART_SetConfig+0x34e>
 800772e:	2308      	movs	r3, #8
 8007730:	77fb      	strb	r3, [r7, #31]
 8007732:	e098      	b.n	8007866 <UART_SetConfig+0x34e>
 8007734:	2310      	movs	r3, #16
 8007736:	77fb      	strb	r3, [r7, #31]
 8007738:	bf00      	nop
 800773a:	e094      	b.n	8007866 <UART_SetConfig+0x34e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a39      	ldr	r2, [pc, #228]	; (8007828 <UART_SetConfig+0x310>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d124      	bne.n	8007790 <UART_SetConfig+0x278>
 8007746:	4b33      	ldr	r3, [pc, #204]	; (8007814 <UART_SetConfig+0x2fc>)
 8007748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007754:	d012      	beq.n	800777c <UART_SetConfig+0x264>
 8007756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800775a:	d802      	bhi.n	8007762 <UART_SetConfig+0x24a>
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <UART_SetConfig+0x258>
 8007760:	e012      	b.n	8007788 <UART_SetConfig+0x270>
 8007762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007766:	d006      	beq.n	8007776 <UART_SetConfig+0x25e>
 8007768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800776c:	d009      	beq.n	8007782 <UART_SetConfig+0x26a>
 800776e:	e00b      	b.n	8007788 <UART_SetConfig+0x270>
 8007770:	2301      	movs	r3, #1
 8007772:	77fb      	strb	r3, [r7, #31]
 8007774:	e077      	b.n	8007866 <UART_SetConfig+0x34e>
 8007776:	2302      	movs	r3, #2
 8007778:	77fb      	strb	r3, [r7, #31]
 800777a:	e074      	b.n	8007866 <UART_SetConfig+0x34e>
 800777c:	2304      	movs	r3, #4
 800777e:	77fb      	strb	r3, [r7, #31]
 8007780:	e071      	b.n	8007866 <UART_SetConfig+0x34e>
 8007782:	2308      	movs	r3, #8
 8007784:	77fb      	strb	r3, [r7, #31]
 8007786:	e06e      	b.n	8007866 <UART_SetConfig+0x34e>
 8007788:	2310      	movs	r3, #16
 800778a:	77fb      	strb	r3, [r7, #31]
 800778c:	bf00      	nop
 800778e:	e06a      	b.n	8007866 <UART_SetConfig+0x34e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a25      	ldr	r2, [pc, #148]	; (800782c <UART_SetConfig+0x314>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d124      	bne.n	80077e4 <UART_SetConfig+0x2cc>
 800779a:	4b1e      	ldr	r3, [pc, #120]	; (8007814 <UART_SetConfig+0x2fc>)
 800779c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80077a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a8:	d012      	beq.n	80077d0 <UART_SetConfig+0x2b8>
 80077aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ae:	d802      	bhi.n	80077b6 <UART_SetConfig+0x29e>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <UART_SetConfig+0x2ac>
 80077b4:	e012      	b.n	80077dc <UART_SetConfig+0x2c4>
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ba:	d006      	beq.n	80077ca <UART_SetConfig+0x2b2>
 80077bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077c0:	d009      	beq.n	80077d6 <UART_SetConfig+0x2be>
 80077c2:	e00b      	b.n	80077dc <UART_SetConfig+0x2c4>
 80077c4:	2300      	movs	r3, #0
 80077c6:	77fb      	strb	r3, [r7, #31]
 80077c8:	e04d      	b.n	8007866 <UART_SetConfig+0x34e>
 80077ca:	2302      	movs	r3, #2
 80077cc:	77fb      	strb	r3, [r7, #31]
 80077ce:	e04a      	b.n	8007866 <UART_SetConfig+0x34e>
 80077d0:	2304      	movs	r3, #4
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e047      	b.n	8007866 <UART_SetConfig+0x34e>
 80077d6:	2308      	movs	r3, #8
 80077d8:	77fb      	strb	r3, [r7, #31]
 80077da:	e044      	b.n	8007866 <UART_SetConfig+0x34e>
 80077dc:	2310      	movs	r3, #16
 80077de:	77fb      	strb	r3, [r7, #31]
 80077e0:	bf00      	nop
 80077e2:	e040      	b.n	8007866 <UART_SetConfig+0x34e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a11      	ldr	r2, [pc, #68]	; (8007830 <UART_SetConfig+0x318>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d139      	bne.n	8007862 <UART_SetConfig+0x34a>
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <UART_SetConfig+0x2fc>)
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80077f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077fc:	d027      	beq.n	800784e <UART_SetConfig+0x336>
 80077fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007802:	d817      	bhi.n	8007834 <UART_SetConfig+0x31c>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01c      	beq.n	8007842 <UART_SetConfig+0x32a>
 8007808:	e027      	b.n	800785a <UART_SetConfig+0x342>
 800780a:	bf00      	nop
 800780c:	efff69f3 	.word	0xefff69f3
 8007810:	40011000 	.word	0x40011000
 8007814:	40023800 	.word	0x40023800
 8007818:	40004400 	.word	0x40004400
 800781c:	40004800 	.word	0x40004800
 8007820:	40004c00 	.word	0x40004c00
 8007824:	40005000 	.word	0x40005000
 8007828:	40011400 	.word	0x40011400
 800782c:	40007800 	.word	0x40007800
 8007830:	40007c00 	.word	0x40007c00
 8007834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007838:	d006      	beq.n	8007848 <UART_SetConfig+0x330>
 800783a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800783e:	d009      	beq.n	8007854 <UART_SetConfig+0x33c>
 8007840:	e00b      	b.n	800785a <UART_SetConfig+0x342>
 8007842:	2300      	movs	r3, #0
 8007844:	77fb      	strb	r3, [r7, #31]
 8007846:	e00e      	b.n	8007866 <UART_SetConfig+0x34e>
 8007848:	2302      	movs	r3, #2
 800784a:	77fb      	strb	r3, [r7, #31]
 800784c:	e00b      	b.n	8007866 <UART_SetConfig+0x34e>
 800784e:	2304      	movs	r3, #4
 8007850:	77fb      	strb	r3, [r7, #31]
 8007852:	e008      	b.n	8007866 <UART_SetConfig+0x34e>
 8007854:	2308      	movs	r3, #8
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	e005      	b.n	8007866 <UART_SetConfig+0x34e>
 800785a:	2310      	movs	r3, #16
 800785c:	77fb      	strb	r3, [r7, #31]
 800785e:	bf00      	nop
 8007860:	e001      	b.n	8007866 <UART_SetConfig+0x34e>
 8007862:	2310      	movs	r3, #16
 8007864:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800786e:	d17f      	bne.n	8007970 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007870:	7ffb      	ldrb	r3, [r7, #31]
 8007872:	2b08      	cmp	r3, #8
 8007874:	d85c      	bhi.n	8007930 <UART_SetConfig+0x418>
 8007876:	a201      	add	r2, pc, #4	; (adr r2, 800787c <UART_SetConfig+0x364>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	080078a1 	.word	0x080078a1
 8007880:	080078c1 	.word	0x080078c1
 8007884:	080078e1 	.word	0x080078e1
 8007888:	08007931 	.word	0x08007931
 800788c:	080078f9 	.word	0x080078f9
 8007890:	08007931 	.word	0x08007931
 8007894:	08007931 	.word	0x08007931
 8007898:	08007931 	.word	0x08007931
 800789c:	08007919 	.word	0x08007919
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078a0:	f7ff f8d4 	bl	8006a4c <HAL_RCC_GetPCLK1Freq>
 80078a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	005a      	lsls	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	441a      	add	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	61bb      	str	r3, [r7, #24]
        break;
 80078be:	e03a      	b.n	8007936 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078c0:	f7ff f8d8 	bl	8006a74 <HAL_RCC_GetPCLK2Freq>
 80078c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	005a      	lsls	r2, r3, #1
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	085b      	lsrs	r3, r3, #1
 80078d0:	441a      	add	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	61bb      	str	r3, [r7, #24]
        break;
 80078de:	e02a      	b.n	8007936 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	085a      	lsrs	r2, r3, #1
 80078e6:	4b5f      	ldr	r3, [pc, #380]	; (8007a64 <UART_SetConfig+0x54c>)
 80078e8:	4413      	add	r3, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6852      	ldr	r2, [r2, #4]
 80078ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	61bb      	str	r3, [r7, #24]
        break;
 80078f6:	e01e      	b.n	8007936 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078f8:	f7fe ffea 	bl	80068d0 <HAL_RCC_GetSysClockFreq>
 80078fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	005a      	lsls	r2, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	085b      	lsrs	r3, r3, #1
 8007908:	441a      	add	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007912:	b29b      	uxth	r3, r3
 8007914:	61bb      	str	r3, [r7, #24]
        break;
 8007916:	e00e      	b.n	8007936 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	085b      	lsrs	r3, r3, #1
 800791e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	fbb2 f3f3 	udiv	r3, r2, r3
 800792a:	b29b      	uxth	r3, r3
 800792c:	61bb      	str	r3, [r7, #24]
        break;
 800792e:	e002      	b.n	8007936 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	75fb      	strb	r3, [r7, #23]
        break;
 8007934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2b0f      	cmp	r3, #15
 800793a:	d916      	bls.n	800796a <UART_SetConfig+0x452>
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007942:	d212      	bcs.n	800796a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	b29b      	uxth	r3, r3
 8007948:	f023 030f 	bic.w	r3, r3, #15
 800794c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	085b      	lsrs	r3, r3, #1
 8007952:	b29b      	uxth	r3, r3
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	b29a      	uxth	r2, r3
 800795a:	897b      	ldrh	r3, [r7, #10]
 800795c:	4313      	orrs	r3, r2
 800795e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	897a      	ldrh	r2, [r7, #10]
 8007966:	60da      	str	r2, [r3, #12]
 8007968:	e070      	b.n	8007a4c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	75fb      	strb	r3, [r7, #23]
 800796e:	e06d      	b.n	8007a4c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007970:	7ffb      	ldrb	r3, [r7, #31]
 8007972:	2b08      	cmp	r3, #8
 8007974:	d859      	bhi.n	8007a2a <UART_SetConfig+0x512>
 8007976:	a201      	add	r2, pc, #4	; (adr r2, 800797c <UART_SetConfig+0x464>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	080079a1 	.word	0x080079a1
 8007980:	080079bf 	.word	0x080079bf
 8007984:	080079dd 	.word	0x080079dd
 8007988:	08007a2b 	.word	0x08007a2b
 800798c:	080079f5 	.word	0x080079f5
 8007990:	08007a2b 	.word	0x08007a2b
 8007994:	08007a2b 	.word	0x08007a2b
 8007998:	08007a2b 	.word	0x08007a2b
 800799c:	08007a13 	.word	0x08007a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079a0:	f7ff f854 	bl	8006a4c <HAL_RCC_GetPCLK1Freq>
 80079a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	085a      	lsrs	r2, r3, #1
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	441a      	add	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	61bb      	str	r3, [r7, #24]
        break;
 80079bc:	e038      	b.n	8007a30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079be:	f7ff f859 	bl	8006a74 <HAL_RCC_GetPCLK2Freq>
 80079c2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	085a      	lsrs	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	441a      	add	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	61bb      	str	r3, [r7, #24]
        break;
 80079da:	e029      	b.n	8007a30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	085a      	lsrs	r2, r3, #1
 80079e2:	4b21      	ldr	r3, [pc, #132]	; (8007a68 <UART_SetConfig+0x550>)
 80079e4:	4413      	add	r3, r2
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	6852      	ldr	r2, [r2, #4]
 80079ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	61bb      	str	r3, [r7, #24]
        break;
 80079f2:	e01d      	b.n	8007a30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079f4:	f7fe ff6c 	bl	80068d0 <HAL_RCC_GetSysClockFreq>
 80079f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	085a      	lsrs	r2, r3, #1
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	441a      	add	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	61bb      	str	r3, [r7, #24]
        break;
 8007a10:	e00e      	b.n	8007a30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	085b      	lsrs	r3, r3, #1
 8007a18:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	61bb      	str	r3, [r7, #24]
        break;
 8007a28:	e002      	b.n	8007a30 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	75fb      	strb	r3, [r7, #23]
        break;
 8007a2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	2b0f      	cmp	r3, #15
 8007a34:	d908      	bls.n	8007a48 <UART_SetConfig+0x530>
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3c:	d204      	bcs.n	8007a48 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	60da      	str	r2, [r3, #12]
 8007a46:	e001      	b.n	8007a4c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3720      	adds	r7, #32
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	01e84800 	.word	0x01e84800
 8007a68:	00f42400 	.word	0x00f42400

08007a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00a      	beq.n	8007ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00a      	beq.n	8007afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	f003 0310 	and.w	r3, r3, #16
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01a      	beq.n	8007b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b6a:	d10a      	bne.n	8007b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	605a      	str	r2, [r3, #4]
  }
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af02      	add	r7, sp, #8
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007bbe:	f7fa fec3 	bl	8002948 <HAL_GetTick>
 8007bc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b08      	cmp	r3, #8
 8007bd0:	d10e      	bne.n	8007bf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f814 	bl	8007c0e <UART_WaitOnFlagUntilTimeout>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e00a      	b.n	8007c06 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	603b      	str	r3, [r7, #0]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c1e:	e05d      	b.n	8007cdc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c26:	d059      	beq.n	8007cdc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c28:	f7fa fe8e 	bl	8002948 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d302      	bcc.n	8007c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d11b      	bne.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2220      	movs	r2, #32
 8007c62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e042      	b.n	8007cfc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d02b      	beq.n	8007cdc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c92:	d123      	bne.n	8007cdc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c9c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007cac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0201 	bic.w	r2, r2, #1
 8007cbc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e00f      	b.n	8007cfc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69da      	ldr	r2, [r3, #28]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	bf0c      	ite	eq
 8007cec:	2301      	moveq	r3, #1
 8007cee:	2300      	movne	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d092      	beq.n	8007c20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d027      	beq.n	8007d6e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4b2f      	ldr	r3, [pc, #188]	; (8007de4 <FMC_SDRAM_Init+0xe0>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007d34:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007d3a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007d40:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007d46:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007d4c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007d52:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007d58:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007d5e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e032      	b.n	8007dd4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d7a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007d84:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007d8a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <FMC_SDRAM_Init+0xe0>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007da8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007dae:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007db4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007dba:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007dc0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	ffff8000 	.word	0xffff8000

08007de8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d02e      	beq.n	8007e60 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e0e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e1e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007e28:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007e32:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007e3c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007e46:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e50:	4313      	orrs	r3, r2
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	609a      	str	r2, [r3, #8]
 8007e5e:	e039      	b.n	8007ed4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4b1e      	ldr	r3, [pc, #120]	; (8007ee4 <FMC_SDRAM_Timing_Init+0xfc>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e92:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007ea2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007eac:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007eb6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	ff0f0fff 	.word	0xff0f0fff

08007ee8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007f00:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007f0a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007f12:	4313      	orrs	r3, r2
 8007f14:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	695a      	ldr	r2, [r3, #20]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <__libc_init_array>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	4e0d      	ldr	r6, [pc, #52]	; (8007f88 <__libc_init_array+0x38>)
 8007f54:	4c0d      	ldr	r4, [pc, #52]	; (8007f8c <__libc_init_array+0x3c>)
 8007f56:	1ba4      	subs	r4, r4, r6
 8007f58:	10a4      	asrs	r4, r4, #2
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	42a5      	cmp	r5, r4
 8007f5e:	d109      	bne.n	8007f74 <__libc_init_array+0x24>
 8007f60:	4e0b      	ldr	r6, [pc, #44]	; (8007f90 <__libc_init_array+0x40>)
 8007f62:	4c0c      	ldr	r4, [pc, #48]	; (8007f94 <__libc_init_array+0x44>)
 8007f64:	f000 f820 	bl	8007fa8 <_init>
 8007f68:	1ba4      	subs	r4, r4, r6
 8007f6a:	10a4      	asrs	r4, r4, #2
 8007f6c:	2500      	movs	r5, #0
 8007f6e:	42a5      	cmp	r5, r4
 8007f70:	d105      	bne.n	8007f7e <__libc_init_array+0x2e>
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
 8007f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f78:	4798      	blx	r3
 8007f7a:	3501      	adds	r5, #1
 8007f7c:	e7ee      	b.n	8007f5c <__libc_init_array+0xc>
 8007f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f82:	4798      	blx	r3
 8007f84:	3501      	adds	r5, #1
 8007f86:	e7f2      	b.n	8007f6e <__libc_init_array+0x1e>
 8007f88:	08009e20 	.word	0x08009e20
 8007f8c:	08009e20 	.word	0x08009e20
 8007f90:	08009e20 	.word	0x08009e20
 8007f94:	08009e24 	.word	0x08009e24

08007f98 <memset>:
 8007f98:	4402      	add	r2, r0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d100      	bne.n	8007fa2 <memset+0xa>
 8007fa0:	4770      	bx	lr
 8007fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa6:	e7f9      	b.n	8007f9c <memset+0x4>

08007fa8 <_init>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	bf00      	nop
 8007fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fae:	bc08      	pop	{r3}
 8007fb0:	469e      	mov	lr, r3
 8007fb2:	4770      	bx	lr

08007fb4 <_fini>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	bf00      	nop
 8007fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fba:	bc08      	pop	{r3}
 8007fbc:	469e      	mov	lr, r3
 8007fbe:	4770      	bx	lr
