
CameraTutoF7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b84  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e58  08008d4c  08008d4c  00018d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aba4  0800aba4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aba4  0800aba4  0001aba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abac  0800abac  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abac  0800abac  0001abac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abb0  0800abb0  0001abb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800abb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025dac  2000002c  0800abe0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20025dd8  0800abe0  00025dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001838d  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003138  00000000  00000000  000383e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  0003b528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00028701  00000000  00000000  0003cc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000130c5  00000000  00000000  00065329  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000f7ecc  00000000  00000000  000783ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001702ba  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001550  00000000  00000000  00170338  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000610c  00000000  00000000  00171888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008d34 	.word	0x08008d34

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000030 	.word	0x20000030
 8000204:	08008d34 	.word	0x08008d34

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Draw_Blue_Cross>:
 *      Author: Baptiste Rossigneux & Axel Farrugia
 */

#include <stdint.h>

void Draw_Blue_Cross(int x, int y, int thickness, uint16_t* photo_buffer){
 8000508:	b480      	push	{r7}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	603b      	str	r3, [r7, #0]
	//Horizontal blue line
	if(y < thickness) y = thickness;
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	429a      	cmp	r2, r3
 800051c:	da01      	bge.n	8000522 <Draw_Blue_Cross+0x1a>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<320;i++){
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
 8000526:	e01c      	b.n	8000562 <Draw_Blue_Cross+0x5a>
		for(int j=-thickness; j<thickness; j++){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	425b      	negs	r3, r3
 800052c:	61bb      	str	r3, [r7, #24]
 800052e:	e011      	b.n	8000554 <Draw_Blue_Cross+0x4c>
			photo_buffer[((y+j)*320)+i] = 0x001F;
 8000530:	68ba      	ldr	r2, [r7, #8]
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	441a      	add	r2, r3
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	019b      	lsls	r3, r3, #6
 800053e:	461a      	mov	r2, r3
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	4413      	add	r3, r2
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	4413      	add	r3, r2
 800054a:	221f      	movs	r2, #31
 800054c:	801a      	strh	r2, [r3, #0]
		for(int j=-thickness; j<thickness; j++){
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	3301      	adds	r3, #1
 8000552:	61bb      	str	r3, [r7, #24]
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbe9      	blt.n	8000530 <Draw_Blue_Cross+0x28>
	for(int i=0; i<320;i++){
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	3301      	adds	r3, #1
 8000560:	61fb      	str	r3, [r7, #28]
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000568:	dbde      	blt.n	8000528 <Draw_Blue_Cross+0x20>
		}
	}
	//Vertical blue line
	for(int i=0; i<240;i++){
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	e01b      	b.n	80005a8 <Draw_Blue_Cross+0xa0>
	  for(int j=-thickness; j<thickness; j++){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	425b      	negs	r3, r3
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	e010      	b.n	800059a <Draw_Blue_Cross+0x92>
		  photo_buffer[(x+j)+(320*i)] = 0x001F;
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	18d1      	adds	r1, r2, r3
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	019b      	lsls	r3, r3, #6
 8000588:	440b      	add	r3, r1
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	4413      	add	r3, r2
 8000590:	221f      	movs	r2, #31
 8000592:	801a      	strh	r2, [r3, #0]
	  for(int j=-thickness; j<thickness; j++){
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	3301      	adds	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dbea      	blt.n	8000578 <Draw_Blue_Cross+0x70>
	for(int i=0; i<240;i++){
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	2bef      	cmp	r3, #239	; 0xef
 80005ac:	dde0      	ble.n	8000570 <Draw_Blue_Cross+0x68>
	  }
	}
}
 80005ae:	bf00      	nop
 80005b0:	3724      	adds	r7, #36	; 0x24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <Filter_Colors_And_Get_Center>:

void Filter_Colors_And_Get_Center(uint16_t r_threshold, uint16_t g_threshold, uint16_t b_threshold, int nb_pixels, uint16_t* photo_buffer, int* px, int* py, int* pcount){
 80005bc:	b480      	push	{r7}
 80005be:	b08d      	sub	sp, #52	; 0x34
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4603      	mov	r3, r0
 80005c6:	81fb      	strh	r3, [r7, #14]
 80005c8:	460b      	mov	r3, r1
 80005ca:	81bb      	strh	r3, [r7, #12]
 80005cc:	4613      	mov	r3, r2
 80005ce:	817b      	strh	r3, [r7, #10]
	int x = 0, y = 0, nb_red_pix = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
	int a;
	for(int i=0;i<nb_pixels; i++){
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
 80005e0:	e05e      	b.n	80006a0 <Filter_Colors_And_Get_Center+0xe4>
	  uint16_t rouge = photo_buffer[i] & 0xF800;
 80005e2:	6a3b      	ldr	r3, [r7, #32]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005e8:	4413      	add	r3, r2
 80005ea:	881a      	ldrh	r2, [r3, #0]
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <Filter_Colors_And_Get_Center+0x120>)
 80005ee:	4013      	ands	r3, r2
 80005f0:	83fb      	strh	r3, [r7, #30]
	  uint16_t vert = photo_buffer[i] & 0x07E0;
 80005f2:	6a3b      	ldr	r3, [r7, #32]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005f8:	4413      	add	r3, r2
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000600:	83bb      	strh	r3, [r7, #28]
	  uint16_t bleu = photo_buffer[i] & 0x001F;
 8000602:	6a3b      	ldr	r3, [r7, #32]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000608:	4413      	add	r3, r2
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	f003 031f 	and.w	r3, r3, #31
 8000610:	837b      	strh	r3, [r7, #26]

	  //if pixel is too green & too blue, set it to black
	  if(vert > g_threshold || bleu > b_threshold){
 8000612:	8bba      	ldrh	r2, [r7, #28]
 8000614:	89bb      	ldrh	r3, [r7, #12]
 8000616:	429a      	cmp	r2, r3
 8000618:	d803      	bhi.n	8000622 <Filter_Colors_And_Get_Center+0x66>
 800061a:	8b7a      	ldrh	r2, [r7, #26]
 800061c:	897b      	ldrh	r3, [r7, #10]
 800061e:	429a      	cmp	r2, r3
 8000620:	d906      	bls.n	8000630 <Filter_Colors_And_Get_Center+0x74>
		  photo_buffer[i] = 0;
 8000622:	6a3b      	ldr	r3, [r7, #32]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000628:	4413      	add	r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	801a      	strh	r2, [r3, #0]
 800062e:	e034      	b.n	800069a <Filter_Colors_And_Get_Center+0xde>
	  }
	  //if pixel isn't red enough, set it to black
	  else if(rouge < r_threshold ){
 8000630:	8bfa      	ldrh	r2, [r7, #30]
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	429a      	cmp	r2, r3
 8000636:	d206      	bcs.n	8000646 <Filter_Colors_And_Get_Center+0x8a>
		  photo_buffer[i] = 0;
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800063e:	4413      	add	r3, r2
 8000640:	2200      	movs	r2, #0
 8000642:	801a      	strh	r2, [r3, #0]
 8000644:	e029      	b.n	800069a <Filter_Colors_And_Get_Center+0xde>
	  }
	  else{
		  a = rouge/100;
 8000646:	8bfb      	ldrh	r3, [r7, #30]
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <Filter_Colors_And_Get_Center+0x124>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	b29b      	uxth	r3, r3
 8000652:	617b      	str	r3, [r7, #20]
		  //Translate i into x and y coordinates
		  x += i%320 * a;
 8000654:	6a39      	ldr	r1, [r7, #32]
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <Filter_Colors_And_Get_Center+0x128>)
 8000658:	fb83 2301 	smull	r2, r3, r3, r1
 800065c:	11da      	asrs	r2, r3, #7
 800065e:	17cb      	asrs	r3, r1, #31
 8000660:	1ad2      	subs	r2, r2, r3
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	019b      	lsls	r3, r3, #6
 800066a:	1aca      	subs	r2, r1, r3
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	fb03 f302 	mul.w	r3, r3, r2
 8000672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000674:	4413      	add	r3, r2
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
		  y += i/320 * a;
 8000678:	6a3b      	ldr	r3, [r7, #32]
 800067a:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <Filter_Colors_And_Get_Center+0x128>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	11d2      	asrs	r2, r2, #7
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800068e:	4413      	add	r3, r2
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
		  nb_red_pix += a;
 8000692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4413      	add	r3, r2
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0;i<nb_pixels; i++){
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	3301      	adds	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	6a3a      	ldr	r2, [r7, #32]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	db9c      	blt.n	80005e2 <Filter_Colors_And_Get_Center+0x26>
	  }
	}
	//Divide by the number of pixels to get the average of the positions
	x /= nb_red_pix;
 80006a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	y /= nb_red_pix;
 80006b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28

	//"returning" the values
	*px = x;
 80006bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006c0:	601a      	str	r2, [r3, #0]
	*py = y;
 80006c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006c6:	601a      	str	r2, [r3, #0]
	*pcount = nb_red_pix;
 80006c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006cc:	601a      	str	r2, [r3, #0]

}
 80006ce:	bf00      	nop
 80006d0:	3734      	adds	r7, #52	; 0x34
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	fffff800 	.word	0xfffff800
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	66666667 	.word	0x66666667

080006e8 <TIM2_IRQHandler>:
int old_freq = 1;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TIM2_IRQHandler(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	if(position>30 || position < -30){
 80006ee:	4b56      	ldr	r3, [pc, #344]	; (8000848 <TIM2_IRQHandler+0x160>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b1e      	cmp	r3, #30
 80006f4:	dc04      	bgt.n	8000700 <TIM2_IRQHandler+0x18>
 80006f6:	4b54      	ldr	r3, [pc, #336]	; (8000848 <TIM2_IRQHandler+0x160>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f113 0f1e 	cmn.w	r3, #30
 80006fe:	da19      	bge.n	8000734 <TIM2_IRQHandler+0x4c>
		if(position>0){
 8000700:	4b51      	ldr	r3, [pc, #324]	; (8000848 <TIM2_IRQHandler+0x160>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	dd08      	ble.n	800071a <TIM2_IRQHandler+0x32>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
 8000708:	2140      	movs	r1, #64	; 0x40
 800070a:	4850      	ldr	r0, [pc, #320]	; (800084c <TIM2_IRQHandler+0x164>)
 800070c:	f004 ff8d 	bl	800562a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	484d      	ldr	r0, [pc, #308]	; (800084c <TIM2_IRQHandler+0x164>)
 8000716:	f004 ff6f 	bl	80055f8 <HAL_GPIO_WritePin>
		}
		if(position<0){
 800071a:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <TIM2_IRQHandler+0x160>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	da08      	bge.n	8000734 <TIM2_IRQHandler+0x4c>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	4849      	ldr	r0, [pc, #292]	; (800084c <TIM2_IRQHandler+0x164>)
 8000726:	f004 ff80 	bl	800562a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	4847      	ldr	r0, [pc, #284]	; (800084c <TIM2_IRQHandler+0x164>)
 8000730:	f004 ff62 	bl	80055f8 <HAL_GPIO_WritePin>
		}
	}
	if(position<30 && position > -30){
 8000734:	4b44      	ldr	r3, [pc, #272]	; (8000848 <TIM2_IRQHandler+0x160>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b1d      	cmp	r3, #29
 800073a:	dc0e      	bgt.n	800075a <TIM2_IRQHandler+0x72>
 800073c:	4b42      	ldr	r3, [pc, #264]	; (8000848 <TIM2_IRQHandler+0x160>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f113 0f1d 	cmn.w	r3, #29
 8000744:	db09      	blt.n	800075a <TIM2_IRQHandler+0x72>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	4840      	ldr	r0, [pc, #256]	; (800084c <TIM2_IRQHandler+0x164>)
 800074c:	f004 ff54 	bl	80055f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	483d      	ldr	r0, [pc, #244]	; (800084c <TIM2_IRQHandler+0x164>)
 8000756:	f004 ff4f 	bl	80055f8 <HAL_GPIO_WritePin>
	}
	//Calcul de freq
	absposition = (float)position;
 800075a:	4b3b      	ldr	r3, [pc, #236]	; (8000848 <TIM2_IRQHandler+0x160>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000766:	4b3a      	ldr	r3, [pc, #232]	; (8000850 <TIM2_IRQHandler+0x168>)
 8000768:	edc3 7a00 	vstr	s15, [r3]
	if(absposition<0) absposition = -absposition;
 800076c:	4b38      	ldr	r3, [pc, #224]	; (8000850 <TIM2_IRQHandler+0x168>)
 800076e:	edd3 7a00 	vldr	s15, [r3]
 8000772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d507      	bpl.n	800078c <TIM2_IRQHandler+0xa4>
 800077c:	4b34      	ldr	r3, [pc, #208]	; (8000850 <TIM2_IRQHandler+0x168>)
 800077e:	edd3 7a00 	vldr	s15, [r3]
 8000782:	eef1 7a67 	vneg.f32	s15, s15
 8000786:	4b32      	ldr	r3, [pc, #200]	; (8000850 <TIM2_IRQHandler+0x168>)
 8000788:	edc3 7a00 	vstr	s15, [r3]
	freq = 10*((float)(absposition/160));
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <TIM2_IRQHandler+0x168>)
 800078e:	ed93 7a00 	vldr	s14, [r3]
 8000792:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000854 <TIM2_IRQHandler+0x16c>
 8000796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800079a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800079e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a6:	ee17 2a90 	vmov	r2, s15
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <TIM2_IRQHandler+0x170>)
 80007ac:	601a      	str	r2, [r3, #0]
	if(freq < 2){
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <TIM2_IRQHandler+0x170>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	dc02      	bgt.n	80007bc <TIM2_IRQHandler+0xd4>
		freq = 2;
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <TIM2_IRQHandler+0x170>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	601a      	str	r2, [r3, #0]
	}
	if(old_freq != freq){
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <TIM2_IRQHandler+0x174>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <TIM2_IRQHandler+0x170>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d033      	beq.n	8000830 <TIM2_IRQHandler+0x148>
		//Update de TIM2
		__TIM2_CLK_ENABLE();
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <TIM2_IRQHandler+0x178>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a24      	ldr	r2, [pc, #144]	; (8000860 <TIM2_IRQHandler+0x178>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <TIM2_IRQHandler+0x178>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
		htim2.Instance = TIM2;
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <TIM2_IRQHandler+0x17c>)
 80007e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e6:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 10800-1;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <TIM2_IRQHandler+0x17c>)
 80007ea:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80007ee:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <TIM2_IRQHandler+0x17c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 9999/freq;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <TIM2_IRQHandler+0x170>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80007fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000802:	461a      	mov	r2, r3
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <TIM2_IRQHandler+0x17c>)
 8000806:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <TIM2_IRQHandler+0x17c>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <TIM2_IRQHandler+0x17c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
		HAL_TIM_Base_Init(&htim2);
 8000814:	4813      	ldr	r0, [pc, #76]	; (8000864 <TIM2_IRQHandler+0x17c>)
 8000816:	f007 f8ba 	bl	800798e <HAL_TIM_Base_Init>
		HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	201c      	movs	r0, #28
 8000820:	f002 fc0b 	bl	800303a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000824:	201c      	movs	r0, #28
 8000826:	f002 fc24 	bl	8003072 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Start_IT(&htim2);
 800082a:	480e      	ldr	r0, [pc, #56]	; (8000864 <TIM2_IRQHandler+0x17c>)
 800082c:	f007 f8da 	bl	80079e4 <HAL_TIM_Base_Start_IT>
	}

	old_freq = freq;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <TIM2_IRQHandler+0x170>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <TIM2_IRQHandler+0x174>)
 8000836:	6013      	str	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim2);
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <TIM2_IRQHandler+0x17c>)
 800083a:	f007 f8fd 	bl	8007a38 <HAL_TIM_IRQHandler>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000048 	.word	0x20000048
 800084c:	40021800 	.word	0x40021800
 8000850:	200002b0 	.word	0x200002b0
 8000854:	43200000 	.word	0x43200000
 8000858:	20000008 	.word	0x20000008
 800085c:	2000000c 	.word	0x2000000c
 8000860:	40023800 	.word	0x40023800
 8000864:	20025cec 	.word	0x20025cec

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08e      	sub	sp, #56	; 0x38
 800086c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	//TIM2
	__TIM2_CLK_ENABLE();
 800086e:	4b65      	ldr	r3, [pc, #404]	; (8000a04 <main+0x19c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a64      	ldr	r2, [pc, #400]	; (8000a04 <main+0x19c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b62      	ldr	r3, [pc, #392]	; (8000a04 <main+0x19c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
	htim2.Instance = TIM2;
 8000886:	4b60      	ldr	r3, [pc, #384]	; (8000a08 <main+0x1a0>)
 8000888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10800-1;
 800088e:	4b5e      	ldr	r3, [pc, #376]	; (8000a08 <main+0x1a0>)
 8000890:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000894:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b5c      	ldr	r3, [pc, #368]	; (8000a08 <main+0x1a0>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9999/freq;
 800089c:	4b5b      	ldr	r3, [pc, #364]	; (8000a0c <main+0x1a4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80008a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b57      	ldr	r3, [pc, #348]	; (8000a08 <main+0x1a0>)
 80008ac:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b56      	ldr	r3, [pc, #344]	; (8000a08 <main+0x1a0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b54      	ldr	r3, [pc, #336]	; (8000a08 <main+0x1a0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 80008ba:	4853      	ldr	r0, [pc, #332]	; (8000a08 <main+0x1a0>)
 80008bc:	f007 f867 	bl	800798e <HAL_TIM_Base_Init>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2101      	movs	r1, #1
 80008c4:	201c      	movs	r0, #28
 80008c6:	f002 fbb8 	bl	800303a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008ca:	201c      	movs	r0, #28
 80008cc:	f002 fbd1 	bl	8003072 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 80008d0:	484d      	ldr	r0, [pc, #308]	; (8000a08 <main+0x1a0>)
 80008d2:	f007 f887 	bl	80079e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f002 fa56 	bl	8002d86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f8a7 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 fb7b 	bl	8000fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008e2:	f000 fb0d 	bl	8000f00 <MX_DMA_Init>
  MX_DCMI_Init();
 80008e6:	f000 f93d 	bl	8000b64 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80008ea:	f000 f96f 	bl	8000bcc <MX_DMA2D_Init>
  MX_FMC_Init();
 80008ee:	f000 fb25 	bl	8000f3c <MX_FMC_Init>
  MX_USART1_UART_Init();
 80008f2:	f000 fad5 	bl	8000ea0 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 80008f6:	f000 f99b 	bl	8000c30 <MX_LTDC_Init>
  MX_TIM6_Init();
 80008fa:	f000 fa9b 	bl	8000e34 <MX_TIM6_Init>
  MX_TIM3_Init();
 80008fe:	f000 fa49 	bl	8000d94 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LTDC_Init(SDRAM_BANK_1_LTCD, 0, 0, 320, 240);
 8000902:	23f0      	movs	r3, #240	; 0xf0
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	4840      	ldr	r0, [pc, #256]	; (8000a10 <main+0x1a8>)
 8000910:	f000 ff86 	bl	8001820 <LTDC_Init>
  BSP_SDRAM_Init();
 8000914:	f001 fc60 	bl	80021d8 <BSP_SDRAM_Init>
  CAMERA_Init(CAMERA_R320x240);
 8000918:	2001      	movs	r0, #1
 800091a:	f001 f84d 	bl	80019b8 <CAMERA_Init>
  HAL_Delay(1000); //Delay for the camera to output correct data
 800091e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000922:	f002 fa8d 	bl	8002e40 <HAL_Delay>
  Im_size = 0x9600; //size=320*240*2/4
 8000926:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <main+0x1ac>)
 8000928:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800092c:	601a      	str	r2, [r3, #0]

  /* uncomment the following line in case of snapshot mode */
  //HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, SDRAM_BANK_1_DCMI, Im_size);
  /* uncomment the following line in case of continuous mode */
  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS , SDRAM_BANK_1_DCMI, Im_size);
 800092e:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <main+0x1ac>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000936:	2100      	movs	r1, #0
 8000938:	4837      	ldr	r0, [pc, #220]	; (8000a18 <main+0x1b0>)
 800093a:	f002 fc2f 	bl	800319c <HAL_DCMI_Start_DMA>

  // seuilBleu, seuilVert = partie qui passe
  uint16_t seuilRouge = 50, seuilVert = 50, seuilBleu = 50;
 800093e:	2332      	movs	r3, #50	; 0x32
 8000940:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000942:	2332      	movs	r3, #50	; 0x32
 8000944:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000946:	2332      	movs	r3, #50	; 0x32
 8000948:	847b      	strh	r3, [r7, #34]	; 0x22

  seuilVert = (uint16_t) seuilVert*2016/100;
 800094a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800094c:	4613      	mov	r3, r2
 800094e:	019b      	lsls	r3, r3, #6
 8000950:	1a9b      	subs	r3, r3, r2
 8000952:	015b      	lsls	r3, r3, #5
 8000954:	4a31      	ldr	r2, [pc, #196]	; (8000a1c <main+0x1b4>)
 8000956:	fb82 1203 	smull	r1, r2, r2, r3
 800095a:	1152      	asrs	r2, r2, #5
 800095c:	17db      	asrs	r3, r3, #31
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	84bb      	strh	r3, [r7, #36]	; 0x24
  seuilBleu = (uint16_t) seuilBleu*31/100;
 8000962:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000964:	4613      	mov	r3, r2
 8000966:	015b      	lsls	r3, r3, #5
 8000968:	1a9b      	subs	r3, r3, r2
 800096a:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <main+0x1b4>)
 800096c:	fb82 1203 	smull	r1, r2, r2, r3
 8000970:	1152      	asrs	r2, r2, #5
 8000972:	17db      	asrs	r3, r3, #31
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	847b      	strh	r3, [r7, #34]	; 0x22
  seuilRouge = (uint16_t) (100-seuilRouge)*63488/100;
 8000978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800097a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800097e:	b29b      	uxth	r3, r3
 8000980:	461a      	mov	r2, r3
 8000982:	4613      	mov	r3, r2
 8000984:	015b      	lsls	r3, r3, #5
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	02db      	lsls	r3, r3, #11
 800098a:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <main+0x1b4>)
 800098c:	fb82 1203 	smull	r1, r2, r2, r3
 8000990:	1152      	asrs	r2, r2, #5
 8000992:	17db      	asrs	r3, r3, #31
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	84fb      	strh	r3, [r7, #38]	; 0x26
  HAL_TIM_Base_Start_IT(&htim3);
 8000998:	4821      	ldr	r0, [pc, #132]	; (8000a20 <main+0x1b8>)
 800099a:	f007 f823 	bl	80079e4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_SDRAM_ReadData(SDRAM_BANK_1_DCMI, (uint32_t*)photo_buffer_32, SIZE_BUFFER_32);
 800099e:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80009a2:	4920      	ldr	r1, [pc, #128]	; (8000a24 <main+0x1bc>)
 80009a4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 80009a8:	f001 fcd4 	bl	8002354 <BSP_SDRAM_ReadData>
	  uint16_t* photo_buffer_16 = (uint16_t*) photo_buffer_32;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <main+0x1bc>)
 80009ae:	61fb      	str	r3, [r7, #28]

	  int x, y, k;
	  int* px = &x; int* py = &y; int* pk = &k;
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	463b      	mov	r3, r7
 80009bc:	613b      	str	r3, [r7, #16]

	  //uint16_t* photo_treated_buffer_16 = (uint16_t*) photo_treated_buffer_32;
	  //Gaussian_Filter(photo_buffer_16, photo_treated_buffer_16, NB_PIXELS);

	  Filter_Colors_And_Get_Center(seuilRouge,  seuilVert, seuilBleu, NB_PIXELS, photo_buffer_16, px, py, pk);
 80009be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80009c0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80009c2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	9303      	str	r3, [sp, #12]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	9302      	str	r3, [sp, #8]
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80009d8:	f7ff fdf0 	bl	80005bc <Filter_Colors_And_Get_Center>
	  Draw_Blue_Cross(x, y, 1, photo_buffer_16);
 80009dc:	68b8      	ldr	r0, [r7, #8]
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	2201      	movs	r2, #1
 80009e4:	f7ff fd90 	bl	8000508 <Draw_Blue_Cross>
	  position = x - 160;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3ba0      	subs	r3, #160	; 0xa0
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <main+0x1c0>)
 80009ee:	6013      	str	r3, [r2, #0]


	  BSP_SDRAM_WriteData(SDRAM_BANK_1_LTCD, (uint32_t*)photo_buffer_32, SIZE_BUFFER_32);
 80009f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80009f4:	490b      	ldr	r1, [pc, #44]	; (8000a24 <main+0x1bc>)
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <main+0x1a8>)
 80009f8:	f001 fcc4 	bl	8002384 <BSP_SDRAM_WriteData>
	  HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f002 fa1f 	bl	8002e40 <HAL_Delay>
  {
 8000a02:	e7cc      	b.n	800099e <main+0x136>
 8000a04:	40023800 	.word	0x40023800
 8000a08:	20025cec 	.word	0x20025cec
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	c0200000 	.word	0xc0200000
 8000a14:	200000ec 	.word	0x200000ec
 8000a18:	2000039c 	.word	0x2000039c
 8000a1c:	51eb851f 	.word	0x51eb851f
 8000a20:	200002b4 	.word	0x200002b4
 8000a24:	200004ac 	.word	0x200004ac
 8000a28:	20000048 	.word	0x20000048

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0b4      	sub	sp, #208	; 0xd0
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f008 f972 	bl	8008d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2284      	movs	r2, #132	; 0x84
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f008 f963 	bl	8008d24 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <SystemClock_Config+0x130>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a3e      	ldr	r2, [pc, #248]	; (8000b5c <SystemClock_Config+0x130>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <SystemClock_Config+0x130>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a76:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <SystemClock_Config+0x134>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a39      	ldr	r2, [pc, #228]	; (8000b60 <SystemClock_Config+0x134>)
 8000a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <SystemClock_Config+0x134>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a94:	2301      	movs	r3, #1
 8000a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aac:	2310      	movs	r3, #16
 8000aae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000ab2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ab6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f005 fdfa 	bl	80066c4 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ad6:	f000 ffad 	bl	8001a34 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ada:	f005 fda3 	bl	8006624 <HAL_PWREx_EnableOverDrive>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ae4:	f000 ffa6 	bl	8001a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000afa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000afe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b0a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b0e:	2106      	movs	r1, #6
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 f87b 	bl	8006c0c <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b1c:	f000 ff8a 	bl	8001a34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 8000b20:	2348      	movs	r3, #72	; 0x48
 8000b22:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b24:	23c0      	movs	r3, #192	; 0xc0
 8000b26:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	4618      	mov	r0, r3
 8000b46:	f006 fa33 	bl	8006fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000b50:	f000 ff70 	bl	8001a34 <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	37d0      	adds	r7, #208	; 0xd0
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000

08000b64 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <MX_DCMI_Init+0x64>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000b76:	2220      	movs	r2, #32
 8000b78:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_DCMI_Init+0x60>)
 8000bb2:	f002 fa79 	bl	80030a8 <HAL_DCMI_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000bbc:	f000 ff3a 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000039c 	.word	0x2000039c
 8000bc8:	50050000 	.word	0x50050000

08000bcc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_DMA2D_Init+0x5c>)
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <MX_DMA2D_Init+0x60>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_DMA2D_Init+0x5c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_DMA2D_Init+0x5c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_DMA2D_Init+0x5c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_DMA2D_Init+0x5c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_DMA2D_Init+0x5c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_DMA2D_Init+0x5c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_DMA2D_Init+0x5c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <MX_DMA2D_Init+0x5c>)
 8000c02:	f003 f8fd 	bl	8003e00 <HAL_DMA2D_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000c0c:	f000 ff12 	bl	8001a34 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c10:	2101      	movs	r1, #1
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_DMA2D_Init+0x5c>)
 8000c14:	f003 f93e 	bl	8003e94 <HAL_DMA2D_ConfigLayer>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000c1e:	f000 ff09 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20025cac 	.word	0x20025cac
 8000c2c:	4002b000 	.word	0x4002b000

08000c30 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b09a      	sub	sp, #104	; 0x68
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c3a:	2234      	movs	r2, #52	; 0x34
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f008 f870 	bl	8008d24 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000c44:	463b      	mov	r3, r7
 8000c46:	2234      	movs	r2, #52	; 0x34
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f008 f86a 	bl	8008d24 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c50:	4b4e      	ldr	r3, [pc, #312]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c52:	4a4f      	ldr	r2, [pc, #316]	; (8000d90 <MX_LTDC_Init+0x160>)
 8000c54:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c56:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c5c:	4b4b      	ldr	r3, [pc, #300]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c62:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c68:	4b48      	ldr	r3, [pc, #288]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000c74:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c76:	2203      	movs	r2, #3
 8000c78:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000c7a:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c7c:	220e      	movs	r2, #14
 8000c7e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000c80:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c82:	2205      	movs	r2, #5
 8000c84:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000c86:	4b41      	ldr	r3, [pc, #260]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c88:	f240 228e 	movw	r2, #654	; 0x28e
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000c8e:	4b3f      	ldr	r3, [pc, #252]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c90:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000c96:	4b3d      	ldr	r3, [pc, #244]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000c98:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000c9e:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000ca0:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ca6:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cae:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cb6:	4b35      	ldr	r3, [pc, #212]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cbe:	4833      	ldr	r0, [pc, #204]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000cc0:	f005 f9fa 	bl	80060b8 <HAL_LTDC_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000cca:	f000 feb3 	bl	8001a34 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d16:	2200      	movs	r2, #0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000d1c:	f005 fa9c 	bl	8006258 <HAL_LTDC_ConfigLayer>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000d26:	f000 fe85 	bl	8001a34 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2201      	movs	r2, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_LTDC_Init+0x15c>)
 8000d76:	f005 fa6f 	bl	8006258 <HAL_LTDC_ConfigLayer>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000d80:	f000 fe58 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	3768      	adds	r7, #104	; 0x68
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200002f4 	.word	0x200002f4
 8000d90:	40016800 	.word	0x40016800

08000d94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_TIM3_Init+0x98>)
 8000db4:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <MX_TIM3_Init+0x9c>)
 8000db6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_TIM3_Init+0x98>)
 8000dba:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000dbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_TIM3_Init+0x98>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_TIM3_Init+0x98>)
 8000dc8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_TIM3_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_TIM3_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dda:	4814      	ldr	r0, [pc, #80]	; (8000e2c <MX_TIM3_Init+0x98>)
 8000ddc:	f006 fdd7 	bl	800798e <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000de6:	f000 fe25 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_TIM3_Init+0x98>)
 8000df8:	f006 ff3e 	bl	8007c78 <HAL_TIM_ConfigClockSource>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000e02:	f000 fe17 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_TIM3_Init+0x98>)
 8000e14:	f007 f94c 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000e1e:	f000 fe09 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200002b4 	.word	0x200002b4
 8000e30:	40000400 	.word	0x40000400

08000e34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_TIM6_Init+0x64>)
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <MX_TIM6_Init+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_TIM6_Init+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_TIM6_Init+0x64>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_TIM6_Init+0x64>)
 8000e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e5c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_TIM6_Init+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <MX_TIM6_Init+0x64>)
 8000e66:	f006 fd92 	bl	800798e <HAL_TIM_Base_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e70:	f000 fde0 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_TIM6_Init+0x64>)
 8000e82:	f007 f915 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e8c:	f000 fdd2 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	2000046c 	.word	0x2000046c
 8000e9c:	40001000 	.word	0x40001000

08000ea0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <MX_USART1_UART_Init+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ee4:	f007 f990 	bl	8008208 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eee:	f000 fda1 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200003ec 	.word	0x200003ec
 8000efc:	40011000 	.word	0x40011000

08000f00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_DMA_Init+0x38>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <MX_DMA_Init+0x38>)
 8000f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_DMA_Init+0x38>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2039      	movs	r0, #57	; 0x39
 8000f24:	f002 f889 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f28:	2039      	movs	r0, #57	; 0x39
 8000f2a:	f002 f8a2 	bl	8003072 <HAL_NVIC_EnableIRQ>

}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f56:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <MX_FMC_Init+0x98>)
 8000f58:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f68:	2204      	movs	r2, #4
 8000f6a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f6e:	2210      	movs	r2, #16
 8000f70:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f74:	2240      	movs	r2, #64	; 0x40
 8000f76:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000f96:	2310      	movs	r3, #16
 8000f98:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000faa:	2310      	movs	r3, #16
 8000fac:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000fae:	2310      	movs	r3, #16
 8000fb0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_FMC_Init+0x94>)
 8000fb8:	f006 fbe8 	bl	800778c <HAL_SDRAM_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000fc2:	f000 fd37 	bl	8001a34 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20025d2c 	.word	0x20025d2c
 8000fd4:	a0000140 	.word	0xa0000140

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b090      	sub	sp, #64	; 0x40
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fee:	4bae      	ldr	r3, [pc, #696]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4aad      	ldr	r2, [pc, #692]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4bab      	ldr	r3, [pc, #684]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
 8001004:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001006:	4ba8      	ldr	r3, [pc, #672]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4aa7      	ldr	r2, [pc, #668]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 800100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4ba5      	ldr	r3, [pc, #660]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4ba2      	ldr	r3, [pc, #648]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4aa1      	ldr	r2, [pc, #644]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b9f      	ldr	r3, [pc, #636]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	623b      	str	r3, [r7, #32]
 8001034:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	4b9c      	ldr	r3, [pc, #624]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a9b      	ldr	r2, [pc, #620]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b99      	ldr	r3, [pc, #612]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b96      	ldr	r3, [pc, #600]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a95      	ldr	r2, [pc, #596]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b93      	ldr	r3, [pc, #588]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b90      	ldr	r3, [pc, #576]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a8f      	ldr	r2, [pc, #572]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b8d      	ldr	r3, [pc, #564]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800107e:	4b8a      	ldr	r3, [pc, #552]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a89      	ldr	r2, [pc, #548]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b87      	ldr	r3, [pc, #540]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001096:	4b84      	ldr	r3, [pc, #528]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a83      	ldr	r2, [pc, #524]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b81      	ldr	r3, [pc, #516]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80010ae:	4b7e      	ldr	r3, [pc, #504]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a7d      	ldr	r2, [pc, #500]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 80010b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b7b      	ldr	r3, [pc, #492]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c6:	4b78      	ldr	r3, [pc, #480]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a77      	ldr	r2, [pc, #476]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 80010cc:	f043 0320 	orr.w	r3, r3, #32
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	4b72      	ldr	r3, [pc, #456]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a71      	ldr	r2, [pc, #452]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <MX_GPIO_Init+0x2d0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2120      	movs	r1, #32
 80010fa:	486c      	ldr	r0, [pc, #432]	; (80012ac <MX_GPIO_Init+0x2d4>)
 80010fc:	f004 fa7c 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f241 010c 	movw	r1, #4108	; 0x100c
 8001106:	486a      	ldr	r0, [pc, #424]	; (80012b0 <MX_GPIO_Init+0x2d8>)
 8001108:	f004 fa76 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2108      	movs	r1, #8
 8001110:	4868      	ldr	r0, [pc, #416]	; (80012b4 <MX_GPIO_Init+0x2dc>)
 8001112:	f004 fa71 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111c:	4866      	ldr	r0, [pc, #408]	; (80012b8 <MX_GPIO_Init+0x2e0>)
 800111e:	f004 fa6b 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	21c8      	movs	r1, #200	; 0xc8
 8001126:	4865      	ldr	r0, [pc, #404]	; (80012bc <MX_GPIO_Init+0x2e4>)
 8001128:	f004 fa66 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800112c:	2308      	movs	r3, #8
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4860      	ldr	r0, [pc, #384]	; (80012c0 <MX_GPIO_Init+0x2e8>)
 8001140:	f004 f8b0 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001144:	2304      	movs	r3, #4
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001154:	2309      	movs	r3, #9
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115c:	4619      	mov	r1, r3
 800115e:	4858      	ldr	r0, [pc, #352]	; (80012c0 <MX_GPIO_Init+0x2e8>)
 8001160:	f004 f8a0 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001164:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001176:	230b      	movs	r3, #11
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117e:	4619      	mov	r1, r3
 8001180:	484e      	ldr	r0, [pc, #312]	; (80012bc <MX_GPIO_Init+0x2e4>)
 8001182:	f004 f88f 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118c:	2312      	movs	r3, #18
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001198:	2304      	movs	r3, #4
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4848      	ldr	r0, [pc, #288]	; (80012c4 <MX_GPIO_Init+0x2ec>)
 80011a4:	f004 f87e 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80011a8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011ba:	230a      	movs	r3, #10
 80011bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	483f      	ldr	r0, [pc, #252]	; (80012c4 <MX_GPIO_Init+0x2ec>)
 80011c6:	f004 f86d 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80011da:	2308      	movs	r3, #8
 80011dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e2:	4619      	mov	r1, r3
 80011e4:	4831      	ldr	r0, [pc, #196]	; (80012ac <MX_GPIO_Init+0x2d4>)
 80011e6:	f004 f85d 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80011ea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011fc:	230c      	movs	r3, #12
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001204:	4619      	mov	r1, r3
 8001206:	4830      	ldr	r0, [pc, #192]	; (80012c8 <MX_GPIO_Init+0x2f0>)
 8001208:	f004 f84c 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800120c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800121e:	2301      	movs	r3, #1
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001226:	4619      	mov	r1, r3
 8001228:	4828      	ldr	r0, [pc, #160]	; (80012cc <MX_GPIO_Init+0x2f4>)
 800122a:	f004 f83b 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800123e:	230a      	movs	r3, #10
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	481e      	ldr	r0, [pc, #120]	; (80012c4 <MX_GPIO_Init+0x2ec>)
 800124a:	f004 f82b 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001260:	4619      	mov	r1, r3
 8001262:	481b      	ldr	r0, [pc, #108]	; (80012d0 <MX_GPIO_Init+0x2f8>)
 8001264:	f004 f81e 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001268:	2340      	movs	r3, #64	; 0x40
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_GPIO_Init+0x2fc>)
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001278:	4619      	mov	r1, r3
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <MX_GPIO_Init+0x2d4>)
 800127c:	f004 f812 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001280:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001292:	230a      	movs	r3, #10
 8001294:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129a:	4619      	mov	r1, r3
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <MX_GPIO_Init+0x2f4>)
 800129e:	f004 f801 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80012a2:	23f0      	movs	r3, #240	; 0xf0
 80012a4:	e018      	b.n	80012d8 <MX_GPIO_Init+0x300>
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40022000 	.word	0x40022000
 80012b4:	40022800 	.word	0x40022800
 80012b8:	40021c00 	.word	0x40021c00
 80012bc:	40021800 	.word	0x40021800
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40022400 	.word	0x40022400
 80012d4:	10120000 	.word	0x10120000
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80012e6:	230a      	movs	r3, #10
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ee:	4619      	mov	r1, r3
 80012f0:	48bb      	ldr	r0, [pc, #748]	; (80015e0 <MX_GPIO_Init+0x608>)
 80012f2:	f003 ffd7 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80012f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001308:	230a      	movs	r3, #10
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001310:	4619      	mov	r1, r3
 8001312:	48b4      	ldr	r0, [pc, #720]	; (80015e4 <MX_GPIO_Init+0x60c>)
 8001314:	f003 ffc6 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001318:	2320      	movs	r3, #32
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132c:	4619      	mov	r1, r3
 800132e:	48ae      	ldr	r0, [pc, #696]	; (80015e8 <MX_GPIO_Init+0x610>)
 8001330:	f003 ffb8 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001334:	f241 030c 	movw	r3, #4108	; 0x100c
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134a:	4619      	mov	r1, r3
 800134c:	48a4      	ldr	r0, [pc, #656]	; (80015e0 <MX_GPIO_Init+0x608>)
 800134e:	f003 ffa9 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001364:	4619      	mov	r1, r3
 8001366:	48a1      	ldr	r0, [pc, #644]	; (80015ec <MX_GPIO_Init+0x614>)
 8001368:	f003 ff9c 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800136c:	2308      	movs	r3, #8
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001380:	4619      	mov	r1, r3
 8001382:	489b      	ldr	r0, [pc, #620]	; (80015f0 <MX_GPIO_Init+0x618>)
 8001384:	f003 ff8e 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001388:	2310      	movs	r3, #16
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001398:	4619      	mov	r1, r3
 800139a:	4893      	ldr	r0, [pc, #588]	; (80015e8 <MX_GPIO_Init+0x610>)
 800139c:	f003 ff82 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80013a0:	2304      	movs	r3, #4
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013b0:	230c      	movs	r3, #12
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b8:	4619      	mov	r1, r3
 80013ba:	488b      	ldr	r0, [pc, #556]	; (80015e8 <MX_GPIO_Init+0x610>)
 80013bc:	f003 ff72 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80013c0:	f248 0304 	movw	r3, #32772	; 0x8004
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d2:	4619      	mov	r1, r3
 80013d4:	4887      	ldr	r0, [pc, #540]	; (80015f4 <MX_GPIO_Init+0x61c>)
 80013d6:	f003 ff65 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80013da:	2302      	movs	r3, #2
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ea:	2305      	movs	r3, #5
 80013ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f2:	4619      	mov	r1, r3
 80013f4:	487a      	ldr	r0, [pc, #488]	; (80015e0 <MX_GPIO_Init+0x608>)
 80013f6:	f003 ff55 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80013fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001408:	2302      	movs	r3, #2
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001410:	4619      	mov	r1, r3
 8001412:	4878      	ldr	r0, [pc, #480]	; (80015f4 <MX_GPIO_Init+0x61c>)
 8001414:	f003 ff46 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001418:	2301      	movs	r3, #1
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001428:	2302      	movs	r3, #2
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001430:	4619      	mov	r1, r3
 8001432:	486b      	ldr	r0, [pc, #428]	; (80015e0 <MX_GPIO_Init+0x608>)
 8001434:	f003 ff36 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800144a:	2301      	movs	r3, #1
 800144c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001452:	4619      	mov	r1, r3
 8001454:	4868      	ldr	r0, [pc, #416]	; (80015f8 <MX_GPIO_Init+0x620>)
 8001456:	f003 ff25 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800145a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001460:	4b66      	ldr	r3, [pc, #408]	; (80015fc <MX_GPIO_Init+0x624>)
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800146c:	4619      	mov	r1, r3
 800146e:	485c      	ldr	r0, [pc, #368]	; (80015e0 <MX_GPIO_Init+0x608>)
 8001470:	f003 ff18 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001474:	23c0      	movs	r3, #192	; 0xc0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001484:	2308      	movs	r3, #8
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	4857      	ldr	r0, [pc, #348]	; (80015ec <MX_GPIO_Init+0x614>)
 8001490:	f003 ff08 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001494:	2310      	movs	r3, #16
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014a4:	230a      	movs	r3, #10
 80014a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ac:	4619      	mov	r1, r3
 80014ae:	4851      	ldr	r0, [pc, #324]	; (80015f4 <MX_GPIO_Init+0x61c>)
 80014b0:	f003 fef8 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin;
 80014b4:	23c0      	movs	r3, #192	; 0xc0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014c0:	2301      	movs	r3, #1
 80014c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c8:	4619      	mov	r1, r3
 80014ca:	4846      	ldr	r0, [pc, #280]	; (80015e4 <MX_GPIO_Init+0x60c>)
 80014cc:	f003 feea 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80014d0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d6:	2303      	movs	r3, #3
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e2:	4619      	mov	r1, r3
 80014e4:	4846      	ldr	r0, [pc, #280]	; (8001600 <MX_GPIO_Init+0x628>)
 80014e6:	f003 fedd 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80014ea:	2305      	movs	r3, #5
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014fa:	230a      	movs	r3, #10
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001502:	4619      	mov	r1, r3
 8001504:	4839      	ldr	r0, [pc, #228]	; (80015ec <MX_GPIO_Init+0x614>)
 8001506:	f003 fecd 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800150a:	2332      	movs	r3, #50	; 0x32
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800151a:	230b      	movs	r3, #11
 800151c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001522:	4619      	mov	r1, r3
 8001524:	4831      	ldr	r0, [pc, #196]	; (80015ec <MX_GPIO_Init+0x614>)
 8001526:	f003 febd 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800152a:	2304      	movs	r3, #4
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800153a:	2309      	movs	r3, #9
 800153c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001542:	4619      	mov	r1, r3
 8001544:	482f      	ldr	r0, [pc, #188]	; (8001604 <MX_GPIO_Init+0x62c>)
 8001546:	f003 fead 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800154a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800155c:	2309      	movs	r3, #9
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001564:	4619      	mov	r1, r3
 8001566:	4820      	ldr	r0, [pc, #128]	; (80015e8 <MX_GPIO_Init+0x610>)
 8001568:	f003 fe9c 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800156c:	2308      	movs	r3, #8
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001580:	4619      	mov	r1, r3
 8001582:	4818      	ldr	r0, [pc, #96]	; (80015e4 <MX_GPIO_Init+0x60c>)
 8001584:	f003 fe8e 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001588:	2304      	movs	r3, #4
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001598:	4619      	mov	r1, r3
 800159a:	4812      	ldr	r0, [pc, #72]	; (80015e4 <MX_GPIO_Init+0x60c>)
 800159c:	f003 fe82 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015a0:	2386      	movs	r3, #134	; 0x86
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b0:	230b      	movs	r3, #11
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b8:	4619      	mov	r1, r3
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <MX_GPIO_Init+0x620>)
 80015bc:	f003 fe72 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c4:	2303      	movs	r3, #3
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d0:	4619      	mov	r1, r3
 80015d2:	4809      	ldr	r0, [pc, #36]	; (80015f8 <MX_GPIO_Init+0x620>)
 80015d4:	f003 fe66 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80015d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015de:	e013      	b.n	8001608 <MX_GPIO_Init+0x630>
 80015e0:	40022000 	.word	0x40022000
 80015e4:	40021800 	.word	0x40021800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40022800 	.word	0x40022800
 80015f4:	40021c00 	.word	0x40021c00
 80015f8:	40020000 	.word	0x40020000
 80015fc:	10120000 	.word	0x10120000
 8001600:	40021400 	.word	0x40021400
 8001604:	40020400 	.word	0x40020400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001608:	2312      	movs	r3, #18
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160c:	2301      	movs	r3, #1
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001614:	2304      	movs	r3, #4
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161c:	4619      	mov	r1, r3
 800161e:	481c      	ldr	r0, [pc, #112]	; (8001690 <MX_GPIO_Init+0x6b8>)
 8001620:	f003 fe40 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001624:	2328      	movs	r3, #40	; 0x28
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001634:	230a      	movs	r3, #10
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800163c:	4619      	mov	r1, r3
 800163e:	4815      	ldr	r0, [pc, #84]	; (8001694 <MX_GPIO_Init+0x6bc>)
 8001640:	f003 fe30 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001644:	2340      	movs	r3, #64	; 0x40
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001654:	2309      	movs	r3, #9
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165c:	4619      	mov	r1, r3
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_GPIO_Init+0x6b8>)
 8001660:	f003 fe20 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001664:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001676:	2305      	movs	r3, #5
 8001678:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_GPIO_Init+0x6c0>)
 8001682:	f003 fe0f 	bl	80052a4 <HAL_GPIO_Init>

}
 8001686:	bf00      	nop
 8001688:	3740      	adds	r7, #64	; 0x40
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021c00 	.word	0x40021c00
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400

0800169c <LCD_GPIO_Init>:

/* USER CODE BEGIN 4 */
void LCD_GPIO_Init(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
 GPIO_InitTypeDef gpio_init_structure;
 /* Enable the LTDC and DMA2D clocks */
 __HAL_RCC_LTDC_CLK_ENABLE();
 80016a6:	4b58      	ldr	r3, [pc, #352]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a57      	ldr	r2, [pc, #348]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b55      	ldr	r3, [pc, #340]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ba:	623b      	str	r3, [r7, #32]
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 __HAL_RCC_DMA2D_CLK_ENABLE();
 80016be:	4b52      	ldr	r3, [pc, #328]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a51      	ldr	r2, [pc, #324]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 /* Enable GPIOs clock */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d6:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a4b      	ldr	r2, [pc, #300]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b49      	ldr	r3, [pc, #292]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a45      	ldr	r2, [pc, #276]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <LCD_GPIO_Init+0x16c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
 __HAL_RCC_GPIOI_CLK_ENABLE();
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <LCD_GPIO_Init+0x16c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a3f      	ldr	r2, [pc, #252]	; (8001808 <LCD_GPIO_Init+0x16c>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <LCD_GPIO_Init+0x16c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
 __HAL_RCC_GPIOJ_CLK_ENABLE();
 800171e:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <LCD_GPIO_Init+0x16c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a39      	ldr	r2, [pc, #228]	; (8001808 <LCD_GPIO_Init+0x16c>)
 8001724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <LCD_GPIO_Init+0x16c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOK_CLK_ENABLE();
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <LCD_GPIO_Init+0x16c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a33      	ldr	r2, [pc, #204]	; (8001808 <LCD_GPIO_Init+0x16c>)
 800173c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b31      	ldr	r3, [pc, #196]	; (8001808 <LCD_GPIO_Init+0x16c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
 /*** LTDC Pins configuration ***/
 /* GPIOE configuration */
 gpio_init_structure.Pin = GPIO_PIN_4;
 800174e:	2310      	movs	r3, #16
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
 gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800175a:	2302      	movs	r3, #2
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800175e:	230e      	movs	r3, #14
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4828      	ldr	r0, [pc, #160]	; (800180c <LCD_GPIO_Init+0x170>)
 800176a:	f003 fd9b 	bl	80052a4 <HAL_GPIO_Init>
 /* GPIOG configuration */
 gpio_init_structure.Pin = GPIO_PIN_12;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001778:	2309      	movs	r3, #9
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800177c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	4823      	ldr	r0, [pc, #140]	; (8001810 <LCD_GPIO_Init+0x174>)
 8001784:	f003 fd8e 	bl	80052a4 <HAL_GPIO_Init>
 /* GPIOI LTDC alternate configuration */
 gpio_init_structure.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_13 |
 8001788:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_PIN_14 | GPIO_PIN_15;
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001792:	230e      	movs	r3, #14
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	481d      	ldr	r0, [pc, #116]	; (8001814 <LCD_GPIO_Init+0x178>)
 800179e:	f003 fd81 	bl	80052a4 <HAL_GPIO_Init>
 /* GPIOJ configuration */
 gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 80017a2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_5
| GPIO_PIN_6 | GPIO_PIN_7 |GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80017ac:	230e      	movs	r3, #14
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <LCD_GPIO_Init+0x17c>)
 80017b8:	f003 fd74 	bl	80052a4 <HAL_GPIO_Init>
 /* GPIOK configuration */
 gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 80017bc:	23f7      	movs	r3, #247	; 0xf7
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
 gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80017c4:	230e      	movs	r3, #14
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	4813      	ldr	r0, [pc, #76]	; (800181c <LCD_GPIO_Init+0x180>)
 80017d0:	f003 fd68 	bl	80052a4 <HAL_GPIO_Init>
 /* LCD_DISP GPIO configuration */
 gpio_init_structure.Pin = GPIO_PIN_12; /* LCD_DISP pin has to be
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
manually controlled */
 gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
 HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	480b      	ldr	r0, [pc, #44]	; (8001814 <LCD_GPIO_Init+0x178>)
 80017e6:	f003 fd5d 	bl	80052a4 <HAL_GPIO_Init>
 /* LCD_BL_CTRL GPIO configuration */
 gpio_init_structure.Pin = GPIO_PIN_3; /* LCD_BL_CTRL pin has to be
 80017ea:	2308      	movs	r3, #8
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
manually controlled */
 gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
 HAL_GPIO_Init(GPIOK, &gpio_init_structure);}
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	4808      	ldr	r0, [pc, #32]	; (800181c <LCD_GPIO_Init+0x180>)
 80017fa:	f003 fd53 	bl	80052a4 <HAL_GPIO_Init>
 80017fe:	bf00      	nop
 8001800:	3738      	adds	r7, #56	; 0x38
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40021000 	.word	0x40021000
 8001810:	40021800 	.word	0x40021800
 8001814:	40022000 	.word	0x40022000
 8001818:	40022400 	.word	0x40022400
 800181c:	40022800 	.word	0x40022800

08001820 <LTDC_Init>:
static void LTDC_Init(uint32_t FB_Address, uint16_t Xpos, uint16_t Ypos,
uint16_t Width, uint16_t Height)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4603      	mov	r3, r0
 8001830:	817b      	strh	r3, [r7, #10]
 8001832:	460b      	mov	r3, r1
 8001834:	813b      	strh	r3, [r7, #8]
 8001836:	4613      	mov	r3, r2
 8001838:	80fb      	strh	r3, [r7, #6]
/* Timing Configuration */
 hltdc.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800183a:	4b57      	ldr	r3, [pc, #348]	; (8001998 <LTDC_Init+0x178>)
 800183c:	2228      	movs	r2, #40	; 0x28
 800183e:	615a      	str	r2, [r3, #20]
 hltdc.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001840:	4b55      	ldr	r3, [pc, #340]	; (8001998 <LTDC_Init+0x178>)
 8001842:	2209      	movs	r2, #9
 8001844:	619a      	str	r2, [r3, #24]
 hltdc.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001846:	4b54      	ldr	r3, [pc, #336]	; (8001998 <LTDC_Init+0x178>)
 8001848:	2235      	movs	r2, #53	; 0x35
 800184a:	61da      	str	r2, [r3, #28]
 hltdc.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800184c:	4b52      	ldr	r3, [pc, #328]	; (8001998 <LTDC_Init+0x178>)
 800184e:	220b      	movs	r2, #11
 8001850:	621a      	str	r2, [r3, #32]
 hltdc.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC +
 8001852:	4b51      	ldr	r3, [pc, #324]	; (8001998 <LTDC_Init+0x178>)
 8001854:	f240 121b 	movw	r2, #283	; 0x11b
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
RK043FN48H_VBP - 1);
 hltdc.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC +
 800185a:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <LTDC_Init+0x178>)
 800185c:	f240 2215 	movw	r2, #533	; 0x215
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
RK043FN48H_HBP - 1);
 hltdc.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC +
 8001862:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <LTDC_Init+0x178>)
 8001864:	f240 121d 	movw	r2, #285	; 0x11d
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
RK043FN48H_VBP + RK043FN48H_VFP - 1);
 hltdc.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC +
 800186a:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <LTDC_Init+0x178>)
 800186c:	f240 2235 	movw	r2, #565	; 0x235
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
RK043FN48H_HBP + RK043FN48H_HFP - 1);
 /* LCD clock configuration */
 periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001872:	4b4a      	ldr	r3, [pc, #296]	; (800199c <LTDC_Init+0x17c>)
 8001874:	2208      	movs	r2, #8
 8001876:	601a      	str	r2, [r3, #0]
 periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001878:	4b48      	ldr	r3, [pc, #288]	; (800199c <LTDC_Init+0x17c>)
 800187a:	22c0      	movs	r2, #192	; 0xc0
 800187c:	615a      	str	r2, [r3, #20]
 periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <LTDC_Init+0x17c>)
 8001880:	2205      	movs	r2, #5
 8001882:	61da      	str	r2, [r3, #28]
 periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001884:	4b45      	ldr	r3, [pc, #276]	; (800199c <LTDC_Init+0x17c>)
 8001886:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
 HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800188c:	4843      	ldr	r0, [pc, #268]	; (800199c <LTDC_Init+0x17c>)
 800188e:	f005 fb8f 	bl	8006fb0 <HAL_RCCEx_PeriphCLKConfig>
 /* Initialize the LCD pixel width and pixel height */
 hltdc.LayerCfg->ImageWidth = RK043FN48H_WIDTH;
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <LTDC_Init+0x178>)
 8001894:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001898:	661a      	str	r2, [r3, #96]	; 0x60
 hltdc.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <LTDC_Init+0x178>)
 800189c:	f44f 7288 	mov.w	r2, #272	; 0x110
 80018a0:	665a      	str	r2, [r3, #100]	; 0x64
 hltdc.Init.Backcolor.Blue = 0;/* Background value */
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <LTDC_Init+0x178>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 hltdc.Init.Backcolor.Green = 0;
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <LTDC_Init+0x178>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 hltdc.Init.Backcolor.Red = 0;
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <LTDC_Init+0x178>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 /* Polarity */
 hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <LTDC_Init+0x178>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
 hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018c0:	4b35      	ldr	r3, [pc, #212]	; (8001998 <LTDC_Init+0x178>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
 hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <LTDC_Init+0x178>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
 hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <LTDC_Init+0x178>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
 hltdc.Instance = LTDC;
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <LTDC_Init+0x178>)
 80018d4:	4a32      	ldr	r2, [pc, #200]	; (80019a0 <LTDC_Init+0x180>)
 80018d6:	601a      	str	r2, [r3, #0]
 if(HAL_LTDC_GetState(&hltdc) == HAL_LTDC_STATE_RESET)
 80018d8:	482f      	ldr	r0, [pc, #188]	; (8001998 <LTDC_Init+0x178>)
 80018da:	f004 fcfb 	bl	80062d4 <HAL_LTDC_GetState>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d103      	bne.n	80018ec <LTDC_Init+0xcc>
 {
 LCD_GPIO_Init(&hltdc, NULL);
 80018e4:	2100      	movs	r1, #0
 80018e6:	482c      	ldr	r0, [pc, #176]	; (8001998 <LTDC_Init+0x178>)
 80018e8:	f7ff fed8 	bl	800169c <LCD_GPIO_Init>
 }
 HAL_LTDC_Init(&hltdc);
 80018ec:	482a      	ldr	r0, [pc, #168]	; (8001998 <LTDC_Init+0x178>)
 80018ee:	f004 fbe3 	bl	80060b8 <HAL_LTDC_Init>
 /* Assert display enable LCD_DISP pin */
 HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f8:	482a      	ldr	r0, [pc, #168]	; (80019a4 <LTDC_Init+0x184>)
 80018fa:	f003 fe7d 	bl	80055f8 <HAL_GPIO_WritePin>
 /* Assert backlight LCD_BL_CTRL pin */
 HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80018fe:	2201      	movs	r2, #1
 8001900:	2108      	movs	r1, #8
 8001902:	4829      	ldr	r0, [pc, #164]	; (80019a8 <LTDC_Init+0x188>)
 8001904:	f003 fe78 	bl	80055f8 <HAL_GPIO_WritePin>
 DrawProp[0].pFont = &Font24 ;
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <LTDC_Init+0x18c>)
 800190a:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <LTDC_Init+0x190>)
 800190c:	609a      	str	r2, [r3, #8]
 /* Layer Init */
  layer_cfg.WindowX0 = Xpos;
 800190e:	897b      	ldrh	r3, [r7, #10]
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <LTDC_Init+0x194>)
 8001912:	6013      	str	r3, [r2, #0]
  layer_cfg.WindowX1 = Width;
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	4a27      	ldr	r2, [pc, #156]	; (80019b4 <LTDC_Init+0x194>)
 8001918:	6053      	str	r3, [r2, #4]
  layer_cfg.WindowY0 = Ypos;
 800191a:	893b      	ldrh	r3, [r7, #8]
 800191c:	4a25      	ldr	r2, [pc, #148]	; (80019b4 <LTDC_Init+0x194>)
 800191e:	6093      	str	r3, [r2, #8]
  layer_cfg.WindowY1 = Height;
 8001920:	8b3b      	ldrh	r3, [r7, #24]
 8001922:	4a24      	ldr	r2, [pc, #144]	; (80019b4 <LTDC_Init+0x194>)
 8001924:	60d3      	str	r3, [r2, #12]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <LTDC_Init+0x194>)
 8001928:	2202      	movs	r2, #2
 800192a:	611a      	str	r2, [r3, #16]
  layer_cfg.FBStartAdress = FB_Address;
 800192c:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <LTDC_Init+0x194>)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6253      	str	r3, [r2, #36]	; 0x24
  layer_cfg.Alpha = 255;
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <LTDC_Init+0x194>)
 8001934:	22ff      	movs	r2, #255	; 0xff
 8001936:	615a      	str	r2, [r3, #20]
  layer_cfg.Alpha0 = 0;
 8001938:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <LTDC_Init+0x194>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  layer_cfg.Backcolor.Blue = 0;
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <LTDC_Init+0x194>)
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  layer_cfg.Backcolor.Green = 0;
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <LTDC_Init+0x194>)
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  layer_cfg.Backcolor.Red = 0;
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <LTDC_Init+0x194>)
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <LTDC_Init+0x194>)
 8001958:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800195c:	61da      	str	r2, [r3, #28]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <LTDC_Init+0x194>)
 8001960:	2207      	movs	r2, #7
 8001962:	621a      	str	r2, [r3, #32]
  layer_cfg.ImageWidth = Width;
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <LTDC_Init+0x194>)
 8001968:	6293      	str	r3, [r2, #40]	; 0x28
  layer_cfg.ImageHeight = Height;
 800196a:	8b3b      	ldrh	r3, [r7, #24]
 800196c:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <LTDC_Init+0x194>)
 800196e:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, 1);
 8001970:	2201      	movs	r2, #1
 8001972:	4910      	ldr	r1, [pc, #64]	; (80019b4 <LTDC_Init+0x194>)
 8001974:	4808      	ldr	r0, [pc, #32]	; (8001998 <LTDC_Init+0x178>)
 8001976:	f004 fc6f 	bl	8006258 <HAL_LTDC_ConfigLayer>
  DrawProp[1].BackColor = ((uint32_t)0xFFFFFFFF);
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <LTDC_Init+0x18c>)
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	611a      	str	r2, [r3, #16]
  DrawProp[1].pFont = &Font24;
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <LTDC_Init+0x18c>)
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <LTDC_Init+0x190>)
 8001986:	615a      	str	r2, [r3, #20]
  DrawProp[1].TextColor = ((uint32_t)0xFF000000);
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <LTDC_Init+0x18c>)
 800198a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800198e:	60da      	str	r2, [r3, #12]
 }
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200002f4 	.word	0x200002f4
 800199c:	20000064 	.word	0x20000064
 80019a0:	40016800 	.word	0x40016800
 80019a4:	40022000 	.word	0x40022000
 80019a8:	40022800 	.word	0x40022800
 80019ac:	2000004c 	.word	0x2000004c
 80019b0:	20000000 	.word	0x20000000
 80019b4:	2000027c 	.word	0x2000027c

080019b8 <CAMERA_Init>:
 uint8_t CAMERA_Init(uint32_t Resolution) /*Camera initialization*/
 {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint8_t status = CAMERA_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
  /* Read ID of Camera module via I2C */
  if(ov9655_ReadID(CAMERA_I2C_ADDRESS) == OV9655_ID)
 80019c4:	2060      	movs	r0, #96	; 0x60
 80019c6:	f000 f95b 	bl	8001c80 <ov9655_ReadID>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b96      	cmp	r3, #150	; 0x96
 80019ce:	d117      	bne.n	8001a00 <CAMERA_Init+0x48>
  {
  camera_driv = &ov9655_drv;/* Initialize the camera driver structure */
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <CAMERA_Init+0x58>)
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <CAMERA_Init+0x5c>)
 80019d4:	601a      	str	r2, [r3, #0]
  CameraHwAddress = CAMERA_I2C_ADDRESS;
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <CAMERA_Init+0x60>)
 80019d8:	2260      	movs	r2, #96	; 0x60
 80019da:	601a      	str	r2, [r3, #0]
  if (Resolution == CAMERA_R320x240)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10b      	bne.n	80019fa <CAMERA_Init+0x42>
  {
  camera_driv->Init(CameraHwAddress, Resolution);
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <CAMERA_Init+0x58>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <CAMERA_Init+0x60>)
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	b292      	uxth	r2, r2
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4610      	mov	r0, r2
 80019f2:	4798      	blx	r3
  HAL_DCMI_DisableCROP(&hdcmi);
 80019f4:	4809      	ldr	r0, [pc, #36]	; (8001a1c <CAMERA_Init+0x64>)
 80019f6:	f001 fd31 	bl	800345c <HAL_DCMI_DisableCrop>
  }
  status = CAMERA_OK; /* Return CAMERA_OK status */
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	e001      	b.n	8001a04 <CAMERA_Init+0x4c>
  }
  else
  {
  status = CAMERA_NOT_SUPPORTED; /* Return CAMERA_NOT_SUPPORTED status */
 8001a00:	2304      	movs	r3, #4
 8001a02:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 }
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000218 	.word	0x20000218
 8001a14:	20000010 	.word	0x20000010
 8001a18:	200000e8 	.word	0x200000e8
 8001a1c:	2000039c 	.word	0x2000039c

08001a20 <HAL_TIM_PeriodElapsedCallback>:
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
     if (htim->Instance == htim3.Instance)
     {

     }
 }
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <ov9655_Init>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  resolution: Camera resolution
  * @retval None
  */
void ov9655_Init(uint16_t DeviceAddr, uint32_t resolution)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	80fb      	strh	r3, [r7, #6]
  uint32_t index;

  /* Initialize I2C */
  CAMERA_IO_Init();
 8001a50:	f000 fb74 	bl	800213c <CAMERA_IO_Init>

  /* Prepare the camera to be configured by resetting all its registers */
  CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_COM7, 0x80);
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	2112      	movs	r1, #18
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fb77 	bl	8002150 <CAMERA_IO_Write>
  CAMERA_Delay(200);
 8001a62:	20c8      	movs	r0, #200	; 0xc8
 8001a64:	f000 fbac 	bl	80021c0 <CAMERA_Delay>

  /* Initialize OV9655 */
  switch (resolution)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d85b      	bhi.n	8001b26 <ov9655_Init+0xe2>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <ov9655_Init+0x30>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001abb 	.word	0x08001abb
 8001a7c:	08001b27 	.word	0x08001b27
 8001a80:	08001af1 	.word	0x08001af1
  {
  case CAMERA_R160x120:
    {
      for(index=0; index<(sizeof(OV9655_QQVGA)/2); index++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e013      	b.n	8001ab2 <ov9655_Init+0x6e>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_QQVGA[index][0], OV9655_QQVGA[index][1]);
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	b2d8      	uxtb	r0, r3
 8001a8e:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <ov9655_Init+0xec>)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001a96:	4a26      	ldr	r2, [pc, #152]	; (8001b30 <ov9655_Init+0xec>)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f000 fb55 	bl	8002150 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f000 fb8a 	bl	80021c0 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2); index++)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b95      	cmp	r3, #149	; 0x95
 8001ab6:	d9e8      	bls.n	8001a8a <ov9655_Init+0x46>
      }
      break;
 8001ab8:	e036      	b.n	8001b28 <ov9655_Init+0xe4>
    }
  case CAMERA_R320x240:
    {
      for(index=0; index<(sizeof(OV9655_QVGA)/2); index++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	e013      	b.n	8001ae8 <ov9655_Init+0xa4>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_QVGA[index][0], OV9655_QVGA[index][1]);
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	b2d8      	uxtb	r0, r3
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <ov9655_Init+0xf0>)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001acc:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <ov9655_Init+0xf0>)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f000 fb3a 	bl	8002150 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 8001adc:	2002      	movs	r0, #2
 8001ade:	f000 fb6f 	bl	80021c0 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_QVGA)/2); index++)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b95      	cmp	r3, #149	; 0x95
 8001aec:	d9e8      	bls.n	8001ac0 <ov9655_Init+0x7c>
      }
      break;
 8001aee:	e01b      	b.n	8001b28 <ov9655_Init+0xe4>
      /* Not supported resolution */
      break;
    }
  case CAMERA_R640x480:
    {
      for(index=0; index<(sizeof(OV9655_VGA)/2); index++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e013      	b.n	8001b1e <ov9655_Init+0xda>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_VGA[index][0], OV9655_VGA[index][1]);
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	b2d8      	uxtb	r0, r3
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <ov9655_Init+0xf4>)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001b02:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <ov9655_Init+0xf4>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	785b      	ldrb	r3, [r3, #1]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f000 fb1f 	bl	8002150 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 8001b12:	2002      	movs	r0, #2
 8001b14:	f000 fb54 	bl	80021c0 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_VGA)/2); index++)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b92      	cmp	r3, #146	; 0x92
 8001b22:	d9e8      	bls.n	8001af6 <ov9655_Init+0xb2>
      }
      break;
 8001b24:	e000      	b.n	8001b28 <ov9655_Init+0xe4>
    }
  default:
    {
      break;
 8001b26:	bf00      	nop
    }
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	0800aa58 	.word	0x0800aa58
 8001b34:	0800a92c 	.word	0x0800a92c
 8001b38:	0800a804 	.word	0x0800a804

08001b3c <ov9655_Config>:
  * @param  value: Value to be configured
  * @param  brightness_value: Brightness value to be configured
  * @retval None
  */
void ov9655_Config(uint16_t DeviceAddr, uint32_t feature, uint32_t value, uint32_t brightness_value)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b08b      	sub	sp, #44	; 0x2c
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	4603      	mov	r3, r0
 8001b4a:	81fb      	strh	r3, [r7, #14]
  uint8_t tslb, mtx1, mtx2, mtx3, mtx4, mtx5, mtx6;
  uint64_t value_tmp;
  uint32_t br_value;

  /* Convert the input value into ov9655 parameters */
  value_tmp = ov9655_ConvertValue(feature, value);
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	68b8      	ldr	r0, [r7, #8]
 8001b50:	f000 f8aa 	bl	8001ca8 <ov9655_ConvertValue>
 8001b54:	e9c7 0108 	strd	r0, r1, [r7, #32]
  br_value = (uint32_t)ov9655_ConvertValue(CAMERA_CONTRAST_BRIGHTNESS, brightness_value);
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f8a4 	bl	8001ca8 <ov9655_ConvertValue>
 8001b60:	4603      	mov	r3, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	61fb      	str	r3, [r7, #28]

  switch(feature)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d015      	beq.n	8001b98 <ov9655_Config+0x5c>
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d302      	bcc.n	8001b76 <ov9655_Config+0x3a>
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d011      	beq.n	8001b98 <ov9655_Config+0x5c>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX6, mtx6);
      break;
    }
  default:
    {
      break;
 8001b74:	e080      	b.n	8001c78 <ov9655_Config+0x13c>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_BRTN, br_value);
 8001b76:	89fb      	ldrh	r3, [r7, #14]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	2155      	movs	r1, #85	; 0x55
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fae5 	bl	8002150 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_CNST1, value_tmp);
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b8e:	2156      	movs	r1, #86	; 0x56
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fadd 	bl	8002150 <CAMERA_IO_Write>
      break;
 8001b96:	e06f      	b.n	8001c78 <ov9655_Config+0x13c>
      tslb = (uint8_t)(value_tmp >> 48);
 8001b98:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f04f 0400 	mov.w	r4, #0
 8001ba4:	0c13      	lsrs	r3, r2, #16
 8001ba6:	2400      	movs	r4, #0
 8001ba8:	76fb      	strb	r3, [r7, #27]
      mtx1 = (uint8_t)(value_tmp >> 40);
 8001baa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	f04f 0400 	mov.w	r4, #0
 8001bb6:	0a13      	lsrs	r3, r2, #8
 8001bb8:	2400      	movs	r4, #0
 8001bba:	76bb      	strb	r3, [r7, #26]
      mtx2 = (uint8_t)(value_tmp >> 32);
 8001bbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	f04f 0400 	mov.w	r4, #0
 8001bc8:	0013      	movs	r3, r2
 8001bca:	2400      	movs	r4, #0
 8001bcc:	767b      	strb	r3, [r7, #25]
      mtx3 = (uint8_t)(value_tmp >> 24);
 8001bce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	f04f 0400 	mov.w	r4, #0
 8001bda:	0e0b      	lsrs	r3, r1, #24
 8001bdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001be0:	0e14      	lsrs	r4, r2, #24
 8001be2:	763b      	strb	r3, [r7, #24]
      mtx4 = (uint8_t)(value_tmp >> 16);
 8001be4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	f04f 0400 	mov.w	r4, #0
 8001bf0:	0c0b      	lsrs	r3, r1, #16
 8001bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001bf6:	0c14      	lsrs	r4, r2, #16
 8001bf8:	75fb      	strb	r3, [r7, #23]
      mtx5 = (uint8_t)(value_tmp >> 8);
 8001bfa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	f04f 0400 	mov.w	r4, #0
 8001c06:	0a0b      	lsrs	r3, r1, #8
 8001c08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c0c:	0a14      	lsrs	r4, r2, #8
 8001c0e:	75bb      	strb	r3, [r7, #22]
      mtx6 = (uint8_t)(value_tmp);
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	757b      	strb	r3, [r7, #21]
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_TSLB, tslb);
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	7efa      	ldrb	r2, [r7, #27]
 8001c1a:	213a      	movs	r1, #58	; 0x3a
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 fa97 	bl	8002150 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX1, mtx1);
 8001c22:	89fb      	ldrh	r3, [r7, #14]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	7eba      	ldrb	r2, [r7, #26]
 8001c28:	214f      	movs	r1, #79	; 0x4f
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fa90 	bl	8002150 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX2, mtx2);
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	7e7a      	ldrb	r2, [r7, #25]
 8001c36:	2150      	movs	r1, #80	; 0x50
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fa89 	bl	8002150 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX3, mtx3);
 8001c3e:	89fb      	ldrh	r3, [r7, #14]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	7e3a      	ldrb	r2, [r7, #24]
 8001c44:	2151      	movs	r1, #81	; 0x51
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fa82 	bl	8002150 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX4, mtx4);
 8001c4c:	89fb      	ldrh	r3, [r7, #14]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	7dfa      	ldrb	r2, [r7, #23]
 8001c52:	2152      	movs	r1, #82	; 0x52
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fa7b 	bl	8002150 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX5, mtx5);
 8001c5a:	89fb      	ldrh	r3, [r7, #14]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	7dba      	ldrb	r2, [r7, #22]
 8001c60:	2153      	movs	r1, #83	; 0x53
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fa74 	bl	8002150 <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX6, mtx6);
 8001c68:	89fb      	ldrh	r3, [r7, #14]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	7d7a      	ldrb	r2, [r7, #21]
 8001c6e:	2154      	movs	r1, #84	; 0x54
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fa6d 	bl	8002150 <CAMERA_IO_Write>
      break;
 8001c76:	bf00      	nop
    }
  }
}
 8001c78:	bf00      	nop
 8001c7a:	372c      	adds	r7, #44	; 0x2c
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}

08001c80 <ov9655_ReadID>:
  * @brief  Read the OV9655 Camera identity.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval the OV9655 ID
  */
uint16_t ov9655_ReadID(uint16_t DeviceAddr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C */
  CAMERA_IO_Init();
 8001c8a:	f000 fa57 	bl	800213c <CAMERA_IO_Init>

  /* Get the camera ID */
  return (CAMERA_IO_Read(DeviceAddr, OV9655_SENSOR_PIDH));
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	210a      	movs	r1, #10
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fa75 	bl	8002184 <CAMERA_IO_Read>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b29b      	uxth	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <ov9655_ConvertValue>:
  * @param  feature: Camera feature to be configured
  * @param  value: Value to be configured
  * @retval The converted value
  */
static uint64_t ov9655_ConvertValue(uint32_t feature, uint32_t value)
{
 8001ca8:	b490      	push	{r4, r7}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint64_t ret = 0;
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f04f 0400 	mov.w	r4, #0
 8001cba:	e9c7 3402 	strd	r3, r4, [r7, #8]

  switch(feature)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d005      	beq.n	8001cd0 <ov9655_ConvertValue+0x28>
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d332      	bcc.n	8001d2e <ov9655_ConvertValue+0x86>
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	f000 8099 	beq.w	8001e00 <ov9655_ConvertValue+0x158>
 8001cce:	e0c8      	b.n	8001e62 <ov9655_ConvertValue+0x1ba>
  {
  case CAMERA_BLACK_WHITE:
    {
      switch(value)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d824      	bhi.n	8001d20 <ov9655_ConvertValue+0x78>
 8001cd6:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <ov9655_ConvertValue+0x34>)
 8001cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cdc:	08001ced 	.word	0x08001ced
 8001ce0:	08001cfb 	.word	0x08001cfb
 8001ce4:	08001d07 	.word	0x08001d07
 8001ce8:	08001d15 	.word	0x08001d15
      {
      case CAMERA_BLACK_WHITE_BW:
        {
          ret =  OV9655_BLACK_WHITE_BW;
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 8001cf4:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001cf8:	e018      	b.n	8001d2c <ov9655_ConvertValue+0x84>
        }
      case CAMERA_BLACK_WHITE_NEGATIVE:
        {
          ret =  OV9655_BLACK_WHITE_NEGATIVE;
 8001cfa:	f248 0380 	movw	r3, #32896	; 0x8080
 8001cfe:	4c60      	ldr	r4, [pc, #384]	; (8001e80 <ov9655_ConvertValue+0x1d8>)
 8001d00:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001d04:	e012      	b.n	8001d2c <ov9655_ConvertValue+0x84>
        }
      case CAMERA_BLACK_WHITE_BW_NEGATIVE:
        {
          ret =  OV9655_BLACK_WHITE_BW_NEGATIVE;
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	f44f 046c 	mov.w	r4, #15466496	; 0xec0000
 8001d0e:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001d12:	e00b      	b.n	8001d2c <ov9655_ConvertValue+0x84>
        }
      case CAMERA_BLACK_WHITE_NORMAL:
        {
          ret =  OV9655_BLACK_WHITE_NORMAL;
 8001d14:	f248 0380 	movw	r3, #32896	; 0x8080
 8001d18:	4c5a      	ldr	r4, [pc, #360]	; (8001e84 <ov9655_ConvertValue+0x1dc>)
 8001d1a:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001d1e:	e005      	b.n	8001d2c <ov9655_ConvertValue+0x84>
        }
      default:
        {
          ret =  OV9655_BLACK_WHITE_NORMAL;
 8001d20:	f248 0380 	movw	r3, #32896	; 0x8080
 8001d24:	4c57      	ldr	r4, [pc, #348]	; (8001e84 <ov9655_ConvertValue+0x1dc>)
 8001d26:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001d2a:	bf00      	nop
        }
      }
      break;
 8001d2c:	e0a0      	b.n	8001e70 <ov9655_ConvertValue+0x1c8>
    }
  case CAMERA_CONTRAST_BRIGHTNESS:
    {
      switch(value)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	d85d      	bhi.n	8001df0 <ov9655_ConvertValue+0x148>
 8001d34:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <ov9655_ConvertValue+0x94>)
 8001d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3a:	bf00      	nop
 8001d3c:	08001d65 	.word	0x08001d65
 8001d40:	08001d73 	.word	0x08001d73
 8001d44:	08001d81 	.word	0x08001d81
 8001d48:	08001d8f 	.word	0x08001d8f
 8001d4c:	08001d9d 	.word	0x08001d9d
 8001d50:	08001dab 	.word	0x08001dab
 8001d54:	08001db9 	.word	0x08001db9
 8001d58:	08001dc7 	.word	0x08001dc7
 8001d5c:	08001dd5 	.word	0x08001dd5
 8001d60:	08001de3 	.word	0x08001de3
      {
      case CAMERA_BRIGHTNESS_LEVEL0:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL0;
 8001d64:	f04f 03b0 	mov.w	r3, #176	; 0xb0
 8001d68:	f04f 0400 	mov.w	r4, #0
 8001d6c:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001d70:	e045      	b.n	8001dfe <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL1:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL1;
 8001d72:	f04f 0398 	mov.w	r3, #152	; 0x98
 8001d76:	f04f 0400 	mov.w	r4, #0
 8001d7a:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001d7e:	e03e      	b.n	8001dfe <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL2:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL2;
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	f04f 0400 	mov.w	r4, #0
 8001d88:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001d8c:	e037      	b.n	8001dfe <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL3:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL3;
 8001d8e:	f04f 0318 	mov.w	r3, #24
 8001d92:	f04f 0400 	mov.w	r4, #0
 8001d96:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001d9a:	e030      	b.n	8001dfe <ov9655_ConvertValue+0x156>
        }
      case CAMERA_BRIGHTNESS_LEVEL4:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL4;
 8001d9c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001da0:	f04f 0400 	mov.w	r4, #0
 8001da4:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001da8:	e029      	b.n	8001dfe <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL0:
        {
          ret =  OV9655_CONTRAST_LEVEL0;
 8001daa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001dae:	f04f 0400 	mov.w	r4, #0
 8001db2:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001db6:	e022      	b.n	8001dfe <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL1:
        {
          ret =  OV9655_CONTRAST_LEVEL1;
 8001db8:	f04f 0338 	mov.w	r3, #56	; 0x38
 8001dbc:	f04f 0400 	mov.w	r4, #0
 8001dc0:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001dc4:	e01b      	b.n	8001dfe <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL2:
        {
          ret =  OV9655_CONTRAST_LEVEL2;
 8001dc6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001dca:	f04f 0400 	mov.w	r4, #0
 8001dce:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001dd2:	e014      	b.n	8001dfe <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL3:
        {
          ret =  OV9655_CONTRAST_LEVEL3;
 8001dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd8:	f04f 0400 	mov.w	r4, #0
 8001ddc:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001de0:	e00d      	b.n	8001dfe <ov9655_ConvertValue+0x156>
        }
      case CAMERA_CONTRAST_LEVEL4:
        {
          ret =  OV9655_CONTRAST_LEVEL4;
 8001de2:	f04f 0360 	mov.w	r3, #96	; 0x60
 8001de6:	f04f 0400 	mov.w	r4, #0
 8001dea:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001dee:	e006      	b.n	8001dfe <ov9655_ConvertValue+0x156>
        }
      default:
        {
          ret =  OV9655_CONTRAST_LEVEL0;
 8001df0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001df4:	f04f 0400 	mov.w	r4, #0
 8001df8:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001dfc:	bf00      	nop
        }
      }
      break;
 8001dfe:	e037      	b.n	8001e70 <ov9655_ConvertValue+0x1c8>
    }
  case CAMERA_COLOR_EFFECT:
    {
      switch(value)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d825      	bhi.n	8001e54 <ov9655_ConvertValue+0x1ac>
 8001e08:	a201      	add	r2, pc, #4	; (adr r2, 8001e10 <ov9655_ConvertValue+0x168>)
 8001e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0e:	bf00      	nop
 8001e10:	08001e2d 	.word	0x08001e2d
 8001e14:	08001e3b 	.word	0x08001e3b
 8001e18:	08001e49 	.word	0x08001e49
 8001e1c:	08001e21 	.word	0x08001e21
      {
      case CAMERA_COLOR_EFFECT_ANTIQUE:
        {
          ret =  OV9655_COLOR_EFFECT_ANTIQUE;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <ov9655_ConvertValue+0x1e0>)
 8001e22:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 8001e26:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001e2a:	e019      	b.n	8001e60 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_BLUE:
        {
          ret =  OV9655_COLOR_EFFECT_BLUE;
 8001e2c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8001e30:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 8001e34:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001e38:	e012      	b.n	8001e60 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_GREEN:
        {
          ret =  OV9655_COLOR_EFFECT_GREEN;
 8001e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e3e:	f44f 044c 	mov.w	r4, #13369344	; 0xcc0000
 8001e42:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001e46:	e00b      	b.n	8001e60 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_RED:
        {
          ret =  OV9655_COLOR_EFFECT_RED;
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	4c0f      	ldr	r4, [pc, #60]	; (8001e8c <ov9655_ConvertValue+0x1e4>)
 8001e4e:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001e52:	e005      	b.n	8001e60 <ov9655_ConvertValue+0x1b8>
        }
      case CAMERA_COLOR_EFFECT_NONE:
      default:
        {
          ret =  OV9655_COLOR_EFFECT_NONE;
 8001e54:	f248 0380 	movw	r3, #32896	; 0x8080
 8001e58:	4c0a      	ldr	r4, [pc, #40]	; (8001e84 <ov9655_ConvertValue+0x1dc>)
 8001e5a:	e9c7 3402 	strd	r3, r4, [r7, #8]
          break;
 8001e5e:	bf00      	nop
        }
      }
      break;
 8001e60:	e006      	b.n	8001e70 <ov9655_ConvertValue+0x1c8>
    default:
      {
        ret = 0;
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	f04f 0400 	mov.w	r4, #0
 8001e6a:	e9c7 3402 	strd	r3, r4, [r7, #8]
        break;
 8001e6e:	bf00      	nop
      }
    }
  }

  return ret;
 8001e70:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	4621      	mov	r1, r4
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc90      	pop	{r4, r7}
 8001e7e:	4770      	bx	lr
 8001e80:	00ec8080 	.word	0x00ec8080
 8001e84:	00cc8080 	.word	0x00cc8080
 8001e88:	20f00000 	.word	0x20f00000
 8001e8c:	00cc6000 	.word	0x00cc6000

08001e90 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a51      	ldr	r2, [pc, #324]	; (8001fe0 <I2Cx_MspInit+0x150>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d14d      	bne.n	8001f3c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ea0:	4b50      	ldr	r3, [pc, #320]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	4a4f      	ldr	r2, [pc, #316]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001eac:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001ebc:	2312      	movs	r3, #18
 8001ebe:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4845      	ldr	r0, [pc, #276]	; (8001fe8 <I2Cx_MspInit+0x158>)
 8001ed4:	f003 f9e6 	bl	80052a4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4840      	ldr	r0, [pc, #256]	; (8001fe8 <I2Cx_MspInit+0x158>)
 8001ee6:	f003 f9dd 	bl	80052a4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001eea:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a3d      	ldr	r2, [pc, #244]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001ef0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a37      	ldr	r2, [pc, #220]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f0c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001f0e:	4b35      	ldr	r3, [pc, #212]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a34      	ldr	r2, [pc, #208]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001f14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f18:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	2048      	movs	r0, #72	; 0x48
 8001f20:	f001 f88b 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001f24:	2048      	movs	r0, #72	; 0x48
 8001f26:	f001 f8a4 	bl	8003072 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	2049      	movs	r0, #73	; 0x49
 8001f30:	f001 f883 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001f34:	2049      	movs	r0, #73	; 0x49
 8001f36:	f001 f89c 	bl	8003072 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001f3a:	e04d      	b.n	8001fd8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f3c:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	6313      	str	r3, [r2, #48]	; 0x30
 8001f48:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f58:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f5a:	2312      	movs	r3, #18
 8001f5c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001f62:	2302      	movs	r3, #2
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001f66:	2304      	movs	r3, #4
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481e      	ldr	r0, [pc, #120]	; (8001fec <I2Cx_MspInit+0x15c>)
 8001f72:	f003 f997 	bl	80052a4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	481a      	ldr	r0, [pc, #104]	; (8001fec <I2Cx_MspInit+0x15c>)
 8001f84:	f003 f98e 	bl	80052a4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001faa:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <I2Cx_MspInit+0x154>)
 8001fb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fb6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	210f      	movs	r1, #15
 8001fbc:	201f      	movs	r0, #31
 8001fbe:	f001 f83c 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001fc2:	201f      	movs	r0, #31
 8001fc4:	f001 f855 	bl	8003072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	210f      	movs	r1, #15
 8001fcc:	2020      	movs	r0, #32
 8001fce:	f001 f834 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001fd2:	2020      	movs	r0, #32
 8001fd4:	f001 f84d 	bl	8003072 <HAL_NVIC_EnableIRQ>
}
 8001fd8:	bf00      	nop
 8001fda:	3730      	adds	r7, #48	; 0x30
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200000f0 	.word	0x200000f0
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40021c00 	.word	0x40021c00
 8001fec:	40020400 	.word	0x40020400

08001ff0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f003 fe33 	bl	8005c64 <HAL_I2C_GetState>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d125      	bne.n	8002050 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a14      	ldr	r2, [pc, #80]	; (8002058 <I2Cx_Init+0x68>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d103      	bne.n	8002014 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a13      	ldr	r2, [pc, #76]	; (800205c <I2Cx_Init+0x6c>)
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e002      	b.n	800201a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <I2Cx_Init+0x70>)
 8002018:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a11      	ldr	r2, [pc, #68]	; (8002064 <I2Cx_Init+0x74>)
 800201e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff23 	bl	8001e90 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f003 fb08 	bl	8005660 <HAL_I2C_Init>
  }
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200000f0 	.word	0x200000f0
 800205c:	40005c00 	.word	0x40005c00
 8002060:	40005400 	.word	0x40005400
 8002064:	40912732 	.word	0x40912732

08002068 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af04      	add	r7, sp, #16
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	72fb      	strb	r3, [r7, #11]
 800207a:	460b      	mov	r3, r1
 800207c:	813b      	strh	r3, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	b299      	uxth	r1, r3
 800208a:	88f8      	ldrh	r0, [r7, #6]
 800208c:	893a      	ldrh	r2, [r7, #8]
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	9302      	str	r3, [sp, #8]
 8002094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4603      	mov	r3, r0
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f003 fcc6 	bl	8005a30 <HAL_I2C_Mem_Read>
 80020a4:	4603      	mov	r3, r0
 80020a6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d004      	beq.n	80020b8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80020ae:	7afb      	ldrb	r3, [r7, #11]
 80020b0:	4619      	mov	r1, r3
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f832 	bl	800211c <I2Cx_Error>
  }
  return status;    
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b08a      	sub	sp, #40	; 0x28
 80020c6:	af04      	add	r7, sp, #16
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	4608      	mov	r0, r1
 80020cc:	4611      	mov	r1, r2
 80020ce:	461a      	mov	r2, r3
 80020d0:	4603      	mov	r3, r0
 80020d2:	72fb      	strb	r3, [r7, #11]
 80020d4:	460b      	mov	r3, r1
 80020d6:	813b      	strh	r3, [r7, #8]
 80020d8:	4613      	mov	r3, r2
 80020da:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	b299      	uxth	r1, r3
 80020e4:	88f8      	ldrh	r0, [r7, #6]
 80020e6:	893a      	ldrh	r2, [r7, #8]
 80020e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ec:	9302      	str	r3, [sp, #8]
 80020ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	4603      	mov	r3, r0
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f003 fb85 	bl	8005808 <HAL_I2C_Mem_Write>
 80020fe:	4603      	mov	r3, r0
 8002100:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002102:	7dfb      	ldrb	r3, [r7, #23]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	4619      	mov	r1, r3
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f805 	bl	800211c <I2Cx_Error>
  }
  return status;
 8002112:	7dfb      	ldrb	r3, [r7, #23]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f003 fb29 	bl	8005780 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ff5e 	bl	8001ff0 <I2Cx_Init>
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <CAMERA_IO_Init>:
/**
  * @brief  Initializes Camera low level.
  * @retval None
  */
void CAMERA_IO_Init(void) 
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cExtHandler);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <CAMERA_IO_Init+0x10>)
 8002142:	f7ff ff55 	bl	8001ff0 <I2Cx_Init>
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000013c 	.word	0x2000013c

08002150 <CAMERA_IO_Write>:
  * @param  Reg: Register address 
  * @param  Value: Data to be written
  * @retval None
  */
void CAMERA_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af02      	add	r7, sp, #8
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	460b      	mov	r3, r1
 800215c:	71bb      	strb	r3, [r7, #6]
 800215e:	4613      	mov	r3, r2
 8002160:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002162:	79bb      	ldrb	r3, [r7, #6]
 8002164:	b29a      	uxth	r2, r3
 8002166:	79f9      	ldrb	r1, [r7, #7]
 8002168:	2301      	movs	r3, #1
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	1d7b      	adds	r3, r7, #5
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2301      	movs	r3, #1
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <CAMERA_IO_Write+0x30>)
 8002174:	f7ff ffa5 	bl	80020c2 <I2Cx_WriteMultiple>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000013c 	.word	0x2000013c

08002184 <CAMERA_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address 
  * @retval Read data
  */
uint8_t CAMERA_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af02      	add	r7, sp, #8
 800218a:	4603      	mov	r3, r0
 800218c:	460a      	mov	r2, r1
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	4613      	mov	r3, r2
 8002192:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cExtHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002198:	79bb      	ldrb	r3, [r7, #6]
 800219a:	b29a      	uxth	r2, r3
 800219c:	79f9      	ldrb	r1, [r7, #7]
 800219e:	2301      	movs	r3, #1
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	f107 030f 	add.w	r3, r7, #15
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2301      	movs	r3, #1
 80021aa:	4804      	ldr	r0, [pc, #16]	; (80021bc <CAMERA_IO_Read+0x38>)
 80021ac:	f7ff ff5c 	bl	8002068 <I2Cx_ReadMultiple>

  return read_value;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000013c 	.word	0x2000013c

080021c0 <CAMERA_Delay>:
  * @brief  Camera delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void CAMERA_Delay(uint32_t Delay)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fe39 	bl	8002e40 <HAL_Delay>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80021dc:	4b29      	ldr	r3, [pc, #164]	; (8002284 <BSP_SDRAM_Init+0xac>)
 80021de:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <BSP_SDRAM_Init+0xb0>)
 80021e0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80021e2:	4b2a      	ldr	r3, [pc, #168]	; (800228c <BSP_SDRAM_Init+0xb4>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <BSP_SDRAM_Init+0xb4>)
 80021ea:	2207      	movs	r2, #7
 80021ec:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <BSP_SDRAM_Init+0xb4>)
 80021f0:	2204      	movs	r2, #4
 80021f2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <BSP_SDRAM_Init+0xb4>)
 80021f6:	2207      	movs	r2, #7
 80021f8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80021fa:	4b24      	ldr	r3, [pc, #144]	; (800228c <BSP_SDRAM_Init+0xb4>)
 80021fc:	2202      	movs	r2, #2
 80021fe:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <BSP_SDRAM_Init+0xb4>)
 8002202:	2202      	movs	r2, #2
 8002204:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <BSP_SDRAM_Init+0xb4>)
 8002208:	2202      	movs	r2, #2
 800220a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <BSP_SDRAM_Init+0xac>)
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <BSP_SDRAM_Init+0xac>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <BSP_SDRAM_Init+0xac>)
 800221a:	2204      	movs	r2, #4
 800221c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <BSP_SDRAM_Init+0xac>)
 8002220:	2210      	movs	r2, #16
 8002222:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <BSP_SDRAM_Init+0xac>)
 8002226:	2240      	movs	r2, #64	; 0x40
 8002228:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <BSP_SDRAM_Init+0xac>)
 800222c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002230:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <BSP_SDRAM_Init+0xac>)
 8002234:	2200      	movs	r2, #0
 8002236:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <BSP_SDRAM_Init+0xac>)
 800223a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800223e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <BSP_SDRAM_Init+0xac>)
 8002242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <BSP_SDRAM_Init+0xac>)
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800224e:	2100      	movs	r1, #0
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <BSP_SDRAM_Init+0xac>)
 8002252:	f000 f8af 	bl	80023b4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002256:	490d      	ldr	r1, [pc, #52]	; (800228c <BSP_SDRAM_Init+0xb4>)
 8002258:	480a      	ldr	r0, [pc, #40]	; (8002284 <BSP_SDRAM_Init+0xac>)
 800225a:	f005 fa97 	bl	800778c <HAL_SDRAM_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <BSP_SDRAM_Init+0xb8>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e002      	b.n	8002272 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <BSP_SDRAM_Init+0xb8>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002272:	f240 6003 	movw	r0, #1539	; 0x603
 8002276:	f000 f80d 	bl	8002294 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <BSP_SDRAM_Init+0xb8>)
 800227c:	781b      	ldrb	r3, [r3, #0]
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20025da0 	.word	0x20025da0
 8002288:	a0000140 	.word	0xa0000140
 800228c:	20000188 	.word	0x20000188
 8002290:	2000001c 	.word	0x2000001c

08002294 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a8:	2210      	movs	r2, #16
 80022aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022bc:	4923      	ldr	r1, [pc, #140]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022be:	4824      	ldr	r0, [pc, #144]	; (8002350 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022c0:	f005 fb1a 	bl	80078f8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f000 fdbb 	bl	8002e40 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022d2:	2210      	movs	r2, #16
 80022d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022d8:	2201      	movs	r2, #1
 80022da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80022e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e6:	4919      	ldr	r1, [pc, #100]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022e8:	4819      	ldr	r0, [pc, #100]	; (8002350 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022ea:	f005 fb05 	bl	80078f8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f0:	2203      	movs	r2, #3
 80022f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f6:	2210      	movs	r2, #16
 80022f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fc:	2208      	movs	r2, #8
 80022fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230a:	4910      	ldr	r1, [pc, #64]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800230c:	4810      	ldr	r0, [pc, #64]	; (8002350 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800230e:	f005 faf3 	bl	80078f8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002312:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002316:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231a:	2204      	movs	r2, #4
 800231c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002320:	2210      	movs	r2, #16
 8002322:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002326:	2201      	movs	r2, #1
 8002328:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002334:	4905      	ldr	r1, [pc, #20]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002338:	f005 fade 	bl	80078f8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4804      	ldr	r0, [pc, #16]	; (8002350 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002340:	f005 fb05 	bl	800794e <HAL_SDRAM_ProgramRefreshRate>
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200001a4 	.word	0x200001a4
 8002350:	20025da0 	.word	0x20025da0

08002354 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  if(HAL_SDRAM_Read_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8002360:	68f9      	ldr	r1, [r7, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	4806      	ldr	r0, [pc, #24]	; (8002380 <BSP_SDRAM_ReadData+0x2c>)
 8002368:	f005 fa44 	bl	80077f4 <HAL_SDRAM_Read_32b>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <BSP_SDRAM_ReadData+0x22>
  {
    return SDRAM_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <BSP_SDRAM_ReadData+0x24>
  }
  else
  {
    return SDRAM_OK;
 8002376:	2300      	movs	r3, #0
  } 
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20025da0 	.word	0x20025da0

08002384 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  if(HAL_SDRAM_Write_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8002390:	68f9      	ldr	r1, [r7, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	4806      	ldr	r0, [pc, #24]	; (80023b0 <BSP_SDRAM_WriteData+0x2c>)
 8002398:	f005 fa6b 	bl	8007872 <HAL_SDRAM_Write_32b>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <BSP_SDRAM_WriteData+0x22>
  {
    return SDRAM_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <BSP_SDRAM_WriteData+0x24>
  }
  else
  {
    return SDRAM_OK;
 80023a6:	2300      	movs	r3, #0
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20025da0 	.word	0x20025da0

080023b4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b090      	sub	sp, #64	; 0x40
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80023be:	4b70      	ldr	r3, [pc, #448]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	4a6f      	ldr	r2, [pc, #444]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6393      	str	r3, [r2, #56]	; 0x38
 80023ca:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80023d6:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a69      	ldr	r2, [pc, #420]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 80023dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b67      	ldr	r3, [pc, #412]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ee:	4b64      	ldr	r3, [pc, #400]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a63      	ldr	r2, [pc, #396]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002406:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a5d      	ldr	r2, [pc, #372]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800241e:	4b58      	ldr	r3, [pc, #352]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a57      	ldr	r2, [pc, #348]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 8002424:	f043 0310 	orr.w	r3, r3, #16
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b55      	ldr	r3, [pc, #340]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002436:	4b52      	ldr	r3, [pc, #328]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a51      	ldr	r2, [pc, #324]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 800243c:	f043 0320 	orr.w	r3, r3, #32
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b4f      	ldr	r3, [pc, #316]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800244e:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a4b      	ldr	r2, [pc, #300]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 8002454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b49      	ldr	r3, [pc, #292]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a45      	ldr	r2, [pc, #276]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b43      	ldr	r3, [pc, #268]	; (8002580 <BSP_SDRAM_MspInit+0x1cc>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002482:	2301      	movs	r3, #1
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002486:	2302      	movs	r3, #2
 8002488:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800248a:	230c      	movs	r3, #12
 800248c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800248e:	2308      	movs	r3, #8
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002496:	4619      	mov	r1, r3
 8002498:	483a      	ldr	r0, [pc, #232]	; (8002584 <BSP_SDRAM_MspInit+0x1d0>)
 800249a:	f002 ff03 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800249e:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80024a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a8:	4619      	mov	r1, r3
 80024aa:	4837      	ldr	r0, [pc, #220]	; (8002588 <BSP_SDRAM_MspInit+0x1d4>)
 80024ac:	f002 fefa 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80024b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80024b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ba:	4619      	mov	r1, r3
 80024bc:	4833      	ldr	r0, [pc, #204]	; (800258c <BSP_SDRAM_MspInit+0x1d8>)
 80024be:	f002 fef1 	bl	80052a4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80024c2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80024c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024cc:	4619      	mov	r1, r3
 80024ce:	4830      	ldr	r0, [pc, #192]	; (8002590 <BSP_SDRAM_MspInit+0x1dc>)
 80024d0:	f002 fee8 	bl	80052a4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80024d4:	f248 1333 	movw	r3, #33075	; 0x8133
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80024da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024de:	4619      	mov	r1, r3
 80024e0:	482c      	ldr	r0, [pc, #176]	; (8002594 <BSP_SDRAM_MspInit+0x1e0>)
 80024e2:	f002 fedf 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80024e6:	2328      	movs	r3, #40	; 0x28
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80024ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ee:	4619      	mov	r1, r3
 80024f0:	4829      	ldr	r0, [pc, #164]	; (8002598 <BSP_SDRAM_MspInit+0x1e4>)
 80024f2:	f002 fed7 	bl	80052a4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 8002504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002508:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 800250c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002510:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 8002514:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002518:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 800251c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002520:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 8002524:	2200      	movs	r2, #0
 8002526:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 800252a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800252e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 8002538:	2203      	movs	r2, #3
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 800253e:	2200      	movs	r2, #0
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 800254a:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <BSP_SDRAM_MspInit+0x1ec>)
 800254c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
 8002554:	4a11      	ldr	r2, [pc, #68]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800255a:	4810      	ldr	r0, [pc, #64]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 800255c:	f001 f908 	bl	8003770 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002560:	480e      	ldr	r0, [pc, #56]	; (800259c <BSP_SDRAM_MspInit+0x1e8>)
 8002562:	f001 f857 	bl	8003614 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	210f      	movs	r1, #15
 800256a:	2038      	movs	r0, #56	; 0x38
 800256c:	f000 fd65 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002570:	2038      	movs	r0, #56	; 0x38
 8002572:	f000 fd7e 	bl	8003072 <HAL_NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3740      	adds	r7, #64	; 0x40
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40020800 	.word	0x40020800
 8002588:	40020c00 	.word	0x40020c00
 800258c:	40021000 	.word	0x40021000
 8002590:	40021400 	.word	0x40021400
 8002594:	40021800 	.word	0x40021800
 8002598:	40021c00 	.word	0x40021c00
 800259c:	200001b4 	.word	0x200001b4
 80025a0:	40026410 	.word	0x40026410

080025a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_MspInit+0x44>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_MspInit+0x44>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_MspInit+0x44>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_MspInit+0x44>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_MspInit+0x44>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_MspInit+0x44>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08e      	sub	sp, #56	; 0x38
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a72      	ldr	r2, [pc, #456]	; (80027d4 <HAL_DCMI_MspInit+0x1e8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	f040 80de 	bne.w	80027cc <HAL_DCMI_MspInit+0x1e0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002610:	4b71      	ldr	r3, [pc, #452]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 8002612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002614:	4a70      	ldr	r2, [pc, #448]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6353      	str	r3, [r2, #52]	; 0x34
 800261c:	4b6e      	ldr	r3, [pc, #440]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002628:	4b6b      	ldr	r3, [pc, #428]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	4a6a      	ldr	r2, [pc, #424]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 800262e:	f043 0310 	orr.w	r3, r3, #16
 8002632:	6313      	str	r3, [r2, #48]	; 0x30
 8002634:	4b68      	ldr	r3, [pc, #416]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002640:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	4a64      	ldr	r2, [pc, #400]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 8002646:	f043 0308 	orr.w	r3, r3, #8
 800264a:	6313      	str	r3, [r2, #48]	; 0x30
 800264c:	4b62      	ldr	r3, [pc, #392]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002658:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	4a5e      	ldr	r2, [pc, #376]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 800265e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002662:	6313      	str	r3, [r2, #48]	; 0x30
 8002664:	4b5c      	ldr	r3, [pc, #368]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 8002676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267a:	6313      	str	r3, [r2, #48]	; 0x30
 800267c:	4b56      	ldr	r3, [pc, #344]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6313      	str	r3, [r2, #48]	; 0x30
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <HAL_DCMI_MspInit+0x1ec>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80026a0:	2360      	movs	r3, #96	; 0x60
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026b0:	230d      	movs	r3, #13
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b8:	4619      	mov	r1, r3
 80026ba:	4848      	ldr	r0, [pc, #288]	; (80027dc <HAL_DCMI_MspInit+0x1f0>)
 80026bc:	f002 fdf2 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80026c0:	2308      	movs	r3, #8
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026d0:	230d      	movs	r3, #13
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80026d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d8:	4619      	mov	r1, r3
 80026da:	4841      	ldr	r0, [pc, #260]	; (80027e0 <HAL_DCMI_MspInit+0x1f4>)
 80026dc:	f002 fde2 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80026e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026f2:	230d      	movs	r3, #13
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80026f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fa:	4619      	mov	r1, r3
 80026fc:	4839      	ldr	r0, [pc, #228]	; (80027e4 <HAL_DCMI_MspInit+0x1f8>)
 80026fe:	f002 fdd1 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002702:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002714:	230d      	movs	r3, #13
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800271c:	4619      	mov	r1, r3
 800271e:	4832      	ldr	r0, [pc, #200]	; (80027e8 <HAL_DCMI_MspInit+0x1fc>)
 8002720:	f002 fdc0 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002724:	2350      	movs	r3, #80	; 0x50
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002734:	230d      	movs	r3, #13
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273c:	4619      	mov	r1, r3
 800273e:	482b      	ldr	r0, [pc, #172]	; (80027ec <HAL_DCMI_MspInit+0x200>)
 8002740:	f002 fdb0 	bl	80052a4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 8002746:	4a2b      	ldr	r2, [pc, #172]	; (80027f4 <HAL_DCMI_MspInit+0x208>)
 8002748:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800274a:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 800274c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002750:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002752:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 8002760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002764:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 8002768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800276c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 8002770:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002774:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8002776:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 8002778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 8002780:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002784:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 8002788:	2204      	movs	r2, #4
 800278a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 800278e:	2203      	movs	r2, #3
 8002790:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
 8002792:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 8002794:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80027a0:	4813      	ldr	r0, [pc, #76]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 80027a2:	f000 ff37 	bl	8003614 <HAL_DMA_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_DCMI_MspInit+0x1c4>
    {
      Error_Handler();
 80027ac:	f7ff f942 	bl	8001a34 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 80027b4:	649a      	str	r2, [r3, #72]	; 0x48
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_DCMI_MspInit+0x204>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	204e      	movs	r0, #78	; 0x4e
 80027c2:	f000 fc3a 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80027c6:	204e      	movs	r0, #78	; 0x4e
 80027c8:	f000 fc53 	bl	8003072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80027cc:	bf00      	nop
 80027ce:	3738      	adds	r7, #56	; 0x38
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	50050000 	.word	0x50050000
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40020c00 	.word	0x40020c00
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40021c00 	.word	0x40021c00
 80027ec:	40020000 	.word	0x40020000
 80027f0:	2000021c 	.word	0x2000021c
 80027f4:	40026428 	.word	0x40026428

080027f8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_DMA2D_MspInit+0x38>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10b      	bne.n	8002822 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_DMA2D_MspInit+0x3c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a09      	ldr	r2, [pc, #36]	; (8002834 <HAL_DMA2D_MspInit+0x3c>)
 8002810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_DMA2D_MspInit+0x3c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	4002b000 	.word	0x4002b000
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08e      	sub	sp, #56	; 0x38
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a51      	ldr	r2, [pc, #324]	; (800299c <HAL_LTDC_MspInit+0x164>)
 8002856:	4293      	cmp	r3, r2
 8002858:	f040 809b 	bne.w	8002992 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	4a4f      	ldr	r2, [pc, #316]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 8002862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002866:	6453      	str	r3, [r2, #68]	; 0x44
 8002868:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002874:	4b4a      	ldr	r3, [pc, #296]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a49      	ldr	r2, [pc, #292]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 800287a:	f043 0310 	orr.w	r3, r3, #16
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800288c:	4b44      	ldr	r3, [pc, #272]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	4a43      	ldr	r2, [pc, #268]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 8002892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002896:	6313      	str	r3, [r2, #48]	; 0x30
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80028a4:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	4a3d      	ldr	r2, [pc, #244]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ae:	6313      	str	r3, [r2, #48]	; 0x30
 80028b0:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028bc:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	4a37      	ldr	r2, [pc, #220]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 80028c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c6:	6313      	str	r3, [r2, #48]	; 0x30
 80028c8:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80028d4:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 80028da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028de:	6313      	str	r3, [r2, #48]	; 0x30
 80028e0:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_LTDC_MspInit+0x168>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80028ec:	2310      	movs	r3, #16
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028fc:	230e      	movs	r3, #14
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002904:	4619      	mov	r1, r3
 8002906:	4827      	ldr	r0, [pc, #156]	; (80029a4 <HAL_LTDC_MspInit+0x16c>)
 8002908:	f002 fccc 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800290c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800291e:	230e      	movs	r3, #14
 8002920:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002926:	4619      	mov	r1, r3
 8002928:	481f      	ldr	r0, [pc, #124]	; (80029a8 <HAL_LTDC_MspInit+0x170>)
 800292a:	f002 fcbb 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800292e:	23f7      	movs	r3, #247	; 0xf7
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2300      	movs	r3, #0
 800293c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800293e:	230e      	movs	r3, #14
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002946:	4619      	mov	r1, r3
 8002948:	4818      	ldr	r0, [pc, #96]	; (80029ac <HAL_LTDC_MspInit+0x174>)
 800294a:	f002 fcab 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800294e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2300      	movs	r3, #0
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002960:	2309      	movs	r3, #9
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002968:	4619      	mov	r1, r3
 800296a:	4811      	ldr	r0, [pc, #68]	; (80029b0 <HAL_LTDC_MspInit+0x178>)
 800296c:	f002 fc9a 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002970:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	2302      	movs	r3, #2
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2300      	movs	r3, #0
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002982:	230e      	movs	r3, #14
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800298a:	4619      	mov	r1, r3
 800298c:	4809      	ldr	r0, [pc, #36]	; (80029b4 <HAL_LTDC_MspInit+0x17c>)
 800298e:	f002 fc89 	bl	80052a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002992:	bf00      	nop
 8002994:	3738      	adds	r7, #56	; 0x38
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40016800 	.word	0x40016800
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40022400 	.word	0x40022400
 80029ac:	40022800 	.word	0x40022800
 80029b0:	40021800 	.word	0x40021800
 80029b4:	40022000 	.word	0x40022000

080029b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <HAL_TIM_Base_MspInit+0xb0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d130      	bne.n	8002a3c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_TIM_Base_MspInit+0xb4>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <HAL_TIM_Base_MspInit+0xb4>)
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <HAL_TIM_Base_MspInit+0xb4>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <HAL_TIM_Base_MspInit+0xb4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_TIM_Base_MspInit+0xb4>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_TIM_Base_MspInit+0xb4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a16:	2300      	movs	r3, #0
 8002a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4812      	ldr	r0, [pc, #72]	; (8002a70 <HAL_TIM_Base_MspInit+0xb8>)
 8002a26:	f002 fc3d 	bl	80052a4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	201d      	movs	r0, #29
 8002a30:	f000 fb03 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a34:	201d      	movs	r0, #29
 8002a36:	f000 fb1c 	bl	8003072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002a3a:	e010      	b.n	8002a5e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <HAL_TIM_Base_MspInit+0xbc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d10b      	bne.n	8002a5e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_TIM_Base_MspInit+0xb4>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <HAL_TIM_Base_MspInit+0xb4>)
 8002a4c:	f043 0310 	orr.w	r3, r3, #16
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_TIM_Base_MspInit+0xb4>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
}
 8002a5e:	bf00      	nop
 8002a60:	3728      	adds	r7, #40	; 0x28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40001000 	.word	0x40001000

08002a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a25      	ldr	r2, [pc, #148]	; (8002b2c <HAL_UART_MspInit+0xb4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d144      	bne.n	8002b24 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a9a:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <HAL_UART_MspInit+0xb8>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <HAL_UART_MspInit+0xb8>)
 8002aa0:	f043 0310 	orr.w	r3, r3, #16
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_UART_MspInit+0xb8>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <HAL_UART_MspInit+0xb8>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <HAL_UART_MspInit+0xb8>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <HAL_UART_MspInit+0xb8>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_UART_MspInit+0xb8>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <HAL_UART_MspInit+0xb8>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_UART_MspInit+0xb8>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af2:	2307      	movs	r3, #7
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	4619      	mov	r1, r3
 8002afc:	480d      	ldr	r0, [pc, #52]	; (8002b34 <HAL_UART_MspInit+0xbc>)
 8002afe:	f002 fbd1 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b14:	2307      	movs	r3, #7
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4806      	ldr	r0, [pc, #24]	; (8002b38 <HAL_UART_MspInit+0xc0>)
 8002b20:	f002 fbc0 	bl	80052a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b24:	bf00      	nop
 8002b26:	3728      	adds	r7, #40	; 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40011000 	.word	0x40011000
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020000 	.word	0x40020000

08002b3c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b50:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <HAL_FMC_MspInit+0x100>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d16d      	bne.n	8002c34 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002b58:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <HAL_FMC_MspInit+0x100>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_FMC_MspInit+0x104>)
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <HAL_FMC_MspInit+0x104>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6393      	str	r3, [r2, #56]	; 0x38
 8002b6a:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <HAL_FMC_MspInit+0x104>)
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002b76:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b7a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b88:	230c      	movs	r3, #12
 8002b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	482c      	ldr	r0, [pc, #176]	; (8002c44 <HAL_FMC_MspInit+0x108>)
 8002b92:	f002 fb87 	bl	80052a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002b96:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b9a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ba8:	230c      	movs	r3, #12
 8002baa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4825      	ldr	r0, [pc, #148]	; (8002c48 <HAL_FMC_MspInit+0x10c>)
 8002bb2:	f002 fb77 	bl	80052a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002bb6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002bba:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bc8:	230c      	movs	r3, #12
 8002bca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	4619      	mov	r1, r3
 8002bd0:	481e      	ldr	r0, [pc, #120]	; (8002c4c <HAL_FMC_MspInit+0x110>)
 8002bd2:	f002 fb67 	bl	80052a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002bd6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002bda:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002be8:	230c      	movs	r3, #12
 8002bea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4817      	ldr	r0, [pc, #92]	; (8002c50 <HAL_FMC_MspInit+0x114>)
 8002bf2:	f002 fb57 	bl	80052a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002bf6:	2328      	movs	r3, #40	; 0x28
 8002bf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c06:	230c      	movs	r3, #12
 8002c08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4811      	ldr	r0, [pc, #68]	; (8002c54 <HAL_FMC_MspInit+0x118>)
 8002c10:	f002 fb48 	bl	80052a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002c14:	2308      	movs	r3, #8
 8002c16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c20:	2303      	movs	r3, #3
 8002c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c24:	230c      	movs	r3, #12
 8002c26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	480a      	ldr	r0, [pc, #40]	; (8002c58 <HAL_FMC_MspInit+0x11c>)
 8002c2e:	f002 fb39 	bl	80052a4 <HAL_GPIO_Init>
 8002c32:	e000      	b.n	8002c36 <HAL_FMC_MspInit+0xfa>
    return;
 8002c34:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000214 	.word	0x20000214
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40021800 	.word	0x40021800
 8002c4c:	40020c00 	.word	0x40020c00
 8002c50:	40021400 	.word	0x40021400
 8002c54:	40021c00 	.word	0x40021c00
 8002c58:	40020800 	.word	0x40020800

08002c5c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c64:	f7ff ff6a 	bl	8002b3c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <HardFault_Handler+0x4>

08002c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <MemManage_Handler+0x4>

08002c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <BusFault_Handler+0x4>

08002c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <UsageFault_Handler+0x4>

08002c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc4:	f000 f89c 	bl	8002e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <TIM3_IRQHandler+0x10>)
 8002cd2:	f004 feb1 	bl	8007a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200002b4 	.word	0x200002b4

08002ce0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <DMA2_Stream1_IRQHandler+0x10>)
 8002ce6:	f000 fe23 	bl	8003930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	2000021c 	.word	0x2000021c

08002cf4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <DCMI_IRQHandler+0x10>)
 8002cfa:	f000 fafd 	bl	80032f8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2000039c 	.word	0x2000039c

08002d08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d0c:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <SystemInit+0x28>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	4a07      	ldr	r2, [pc, #28]	; (8002d30 <SystemInit+0x28>)
 8002d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <SystemInit+0x28>)
 8002d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d22:	609a      	str	r2, [r3, #8]
#endif
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d3a:	e003      	b.n	8002d44 <LoopCopyDataInit>

08002d3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d42:	3104      	adds	r1, #4

08002d44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d44:	480b      	ldr	r0, [pc, #44]	; (8002d74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d4c:	d3f6      	bcc.n	8002d3c <CopyDataInit>
  ldr  r2, =_sbss
 8002d4e:	4a0b      	ldr	r2, [pc, #44]	; (8002d7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d50:	e002      	b.n	8002d58 <LoopFillZerobss>

08002d52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d54:	f842 3b04 	str.w	r3, [r2], #4

08002d58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d5c:	d3f9      	bcc.n	8002d52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d5e:	f7ff ffd3 	bl	8002d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d62:	f005 ffbb 	bl	8008cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d66:	f7fd fd7f 	bl	8000868 <main>
  bx  lr    
 8002d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d6c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002d70:	0800abb4 	.word	0x0800abb4
  ldr  r0, =_sdata
 8002d74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d78:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8002d7c:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8002d80:	20025dd8 	.word	0x20025dd8

08002d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d84:	e7fe      	b.n	8002d84 <ADC_IRQHandler>

08002d86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d8a:	2003      	movs	r0, #3
 8002d8c:	f000 f94a 	bl	8003024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f000 f805 	bl	8002da0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002d96:	f7ff fc05 	bl	80025a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_InitTick+0x54>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_InitTick+0x58>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4619      	mov	r1, r3
 8002db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f965 	bl	800308e <HAL_SYSTICK_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00e      	b.n	8002dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b0f      	cmp	r3, #15
 8002dd2:	d80a      	bhi.n	8002dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	f000 f92d 	bl	800303a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de0:	4a06      	ldr	r2, [pc, #24]	; (8002dfc <HAL_InitTick+0x5c>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e000      	b.n	8002dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000020 	.word	0x20000020
 8002df8:	20000028 	.word	0x20000028
 8002dfc:	20000024 	.word	0x20000024

08002e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_IncTick+0x20>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_IncTick+0x24>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <HAL_IncTick+0x24>)
 8002e12:	6013      	str	r3, [r2, #0]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000028 	.word	0x20000028
 8002e24:	20025dd4 	.word	0x20025dd4

08002e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_GetTick+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20025dd4 	.word	0x20025dd4

08002e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7ff ffee 	bl	8002e28 <HAL_GetTick>
 8002e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d005      	beq.n	8002e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_Delay+0x40>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e66:	bf00      	nop
 8002e68:	f7ff ffde 	bl	8002e28 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d8f7      	bhi.n	8002e68 <HAL_Delay+0x28>
  {
  }
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000028 	.word	0x20000028

08002e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	05fa0000 	.word	0x05fa0000

08002ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0307 	and.w	r3, r3, #7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db0b      	blt.n	8002f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4907      	ldr	r1, [pc, #28]	; (8002f20 <__NVIC_EnableIRQ+0x38>)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2001      	movs	r0, #1
 8002f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e100 	.word	0xe000e100

08002f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	6039      	str	r1, [r7, #0]
 8002f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db0a      	blt.n	8002f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	490c      	ldr	r1, [pc, #48]	; (8002f70 <__NVIC_SetPriority+0x4c>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	440b      	add	r3, r1
 8002f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f4c:	e00a      	b.n	8002f64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4908      	ldr	r1, [pc, #32]	; (8002f74 <__NVIC_SetPriority+0x50>)
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3b04      	subs	r3, #4
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	440b      	add	r3, r1
 8002f62:	761a      	strb	r2, [r3, #24]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000e100 	.word	0xe000e100
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f1c3 0307 	rsb	r3, r3, #7
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf28      	it	cs
 8002f96:	2304      	movcs	r3, #4
 8002f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d902      	bls.n	8002fa8 <NVIC_EncodePriority+0x30>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3b03      	subs	r3, #3
 8002fa6:	e000      	b.n	8002faa <NVIC_EncodePriority+0x32>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	401a      	ands	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43d9      	mvns	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	4313      	orrs	r3, r2
         );
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff0:	d301      	bcc.n	8002ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00f      	b.n	8003016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <SysTick_Config+0x40>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffe:	210f      	movs	r1, #15
 8003000:	f04f 30ff 	mov.w	r0, #4294967295
 8003004:	f7ff ff8e 	bl	8002f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <SysTick_Config+0x40>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <SysTick_Config+0x40>)
 8003010:	2207      	movs	r2, #7
 8003012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	e000e010 	.word	0xe000e010

08003024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff29 	bl	8002e84 <__NVIC_SetPriorityGrouping>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800304c:	f7ff ff3e 	bl	8002ecc <__NVIC_GetPriorityGrouping>
 8003050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	6978      	ldr	r0, [r7, #20]
 8003058:	f7ff ff8e 	bl	8002f78 <NVIC_EncodePriority>
 800305c:	4602      	mov	r2, r0
 800305e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff5d 	bl	8002f24 <__NVIC_SetPriority>
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff31 	bl	8002ee8 <__NVIC_EnableIRQ>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffa2 	bl	8002fe0 <SysTick_Config>
 800309c:	4603      	mov	r3, r0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e069      	b.n	800318e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff fa90 	bl	80025ec <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6819      	ldr	r1, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <HAL_DCMI_Init+0xf0>)
 80030ee:	400b      	ands	r3, r1
 80030f0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6819      	ldr	r1, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003106:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003112:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800311e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800312a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003136:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b10      	cmp	r3, #16
 8003146:	d112      	bne.n	800316e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	7f1b      	ldrb	r3, [r3, #28]
 800314c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7f5b      	ldrb	r3, [r3, #29]
 8003152:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003154:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7f9b      	ldrb	r3, [r3, #30]
 800315a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800315c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7fdb      	ldrb	r3, [r3, #31]
 8003164:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800316a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800316c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 021e 	orr.w	r2, r2, #30
 800317c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	ffe0f007 	.word	0xffe0f007

0800319c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_DCMI_Start_DMA+0x20>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e095      	b.n	80032e8 <HAL_DCMI_Start_DMA+0x14c>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031da:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0202 	bic.w	r2, r2, #2
 80031ea:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003200:	4a3b      	ldr	r2, [pc, #236]	; (80032f0 <HAL_DCMI_Start_DMA+0x154>)
 8003202:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003208:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <HAL_DCMI_Start_DMA+0x158>)
 800320a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003210:	2200      	movs	r2, #0
 8003212:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d20e      	bcs.n	8003252 <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3328      	adds	r3, #40	; 0x28
 800323e:	4619      	mov	r1, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	f000 faf2 	bl	800382c <HAL_DMA_Start_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d03f      	beq.n	80032ce <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e04a      	b.n	80032e8 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003256:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <HAL_DCMI_Start_DMA+0x154>)
 8003258:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800326c:	e009      	b.n	8003282 <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	085a      	lsrs	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	005a      	lsls	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d2f0      	bcs.n	800326e <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	1e9a      	subs	r2, r3, #2
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3328      	adds	r3, #40	; 0x28
 80032b4:	4619      	mov	r1, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	f000 fe7a 	bl	8003fb8 <HAL_DMAEx_MultiBufferStart_IT>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e00c      	b.n	80032e8 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	080034b1 	.word	0x080034b1
 80032f4:	080035db 	.word	0x080035db

080032f8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2204      	movs	r2, #4
 8003318:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	f043 0202 	orr.w	r2, r3, #2
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2204      	movs	r2, #4
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003332:	4a35      	ldr	r2, [pc, #212]	; (8003408 <HAL_DCMI_IRQHandler+0x110>)
 8003334:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fad6 	bl	80038ec <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01e      	beq.n	8003388 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2202      	movs	r2, #2
 8003350:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003356:	f043 0201 	orr.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2204      	movs	r2, #4
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336a:	4a27      	ldr	r2, [pc, #156]	; (8003408 <HAL_DCMI_IRQHandler+0x110>)
 800336c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003372:	4618      	mov	r0, r3
 8003374:	f000 faba 	bl	80038ec <HAL_DMA_Abort_IT>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f929 	bl	80035da <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d006      	beq.n	80033a0 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2210      	movs	r2, #16
 8003398:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f840 	bl	8003420 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2208      	movs	r2, #8
 80033b0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f83e 	bl	8003434 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01d      	beq.n	80033fe <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d107      	bne.n	80033e0 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 021e 	bic.w	r2, r2, #30
 80033de:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2201      	movs	r2, #1
 80033f6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f825 	bl	8003448 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	080035db 	.word	0x080035db

0800340c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_DCMI_DisableCrop+0x16>
 800346e:	2302      	movs	r3, #2
 8003470:	e018      	b.n	80034a4 <HAL_DCMI_DisableCrop+0x48>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0204 	bic.w	r2, r2, #4
 8003490:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d043      	beq.n	8003552 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d6:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d118      	bne.n	8003516 <DCMI_DMAXferCplt+0x66>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d015      	beq.n	8003516 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	00da      	lsls	r2, r3, #3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4413      	add	r3, r2
 8003502:	2200      	movs	r2, #0
 8003504:	4619      	mov	r1, r3
 8003506:	f001 fe8d 	bl	8005224 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	1e5a      	subs	r2, r3, #1
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
 8003514:	e044      	b.n	80035a0 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d13c      	bne.n	80035a0 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	00da      	lsls	r2, r3, #3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4413      	add	r3, r2
 800353e:	2201      	movs	r2, #1
 8003540:	4619      	mov	r1, r3
 8003542:	f001 fe6f 	bl	8005224 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	639a      	str	r2, [r3, #56]	; 0x38
 8003550:	e026      	b.n	80035a0 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	e017      	b.n	80035a0 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10f      	bne.n	80035a0 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	0099      	lsls	r1, r3, #2
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	440a      	add	r2, r1
 8003596:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d112      	bne.n	80035d2 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d103      	bne.n	80035d2 <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d009      	beq.n	8003606 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f7ff ff00 	bl	800340c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 800360c:	bf00      	nop
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003620:	f7ff fc02 	bl	8002e28 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e099      	b.n	8003764 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003650:	e00f      	b.n	8003672 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003652:	f7ff fbe9 	bl	8002e28 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b05      	cmp	r3, #5
 800365e:	d908      	bls.n	8003672 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2203      	movs	r2, #3
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e078      	b.n	8003764 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e8      	bne.n	8003652 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4b38      	ldr	r3, [pc, #224]	; (800376c <HAL_DMA_Init+0x158>)
 800368c:	4013      	ands	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800369e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d107      	bne.n	80036dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4313      	orrs	r3, r2
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0307 	bic.w	r3, r3, #7
 80036f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	2b04      	cmp	r3, #4
 8003704:	d117      	bne.n	8003736 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 faf7 	bl	8003d0c <DMA_CheckFifoParam>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003732:	2301      	movs	r3, #1
 8003734:	e016      	b.n	8003764 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 faae 	bl	8003ca0 <DMA_CalcBaseAndBitshift>
 8003744:	4603      	mov	r3, r0
 8003746:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374c:	223f      	movs	r2, #63	; 0x3f
 800374e:	409a      	lsls	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	f010803f 	.word	0xf010803f

08003770 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e050      	b.n	8003824 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d101      	bne.n	8003792 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
 8003790:	e048      	b.n	8003824 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2221      	movs	r2, #33	; 0x21
 80037d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa64 	bl	8003ca0 <DMA_CalcBaseAndBitshift>
 80037d8:	4603      	mov	r3, r0
 80037da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	223f      	movs	r2, #63	; 0x3f
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_DMA_Start_IT+0x26>
 800384e:	2302      	movs	r3, #2
 8003850:	e048      	b.n	80038e4 <HAL_DMA_Start_IT+0xb8>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d137      	bne.n	80038d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f9e2 	bl	8003c44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	223f      	movs	r2, #63	; 0x3f
 8003886:	409a      	lsls	r2, r3
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0216 	orr.w	r2, r2, #22
 800389a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e005      	b.n	80038e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038de:	2302      	movs	r3, #2
 80038e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d004      	beq.n	800390a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2280      	movs	r2, #128	; 0x80
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e00c      	b.n	8003924 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2205      	movs	r2, #5
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800393c:	4b92      	ldr	r3, [pc, #584]	; (8003b88 <HAL_DMA_IRQHandler+0x258>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a92      	ldr	r2, [pc, #584]	; (8003b8c <HAL_DMA_IRQHandler+0x25c>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0a9b      	lsrs	r3, r3, #10
 8003948:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	2208      	movs	r2, #8
 800395c:	409a      	lsls	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01a      	beq.n	800399c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d013      	beq.n	800399c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0204 	bic.w	r2, r2, #4
 8003982:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	2208      	movs	r2, #8
 800398a:	409a      	lsls	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	2201      	movs	r2, #1
 80039a2:	409a      	lsls	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d012      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	2201      	movs	r2, #1
 80039c0:	409a      	lsls	r2, r3
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ca:	f043 0202 	orr.w	r2, r3, #2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	2204      	movs	r2, #4
 80039d8:	409a      	lsls	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d012      	beq.n	8003a08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00b      	beq.n	8003a08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	2204      	movs	r2, #4
 80039f6:	409a      	lsls	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	f043 0204 	orr.w	r2, r3, #4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d043      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d03c      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d018      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d024      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4798      	blx	r3
 8003a5e:	e01f      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01b      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
 8003a70:	e016      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d107      	bne.n	8003a90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0208 	bic.w	r2, r2, #8
 8003a8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 808e 	beq.w	8003bce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8086 	beq.w	8003bce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d136      	bne.n	8003b48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0216 	bic.w	r2, r2, #22
 8003ae8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003af8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <HAL_DMA_IRQHandler+0x1da>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0208 	bic.w	r2, r2, #8
 8003b18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	223f      	movs	r2, #63	; 0x3f
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d07d      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
        }
        return;
 8003b46:	e078      	b.n	8003c3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01c      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d108      	bne.n	8003b76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d030      	beq.n	8003bce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
 8003b74:	e02b      	b.n	8003bce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d027      	beq.n	8003bce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
 8003b86:	e022      	b.n	8003bce <HAL_DMA_IRQHandler+0x29e>
 8003b88:	20000020 	.word	0x20000020
 8003b8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10f      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0210 	bic.w	r2, r2, #16
 8003bac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d032      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d022      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2205      	movs	r2, #5
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d307      	bcc.n	8003c16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f2      	bne.n	8003bfa <HAL_DMA_IRQHandler+0x2ca>
 8003c14:	e000      	b.n	8003c18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
 8003c38:	e000      	b.n	8003c3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c3a:	bf00      	nop
    }
  }
}
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop

08003c44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d108      	bne.n	8003c84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c82:	e007      	b.n	8003c94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	60da      	str	r2, [r3, #12]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	3b10      	subs	r3, #16
 8003cb0:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <DMA_CalcBaseAndBitshift+0x60>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cba:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <DMA_CalcBaseAndBitshift+0x64>)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d908      	bls.n	8003ce0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <DMA_CalcBaseAndBitshift+0x68>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	1d1a      	adds	r2, r3, #4
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	659a      	str	r2, [r3, #88]	; 0x58
 8003cde:	e006      	b.n	8003cee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <DMA_CalcBaseAndBitshift+0x68>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	aaaaaaab 	.word	0xaaaaaaab
 8003d04:	0800ab9c 	.word	0x0800ab9c
 8003d08:	fffffc00 	.word	0xfffffc00

08003d0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11f      	bne.n	8003d66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d855      	bhi.n	8003dd8 <DMA_CheckFifoParam+0xcc>
 8003d2c:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <DMA_CheckFifoParam+0x28>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d45 	.word	0x08003d45
 8003d38:	08003d57 	.word	0x08003d57
 8003d3c:	08003d45 	.word	0x08003d45
 8003d40:	08003dd9 	.word	0x08003dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d045      	beq.n	8003ddc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d54:	e042      	b.n	8003ddc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d5e:	d13f      	bne.n	8003de0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d64:	e03c      	b.n	8003de0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6e:	d121      	bne.n	8003db4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d836      	bhi.n	8003de4 <DMA_CheckFifoParam+0xd8>
 8003d76:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <DMA_CheckFifoParam+0x70>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d93 	.word	0x08003d93
 8003d84:	08003d8d 	.word	0x08003d8d
 8003d88:	08003da5 	.word	0x08003da5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d90:	e02f      	b.n	8003df2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d024      	beq.n	8003de8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da2:	e021      	b.n	8003de8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dac:	d11e      	bne.n	8003dec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003db2:	e01b      	b.n	8003dec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d902      	bls.n	8003dc0 <DMA_CheckFifoParam+0xb4>
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d003      	beq.n	8003dc6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dbe:	e018      	b.n	8003df2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc4:	e015      	b.n	8003df2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00e      	beq.n	8003df0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd6:	e00b      	b.n	8003df0 <DMA_CheckFifoParam+0xe4>
      break;
 8003dd8:	bf00      	nop
 8003dda:	e00a      	b.n	8003df2 <DMA_CheckFifoParam+0xe6>
      break;
 8003ddc:	bf00      	nop
 8003dde:	e008      	b.n	8003df2 <DMA_CheckFifoParam+0xe6>
      break;
 8003de0:	bf00      	nop
 8003de2:	e006      	b.n	8003df2 <DMA_CheckFifoParam+0xe6>
      break;
 8003de4:	bf00      	nop
 8003de6:	e004      	b.n	8003df2 <DMA_CheckFifoParam+0xe6>
      break;
 8003de8:	bf00      	nop
 8003dea:	e002      	b.n	8003df2 <DMA_CheckFifoParam+0xe6>
      break;   
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <DMA_CheckFifoParam+0xe6>
      break;
 8003df0:	bf00      	nop
    }
  } 
  
  return status; 
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e039      	b.n	8003e86 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fe fce6 	bl	80027f8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e50:	f023 0107 	bic.w	r1, r3, #7
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <HAL_DMA2D_Init+0x90>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68d1      	ldr	r1, [r2, #12]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	430b      	orrs	r3, r1
 8003e74:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	ffffc000 	.word	0xffffc000

08003e94 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_DMA2D_ConfigLayer+0x20>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e079      	b.n	8003fa8 <HAL_DMA2D_ConfigLayer+0x114>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	3318      	adds	r3, #24
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003ede:	4b35      	ldr	r3, [pc, #212]	; (8003fb4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003ee0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b0a      	cmp	r3, #10
 8003ee8:	d003      	beq.n	8003ef2 <HAL_DMA2D_ConfigLayer+0x5e>
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b09      	cmp	r3, #9
 8003ef0:	d107      	bne.n	8003f02 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e005      	b.n	8003f0e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	061b      	lsls	r3, r3, #24
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d120      	bne.n	8003f56 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	ea02 0103 	and.w	r1, r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b0a      	cmp	r3, #10
 8003f3c:	d003      	beq.n	8003f46 <HAL_DMA2D_ConfigLayer+0xb2>
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b09      	cmp	r3, #9
 8003f44:	d127      	bne.n	8003f96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
 8003f54:	e01f      	b.n	8003f96 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	ea02 0103 	and.w	r1, r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b0a      	cmp	r3, #10
 8003f7e:	d003      	beq.n	8003f88 <HAL_DMA2D_ConfigLayer+0xf4>
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	d106      	bne.n	8003f96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003f94:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	ff03000f 	.word	0xff03000f

08003fb8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d106      	bne.n	8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f001 b901 	b.w	80051e2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d102      	bne.n	8003ff0 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8003fea:	2302      	movs	r3, #2
 8003fec:	f001 b8f9 	b.w	80051e2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	f041 80e7 	bne.w	80051d4 <HAL_DMAEx_MultiBufferStart_IT+0x121c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004022:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f001 f910 	bl	8005258 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	4b99      	ldr	r3, [pc, #612]	; (80042a4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004040:	429a      	cmp	r2, r3
 8004042:	d960      	bls.n	8004106 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a97      	ldr	r2, [pc, #604]	; (80042a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d057      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a96      	ldr	r2, [pc, #600]	; (80042ac <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d050      	beq.n	80040fa <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a94      	ldr	r2, [pc, #592]	; (80042b0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d049      	beq.n	80040f6 <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a93      	ldr	r2, [pc, #588]	; (80042b4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d042      	beq.n	80040f2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a91      	ldr	r2, [pc, #580]	; (80042b8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d03a      	beq.n	80040ec <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a90      	ldr	r2, [pc, #576]	; (80042bc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d032      	beq.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a8e      	ldr	r2, [pc, #568]	; (80042c0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d02a      	beq.n	80040e0 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a8d      	ldr	r2, [pc, #564]	; (80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d022      	beq.n	80040da <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a8b      	ldr	r2, [pc, #556]	; (80042c8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01a      	beq.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a8a      	ldr	r2, [pc, #552]	; (80042cc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d012      	beq.n	80040ce <HAL_DMAEx_MultiBufferStart_IT+0x116>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a88      	ldr	r2, [pc, #544]	; (80042d0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00a      	beq.n	80040c8 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a87      	ldr	r2, [pc, #540]	; (80042d4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d102      	bne.n	80040c2 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 80040bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040c0:	e01e      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040c6:	e01b      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040cc:	e018      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040d2:	e015      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040d8:	e012      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040de:	e00f      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040e4:	e00c      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040ea:	e009      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040f0:	e006      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040f2:	2320      	movs	r3, #32
 80040f4:	e004      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040f6:	2320      	movs	r3, #32
 80040f8:	e002      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040fa:	2320      	movs	r3, #32
 80040fc:	e000      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040fe:	2320      	movs	r3, #32
 8004100:	4a75      	ldr	r2, [pc, #468]	; (80042d8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	e150      	b.n	80043a8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	4b73      	ldr	r3, [pc, #460]	; (80042dc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800410e:	429a      	cmp	r2, r3
 8004110:	d960      	bls.n	80041d4 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a64      	ldr	r2, [pc, #400]	; (80042a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d057      	beq.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a62      	ldr	r2, [pc, #392]	; (80042ac <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d050      	beq.n	80041c8 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a61      	ldr	r2, [pc, #388]	; (80042b0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d049      	beq.n	80041c4 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a5f      	ldr	r2, [pc, #380]	; (80042b4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d042      	beq.n	80041c0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a5e      	ldr	r2, [pc, #376]	; (80042b8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d03a      	beq.n	80041ba <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a5c      	ldr	r2, [pc, #368]	; (80042bc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d032      	beq.n	80041b4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a5b      	ldr	r2, [pc, #364]	; (80042c0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d02a      	beq.n	80041ae <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a59      	ldr	r2, [pc, #356]	; (80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d022      	beq.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d01a      	beq.n	80041a2 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a56      	ldr	r2, [pc, #344]	; (80042cc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d012      	beq.n	800419c <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a55      	ldr	r2, [pc, #340]	; (80042d0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d00a      	beq.n	8004196 <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a53      	ldr	r2, [pc, #332]	; (80042d4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d102      	bne.n	8004190 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 800418a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800418e:	e01e      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004194:	e01b      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004196:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800419a:	e018      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800419c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041a0:	e015      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041a6:	e012      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041ac:	e00f      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041b2:	e00c      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041b8:	e009      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041be:	e006      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041c0:	2320      	movs	r3, #32
 80041c2:	e004      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041c4:	2320      	movs	r3, #32
 80041c6:	e002      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041c8:	2320      	movs	r3, #32
 80041ca:	e000      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041cc:	2320      	movs	r3, #32
 80041ce:	4a42      	ldr	r2, [pc, #264]	; (80042d8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80041d0:	6093      	str	r3, [r2, #8]
 80041d2:	e0e9      	b.n	80043a8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	f240 8083 	bls.w	80042e8 <HAL_DMAEx_MultiBufferStart_IT+0x330>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a30      	ldr	r2, [pc, #192]	; (80042a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d057      	beq.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2e      	ldr	r2, [pc, #184]	; (80042ac <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d050      	beq.n	8004298 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2d      	ldr	r2, [pc, #180]	; (80042b0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d049      	beq.n	8004294 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2b      	ldr	r2, [pc, #172]	; (80042b4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d042      	beq.n	8004290 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2a      	ldr	r2, [pc, #168]	; (80042b8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d03a      	beq.n	800428a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a28      	ldr	r2, [pc, #160]	; (80042bc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d032      	beq.n	8004284 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d02a      	beq.n	800427e <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a25      	ldr	r2, [pc, #148]	; (80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d022      	beq.n	8004278 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a24      	ldr	r2, [pc, #144]	; (80042c8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d01a      	beq.n	8004272 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a22      	ldr	r2, [pc, #136]	; (80042cc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d012      	beq.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00a      	beq.n	8004266 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1f      	ldr	r2, [pc, #124]	; (80042d4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d102      	bne.n	8004260 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 800425a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800425e:	e01e      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004264:	e01b      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004266:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800426a:	e018      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800426c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004270:	e015      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004272:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004276:	e012      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800427c:	e00f      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800427e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004282:	e00c      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004288:	e009      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800428a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800428e:	e006      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004290:	2320      	movs	r3, #32
 8004292:	e004      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004294:	2320      	movs	r3, #32
 8004296:	e002      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004298:	2320      	movs	r3, #32
 800429a:	e000      	b.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800429c:	2320      	movs	r3, #32
 800429e:	4a11      	ldr	r2, [pc, #68]	; (80042e4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80042a0:	60d3      	str	r3, [r2, #12]
 80042a2:	e081      	b.n	80043a8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80042a4:	40026458 	.word	0x40026458
 80042a8:	40026010 	.word	0x40026010
 80042ac:	40026410 	.word	0x40026410
 80042b0:	40026070 	.word	0x40026070
 80042b4:	40026470 	.word	0x40026470
 80042b8:	40026028 	.word	0x40026028
 80042bc:	40026428 	.word	0x40026428
 80042c0:	40026088 	.word	0x40026088
 80042c4:	40026488 	.word	0x40026488
 80042c8:	40026040 	.word	0x40026040
 80042cc:	40026440 	.word	0x40026440
 80042d0:	400260a0 	.word	0x400260a0
 80042d4:	400264a0 	.word	0x400264a0
 80042d8:	40026400 	.word	0x40026400
 80042dc:	400260b8 	.word	0x400260b8
 80042e0:	40026058 	.word	0x40026058
 80042e4:	40026000 	.word	0x40026000
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a96      	ldr	r2, [pc, #600]	; (8004548 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d057      	beq.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a95      	ldr	r2, [pc, #596]	; (800454c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d050      	beq.n	800439e <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a93      	ldr	r2, [pc, #588]	; (8004550 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d049      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a92      	ldr	r2, [pc, #584]	; (8004554 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d042      	beq.n	8004396 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a90      	ldr	r2, [pc, #576]	; (8004558 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d03a      	beq.n	8004390 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a8f      	ldr	r2, [pc, #572]	; (800455c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d032      	beq.n	800438a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a8d      	ldr	r2, [pc, #564]	; (8004560 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d02a      	beq.n	8004384 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a8c      	ldr	r2, [pc, #560]	; (8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d022      	beq.n	800437e <HAL_DMAEx_MultiBufferStart_IT+0x3c6>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a8a      	ldr	r2, [pc, #552]	; (8004568 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d01a      	beq.n	8004378 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a89      	ldr	r2, [pc, #548]	; (800456c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d012      	beq.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x3ba>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a87      	ldr	r2, [pc, #540]	; (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00a      	beq.n	800436c <HAL_DMAEx_MultiBufferStart_IT+0x3b4>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a86      	ldr	r2, [pc, #536]	; (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d102      	bne.n	8004366 <HAL_DMAEx_MultiBufferStart_IT+0x3ae>
 8004360:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004364:	e01e      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004366:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800436a:	e01b      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800436c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004370:	e018      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004372:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004376:	e015      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004378:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800437c:	e012      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800437e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004382:	e00f      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004388:	e00c      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800438a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800438e:	e009      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004394:	e006      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004396:	2320      	movs	r3, #32
 8004398:	e004      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800439a:	2320      	movs	r3, #32
 800439c:	e002      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800439e:	2320      	movs	r3, #32
 80043a0:	e000      	b.n	80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 80043a2:	2320      	movs	r3, #32
 80043a4:	4a74      	ldr	r2, [pc, #464]	; (8004578 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80043a6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	4b73      	ldr	r3, [pc, #460]	; (800457c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d960      	bls.n	8004476 <HAL_DMAEx_MultiBufferStart_IT+0x4be>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a63      	ldr	r2, [pc, #396]	; (8004548 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d057      	beq.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a62      	ldr	r2, [pc, #392]	; (800454c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d050      	beq.n	800446a <HAL_DMAEx_MultiBufferStart_IT+0x4b2>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a60      	ldr	r2, [pc, #384]	; (8004550 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d049      	beq.n	8004466 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a5f      	ldr	r2, [pc, #380]	; (8004554 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d042      	beq.n	8004462 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a5d      	ldr	r2, [pc, #372]	; (8004558 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d03a      	beq.n	800445c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a5c      	ldr	r2, [pc, #368]	; (800455c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d032      	beq.n	8004456 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a5a      	ldr	r2, [pc, #360]	; (8004560 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d02a      	beq.n	8004450 <HAL_DMAEx_MultiBufferStart_IT+0x498>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a59      	ldr	r2, [pc, #356]	; (8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d022      	beq.n	800444a <HAL_DMAEx_MultiBufferStart_IT+0x492>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a57      	ldr	r2, [pc, #348]	; (8004568 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01a      	beq.n	8004444 <HAL_DMAEx_MultiBufferStart_IT+0x48c>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a56      	ldr	r2, [pc, #344]	; (800456c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d012      	beq.n	800443e <HAL_DMAEx_MultiBufferStart_IT+0x486>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a54      	ldr	r2, [pc, #336]	; (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00a      	beq.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x480>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a53      	ldr	r2, [pc, #332]	; (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d102      	bne.n	8004432 <HAL_DMAEx_MultiBufferStart_IT+0x47a>
 800442c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004430:	e01e      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004432:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004436:	e01b      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004438:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800443c:	e018      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800443e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004442:	e015      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004444:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004448:	e012      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800444a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800444e:	e00f      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004454:	e00c      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800445a:	e009      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800445c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004460:	e006      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004462:	2310      	movs	r3, #16
 8004464:	e004      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004466:	2310      	movs	r3, #16
 8004468:	e002      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800446a:	2310      	movs	r3, #16
 800446c:	e000      	b.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800446e:	2310      	movs	r3, #16
 8004470:	4a43      	ldr	r2, [pc, #268]	; (8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004472:	60d3      	str	r3, [r2, #12]
 8004474:	e14f      	b.n	8004716 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	4b41      	ldr	r3, [pc, #260]	; (8004584 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800447e:	429a      	cmp	r2, r3
 8004480:	f240 8082 	bls.w	8004588 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a2f      	ldr	r2, [pc, #188]	; (8004548 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d057      	beq.n	800453e <HAL_DMAEx_MultiBufferStart_IT+0x586>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2e      	ldr	r2, [pc, #184]	; (800454c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d050      	beq.n	800453a <HAL_DMAEx_MultiBufferStart_IT+0x582>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2c      	ldr	r2, [pc, #176]	; (8004550 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d049      	beq.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0x57e>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2b      	ldr	r2, [pc, #172]	; (8004554 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d042      	beq.n	8004532 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a29      	ldr	r2, [pc, #164]	; (8004558 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d03a      	beq.n	800452c <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a28      	ldr	r2, [pc, #160]	; (800455c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d032      	beq.n	8004526 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a26      	ldr	r2, [pc, #152]	; (8004560 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02a      	beq.n	8004520 <HAL_DMAEx_MultiBufferStart_IT+0x568>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a25      	ldr	r2, [pc, #148]	; (8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d022      	beq.n	800451a <HAL_DMAEx_MultiBufferStart_IT+0x562>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a23      	ldr	r2, [pc, #140]	; (8004568 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01a      	beq.n	8004514 <HAL_DMAEx_MultiBufferStart_IT+0x55c>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a22      	ldr	r2, [pc, #136]	; (800456c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d012      	beq.n	800450e <HAL_DMAEx_MultiBufferStart_IT+0x556>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a20      	ldr	r2, [pc, #128]	; (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00a      	beq.n	8004508 <HAL_DMAEx_MultiBufferStart_IT+0x550>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d102      	bne.n	8004502 <HAL_DMAEx_MultiBufferStart_IT+0x54a>
 80044fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004500:	e01e      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004502:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004506:	e01b      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004508:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800450c:	e018      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800450e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004512:	e015      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004514:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004518:	e012      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800451a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800451e:	e00f      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004524:	e00c      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800452a:	e009      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800452c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004530:	e006      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004532:	2310      	movs	r3, #16
 8004534:	e004      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004536:	2310      	movs	r3, #16
 8004538:	e002      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800453a:	2310      	movs	r3, #16
 800453c:	e000      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800453e:	2310      	movs	r3, #16
 8004540:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004542:	6093      	str	r3, [r2, #8]
 8004544:	e0e7      	b.n	8004716 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004546:	bf00      	nop
 8004548:	40026010 	.word	0x40026010
 800454c:	40026410 	.word	0x40026410
 8004550:	40026070 	.word	0x40026070
 8004554:	40026470 	.word	0x40026470
 8004558:	40026028 	.word	0x40026028
 800455c:	40026428 	.word	0x40026428
 8004560:	40026088 	.word	0x40026088
 8004564:	40026488 	.word	0x40026488
 8004568:	40026040 	.word	0x40026040
 800456c:	40026440 	.word	0x40026440
 8004570:	400260a0 	.word	0x400260a0
 8004574:	400264a0 	.word	0x400264a0
 8004578:	40026000 	.word	0x40026000
 800457c:	40026458 	.word	0x40026458
 8004580:	40026400 	.word	0x40026400
 8004584:	400260b8 	.word	0x400260b8
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	4b96      	ldr	r3, [pc, #600]	; (80047e8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d960      	bls.n	8004656 <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a94      	ldr	r2, [pc, #592]	; (80047ec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d057      	beq.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a93      	ldr	r2, [pc, #588]	; (80047f0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d050      	beq.n	800464a <HAL_DMAEx_MultiBufferStart_IT+0x692>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a91      	ldr	r2, [pc, #580]	; (80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d049      	beq.n	8004646 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a90      	ldr	r2, [pc, #576]	; (80047f8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d042      	beq.n	8004642 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a8e      	ldr	r2, [pc, #568]	; (80047fc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d03a      	beq.n	800463c <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a8d      	ldr	r2, [pc, #564]	; (8004800 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d032      	beq.n	8004636 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a8b      	ldr	r2, [pc, #556]	; (8004804 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d02a      	beq.n	8004630 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a8a      	ldr	r2, [pc, #552]	; (8004808 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d022      	beq.n	800462a <HAL_DMAEx_MultiBufferStart_IT+0x672>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a88      	ldr	r2, [pc, #544]	; (800480c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01a      	beq.n	8004624 <HAL_DMAEx_MultiBufferStart_IT+0x66c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a87      	ldr	r2, [pc, #540]	; (8004810 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d012      	beq.n	800461e <HAL_DMAEx_MultiBufferStart_IT+0x666>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a85      	ldr	r2, [pc, #532]	; (8004814 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00a      	beq.n	8004618 <HAL_DMAEx_MultiBufferStart_IT+0x660>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a84      	ldr	r2, [pc, #528]	; (8004818 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d102      	bne.n	8004612 <HAL_DMAEx_MultiBufferStart_IT+0x65a>
 800460c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004610:	e01e      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004612:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004616:	e01b      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004618:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800461c:	e018      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800461e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004622:	e015      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004624:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004628:	e012      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800462a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462e:	e00f      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004634:	e00c      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800463a:	e009      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800463c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004640:	e006      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004642:	2310      	movs	r3, #16
 8004644:	e004      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004646:	2310      	movs	r3, #16
 8004648:	e002      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800464a:	2310      	movs	r3, #16
 800464c:	e000      	b.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800464e:	2310      	movs	r3, #16
 8004650:	4a72      	ldr	r2, [pc, #456]	; (800481c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004652:	60d3      	str	r3, [r2, #12]
 8004654:	e05f      	b.n	8004716 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a64      	ldr	r2, [pc, #400]	; (80047ec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d057      	beq.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a62      	ldr	r2, [pc, #392]	; (80047f0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d050      	beq.n	800470c <HAL_DMAEx_MultiBufferStart_IT+0x754>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a61      	ldr	r2, [pc, #388]	; (80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d049      	beq.n	8004708 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a5f      	ldr	r2, [pc, #380]	; (80047f8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d042      	beq.n	8004704 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a5e      	ldr	r2, [pc, #376]	; (80047fc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d03a      	beq.n	80046fe <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a5c      	ldr	r2, [pc, #368]	; (8004800 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d032      	beq.n	80046f8 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5b      	ldr	r2, [pc, #364]	; (8004804 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d02a      	beq.n	80046f2 <HAL_DMAEx_MultiBufferStart_IT+0x73a>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a59      	ldr	r2, [pc, #356]	; (8004808 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d022      	beq.n	80046ec <HAL_DMAEx_MultiBufferStart_IT+0x734>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a58      	ldr	r2, [pc, #352]	; (800480c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d01a      	beq.n	80046e6 <HAL_DMAEx_MultiBufferStart_IT+0x72e>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a56      	ldr	r2, [pc, #344]	; (8004810 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d012      	beq.n	80046e0 <HAL_DMAEx_MultiBufferStart_IT+0x728>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a55      	ldr	r2, [pc, #340]	; (8004814 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00a      	beq.n	80046da <HAL_DMAEx_MultiBufferStart_IT+0x722>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a53      	ldr	r2, [pc, #332]	; (8004818 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d102      	bne.n	80046d4 <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 80046ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046d2:	e01e      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80046d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046d8:	e01b      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80046da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046de:	e018      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80046e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046e4:	e015      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80046e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046ea:	e012      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80046ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f0:	e00f      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80046f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f6:	e00c      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80046f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046fc:	e009      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 80046fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004702:	e006      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004704:	2310      	movs	r3, #16
 8004706:	e004      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004708:	2310      	movs	r3, #16
 800470a:	e002      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 800470c:	2310      	movs	r3, #16
 800470e:	e000      	b.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004710:	2310      	movs	r3, #16
 8004712:	4a42      	ldr	r2, [pc, #264]	; (800481c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004714:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	4b40      	ldr	r3, [pc, #256]	; (8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800471e:	429a      	cmp	r2, r3
 8004720:	f240 8082 	bls.w	8004828 <HAL_DMAEx_MultiBufferStart_IT+0x870>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a30      	ldr	r2, [pc, #192]	; (80047ec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d057      	beq.n	80047de <HAL_DMAEx_MultiBufferStart_IT+0x826>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d050      	beq.n	80047da <HAL_DMAEx_MultiBufferStart_IT+0x822>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2d      	ldr	r2, [pc, #180]	; (80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d049      	beq.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0x81e>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2c      	ldr	r2, [pc, #176]	; (80047f8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d042      	beq.n	80047d2 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d03a      	beq.n	80047cc <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a29      	ldr	r2, [pc, #164]	; (8004800 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d032      	beq.n	80047c6 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a27      	ldr	r2, [pc, #156]	; (8004804 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d02a      	beq.n	80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x808>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a26      	ldr	r2, [pc, #152]	; (8004808 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d022      	beq.n	80047ba <HAL_DMAEx_MultiBufferStart_IT+0x802>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a24      	ldr	r2, [pc, #144]	; (800480c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01a      	beq.n	80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a23      	ldr	r2, [pc, #140]	; (8004810 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d012      	beq.n	80047ae <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a21      	ldr	r2, [pc, #132]	; (8004814 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00a      	beq.n	80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d102      	bne.n	80047a2 <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 800479c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047a0:	e01e      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047a6:	e01b      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047ac:	e018      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047b2:	e015      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047b8:	e012      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047be:	e00f      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047c4:	e00c      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ca:	e009      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047d0:	e006      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047d2:	2308      	movs	r3, #8
 80047d4:	e004      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047d6:	2308      	movs	r3, #8
 80047d8:	e002      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047da:	2308      	movs	r3, #8
 80047dc:	e000      	b.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 80047de:	2308      	movs	r3, #8
 80047e0:	4a10      	ldr	r2, [pc, #64]	; (8004824 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80047e2:	60d3      	str	r3, [r2, #12]
 80047e4:	e16f      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 80047e6:	bf00      	nop
 80047e8:	40026058 	.word	0x40026058
 80047ec:	40026010 	.word	0x40026010
 80047f0:	40026410 	.word	0x40026410
 80047f4:	40026070 	.word	0x40026070
 80047f8:	40026470 	.word	0x40026470
 80047fc:	40026028 	.word	0x40026028
 8004800:	40026428 	.word	0x40026428
 8004804:	40026088 	.word	0x40026088
 8004808:	40026488 	.word	0x40026488
 800480c:	40026040 	.word	0x40026040
 8004810:	40026440 	.word	0x40026440
 8004814:	400260a0 	.word	0x400260a0
 8004818:	400264a0 	.word	0x400264a0
 800481c:	40026000 	.word	0x40026000
 8004820:	40026458 	.word	0x40026458
 8004824:	40026400 	.word	0x40026400
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	4b94      	ldr	r3, [pc, #592]	; (8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004830:	429a      	cmp	r2, r3
 8004832:	d960      	bls.n	80048f6 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a92      	ldr	r2, [pc, #584]	; (8004a84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d057      	beq.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a91      	ldr	r2, [pc, #580]	; (8004a88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d050      	beq.n	80048ea <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a8f      	ldr	r2, [pc, #572]	; (8004a8c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d049      	beq.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a8e      	ldr	r2, [pc, #568]	; (8004a90 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d042      	beq.n	80048e2 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a8c      	ldr	r2, [pc, #560]	; (8004a94 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d03a      	beq.n	80048dc <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a8b      	ldr	r2, [pc, #556]	; (8004a98 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d032      	beq.n	80048d6 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a89      	ldr	r2, [pc, #548]	; (8004a9c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d02a      	beq.n	80048d0 <HAL_DMAEx_MultiBufferStart_IT+0x918>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a88      	ldr	r2, [pc, #544]	; (8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_DMAEx_MultiBufferStart_IT+0x912>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a86      	ldr	r2, [pc, #536]	; (8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01a      	beq.n	80048c4 <HAL_DMAEx_MultiBufferStart_IT+0x90c>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a85      	ldr	r2, [pc, #532]	; (8004aa8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d012      	beq.n	80048be <HAL_DMAEx_MultiBufferStart_IT+0x906>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a83      	ldr	r2, [pc, #524]	; (8004aac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00a      	beq.n	80048b8 <HAL_DMAEx_MultiBufferStart_IT+0x900>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a82      	ldr	r2, [pc, #520]	; (8004ab0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d102      	bne.n	80048b2 <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 80048ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048b0:	e01e      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048b6:	e01b      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048bc:	e018      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048c2:	e015      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048c8:	e012      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048ce:	e00f      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048d4:	e00c      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048da:	e009      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048e0:	e006      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048e2:	2308      	movs	r3, #8
 80048e4:	e004      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048e6:	2308      	movs	r3, #8
 80048e8:	e002      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048ea:	2308      	movs	r3, #8
 80048ec:	e000      	b.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80048ee:	2308      	movs	r3, #8
 80048f0:	4a70      	ldr	r2, [pc, #448]	; (8004ab4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80048f2:	6093      	str	r3, [r2, #8]
 80048f4:	e0e7      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b6e      	ldr	r3, [pc, #440]	; (8004ab8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80048fe:	429a      	cmp	r2, r3
 8004900:	d960      	bls.n	80049c4 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a5f      	ldr	r2, [pc, #380]	; (8004a84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d057      	beq.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a5d      	ldr	r2, [pc, #372]	; (8004a88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d050      	beq.n	80049b8 <HAL_DMAEx_MultiBufferStart_IT+0xa00>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a5c      	ldr	r2, [pc, #368]	; (8004a8c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d049      	beq.n	80049b4 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a5a      	ldr	r2, [pc, #360]	; (8004a90 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d042      	beq.n	80049b0 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a59      	ldr	r2, [pc, #356]	; (8004a94 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d03a      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a57      	ldr	r2, [pc, #348]	; (8004a98 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d032      	beq.n	80049a4 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a56      	ldr	r2, [pc, #344]	; (8004a9c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d02a      	beq.n	800499e <HAL_DMAEx_MultiBufferStart_IT+0x9e6>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a54      	ldr	r2, [pc, #336]	; (8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d022      	beq.n	8004998 <HAL_DMAEx_MultiBufferStart_IT+0x9e0>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a53      	ldr	r2, [pc, #332]	; (8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d01a      	beq.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0x9da>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a51      	ldr	r2, [pc, #324]	; (8004aa8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d012      	beq.n	800498c <HAL_DMAEx_MultiBufferStart_IT+0x9d4>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a50      	ldr	r2, [pc, #320]	; (8004aac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00a      	beq.n	8004986 <HAL_DMAEx_MultiBufferStart_IT+0x9ce>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a4e      	ldr	r2, [pc, #312]	; (8004ab0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d102      	bne.n	8004980 <HAL_DMAEx_MultiBufferStart_IT+0x9c8>
 800497a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800497e:	e01e      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004984:	e01b      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004986:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800498a:	e018      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800498c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004990:	e015      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004992:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004996:	e012      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8004998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800499c:	e00f      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800499e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a2:	e00c      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80049a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a8:	e009      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80049aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049ae:	e006      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80049b0:	2308      	movs	r3, #8
 80049b2:	e004      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80049b4:	2308      	movs	r3, #8
 80049b6:	e002      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80049b8:	2308      	movs	r3, #8
 80049ba:	e000      	b.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80049bc:	2308      	movs	r3, #8
 80049be:	4a3f      	ldr	r2, [pc, #252]	; (8004abc <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80049c0:	60d3      	str	r3, [r2, #12]
 80049c2:	e080      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2e      	ldr	r2, [pc, #184]	; (8004a84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d078      	beq.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2d      	ldr	r2, [pc, #180]	; (8004a88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d050      	beq.n	8004a7a <HAL_DMAEx_MultiBufferStart_IT+0xac2>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d049      	beq.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0xabe>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d042      	beq.n	8004a72 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d03a      	beq.n	8004a6c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d032      	beq.n	8004a66 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a25      	ldr	r2, [pc, #148]	; (8004a9c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d02a      	beq.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a24      	ldr	r2, [pc, #144]	; (8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d022      	beq.n	8004a5a <HAL_DMAEx_MultiBufferStart_IT+0xaa2>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a22      	ldr	r2, [pc, #136]	; (8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01a      	beq.n	8004a54 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d012      	beq.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0xa96>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1f      	ldr	r2, [pc, #124]	; (8004aac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00a      	beq.n	8004a48 <HAL_DMAEx_MultiBufferStart_IT+0xa90>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d102      	bne.n	8004a42 <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 8004a3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a40:	e03f      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a46:	e03c      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a4c:	e039      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a52:	e036      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a58:	e033      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a5e:	e030      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a64:	e02d      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a6a:	e02a      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a70:	e027      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a72:	2308      	movs	r3, #8
 8004a74:	e025      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a76:	2308      	movs	r3, #8
 8004a78:	e023      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	e021      	b.n	8004ac2 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8004a7e:	bf00      	nop
 8004a80:	400260b8 	.word	0x400260b8
 8004a84:	40026010 	.word	0x40026010
 8004a88:	40026410 	.word	0x40026410
 8004a8c:	40026070 	.word	0x40026070
 8004a90:	40026470 	.word	0x40026470
 8004a94:	40026028 	.word	0x40026028
 8004a98:	40026428 	.word	0x40026428
 8004a9c:	40026088 	.word	0x40026088
 8004aa0:	40026488 	.word	0x40026488
 8004aa4:	40026040 	.word	0x40026040
 8004aa8:	40026440 	.word	0x40026440
 8004aac:	400260a0 	.word	0x400260a0
 8004ab0:	400264a0 	.word	0x400264a0
 8004ab4:	40026400 	.word	0x40026400
 8004ab8:	40026058 	.word	0x40026058
 8004abc:	40026000 	.word	0x40026000
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	4a9a      	ldr	r2, [pc, #616]	; (8004d2c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004ac4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	4b98      	ldr	r3, [pc, #608]	; (8004d30 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d960      	bls.n	8004b94 <HAL_DMAEx_MultiBufferStart_IT+0xbdc>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a97      	ldr	r2, [pc, #604]	; (8004d34 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d057      	beq.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a95      	ldr	r2, [pc, #596]	; (8004d38 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d050      	beq.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0xbd0>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a94      	ldr	r2, [pc, #592]	; (8004d3c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d049      	beq.n	8004b84 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a92      	ldr	r2, [pc, #584]	; (8004d40 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d042      	beq.n	8004b80 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a91      	ldr	r2, [pc, #580]	; (8004d44 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d03a      	beq.n	8004b7a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a8f      	ldr	r2, [pc, #572]	; (8004d48 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d032      	beq.n	8004b74 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a8e      	ldr	r2, [pc, #568]	; (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d02a      	beq.n	8004b6e <HAL_DMAEx_MultiBufferStart_IT+0xbb6>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a8c      	ldr	r2, [pc, #560]	; (8004d50 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d022      	beq.n	8004b68 <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a8b      	ldr	r2, [pc, #556]	; (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d01a      	beq.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a89      	ldr	r2, [pc, #548]	; (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d012      	beq.n	8004b5c <HAL_DMAEx_MultiBufferStart_IT+0xba4>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a88      	ldr	r2, [pc, #544]	; (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00a      	beq.n	8004b56 <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a86      	ldr	r2, [pc, #536]	; (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d102      	bne.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
 8004b4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b4e:	e01e      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b54:	e01b      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b5a:	e018      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b60:	e015      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b66:	e012      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b6c:	e00f      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b72:	e00c      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b78:	e009      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b7e:	e006      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b80:	2304      	movs	r3, #4
 8004b82:	e004      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b84:	2304      	movs	r3, #4
 8004b86:	e002      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	e000      	b.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	4a75      	ldr	r2, [pc, #468]	; (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8004b90:	60d3      	str	r3, [r2, #12]
 8004b92:	e151      	b.n	8004e38 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4b73      	ldr	r3, [pc, #460]	; (8004d68 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d960      	bls.n	8004c62 <HAL_DMAEx_MultiBufferStart_IT+0xcaa>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a63      	ldr	r2, [pc, #396]	; (8004d34 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d057      	beq.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a62      	ldr	r2, [pc, #392]	; (8004d38 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d050      	beq.n	8004c56 <HAL_DMAEx_MultiBufferStart_IT+0xc9e>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a60      	ldr	r2, [pc, #384]	; (8004d3c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d049      	beq.n	8004c52 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a5f      	ldr	r2, [pc, #380]	; (8004d40 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d042      	beq.n	8004c4e <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a5d      	ldr	r2, [pc, #372]	; (8004d44 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d03a      	beq.n	8004c48 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a5c      	ldr	r2, [pc, #368]	; (8004d48 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d032      	beq.n	8004c42 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a5a      	ldr	r2, [pc, #360]	; (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d02a      	beq.n	8004c3c <HAL_DMAEx_MultiBufferStart_IT+0xc84>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a59      	ldr	r2, [pc, #356]	; (8004d50 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d022      	beq.n	8004c36 <HAL_DMAEx_MultiBufferStart_IT+0xc7e>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a57      	ldr	r2, [pc, #348]	; (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d01a      	beq.n	8004c30 <HAL_DMAEx_MultiBufferStart_IT+0xc78>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a56      	ldr	r2, [pc, #344]	; (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d012      	beq.n	8004c2a <HAL_DMAEx_MultiBufferStart_IT+0xc72>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a54      	ldr	r2, [pc, #336]	; (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00a      	beq.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0xc6c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a53      	ldr	r2, [pc, #332]	; (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d102      	bne.n	8004c1e <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8004c18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c1c:	e01e      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c22:	e01b      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c28:	e018      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c2e:	e015      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c34:	e012      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c3a:	e00f      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c40:	e00c      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c46:	e009      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c4c:	e006      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c4e:	2304      	movs	r3, #4
 8004c50:	e004      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c52:	2304      	movs	r3, #4
 8004c54:	e002      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c56:	2304      	movs	r3, #4
 8004c58:	e000      	b.n	8004c5c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8004c5a:	2304      	movs	r3, #4
 8004c5c:	4a41      	ldr	r2, [pc, #260]	; (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8004c5e:	6093      	str	r3, [r2, #8]
 8004c60:	e0ea      	b.n	8004e38 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b40      	ldr	r3, [pc, #256]	; (8004d6c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	f240 8084 	bls.w	8004d78 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d07a      	beq.n	8004d70 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2e      	ldr	r2, [pc, #184]	; (8004d38 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d050      	beq.n	8004d26 <HAL_DMAEx_MultiBufferStart_IT+0xd6e>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2c      	ldr	r2, [pc, #176]	; (8004d3c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d049      	beq.n	8004d22 <HAL_DMAEx_MultiBufferStart_IT+0xd6a>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a2b      	ldr	r2, [pc, #172]	; (8004d40 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d042      	beq.n	8004d1e <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a29      	ldr	r2, [pc, #164]	; (8004d44 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d03a      	beq.n	8004d18 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a28      	ldr	r2, [pc, #160]	; (8004d48 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d032      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d02a      	beq.n	8004d0c <HAL_DMAEx_MultiBufferStart_IT+0xd54>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a25      	ldr	r2, [pc, #148]	; (8004d50 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d022      	beq.n	8004d06 <HAL_DMAEx_MultiBufferStart_IT+0xd4e>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a23      	ldr	r2, [pc, #140]	; (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01a      	beq.n	8004d00 <HAL_DMAEx_MultiBufferStart_IT+0xd48>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a22      	ldr	r2, [pc, #136]	; (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d012      	beq.n	8004cfa <HAL_DMAEx_MultiBufferStart_IT+0xd42>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d102      	bne.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0xd36>
 8004ce8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cec:	e041      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004cee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cf2:	e03e      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004cf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cf8:	e03b      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004cfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cfe:	e038      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004d00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d04:	e035      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d0a:	e032      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d10:	e02f      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d16:	e02c      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d1c:	e029      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004d1e:	2304      	movs	r3, #4
 8004d20:	e027      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004d22:	2304      	movs	r3, #4
 8004d24:	e025      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004d26:	2304      	movs	r3, #4
 8004d28:	e023      	b.n	8004d72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004d2a:	bf00      	nop
 8004d2c:	40026000 	.word	0x40026000
 8004d30:	40026458 	.word	0x40026458
 8004d34:	40026010 	.word	0x40026010
 8004d38:	40026410 	.word	0x40026410
 8004d3c:	40026070 	.word	0x40026070
 8004d40:	40026470 	.word	0x40026470
 8004d44:	40026028 	.word	0x40026028
 8004d48:	40026428 	.word	0x40026428
 8004d4c:	40026088 	.word	0x40026088
 8004d50:	40026488 	.word	0x40026488
 8004d54:	40026040 	.word	0x40026040
 8004d58:	40026440 	.word	0x40026440
 8004d5c:	400260a0 	.word	0x400260a0
 8004d60:	400264a0 	.word	0x400264a0
 8004d64:	40026400 	.word	0x40026400
 8004d68:	400260b8 	.word	0x400260b8
 8004d6c:	40026058 	.word	0x40026058
 8004d70:	2304      	movs	r3, #4
 8004d72:	4a94      	ldr	r2, [pc, #592]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004d74:	60d3      	str	r3, [r2, #12]
 8004d76:	e05f      	b.n	8004e38 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a92      	ldr	r2, [pc, #584]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d057      	beq.n	8004e32 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a91      	ldr	r2, [pc, #580]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d050      	beq.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a8f      	ldr	r2, [pc, #572]	; (8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d049      	beq.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a8e      	ldr	r2, [pc, #568]	; (8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d042      	beq.n	8004e26 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a8c      	ldr	r2, [pc, #560]	; (8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d03a      	beq.n	8004e20 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a8b      	ldr	r2, [pc, #556]	; (8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d032      	beq.n	8004e1a <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a89      	ldr	r2, [pc, #548]	; (8004fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d02a      	beq.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe5c>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a88      	ldr	r2, [pc, #544]	; (8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <HAL_DMAEx_MultiBufferStart_IT+0xe56>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a86      	ldr	r2, [pc, #536]	; (8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01a      	beq.n	8004e08 <HAL_DMAEx_MultiBufferStart_IT+0xe50>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a85      	ldr	r2, [pc, #532]	; (8004fec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d012      	beq.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0xe4a>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a83      	ldr	r2, [pc, #524]	; (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00a      	beq.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xe44>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a82      	ldr	r2, [pc, #520]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d102      	bne.n	8004df6 <HAL_DMAEx_MultiBufferStart_IT+0xe3e>
 8004df0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004df4:	e01e      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dfa:	e01b      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004dfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e00:	e018      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004e02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e06:	e015      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004e08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e0c:	e012      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e12:	e00f      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e18:	e00c      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e1e:	e009      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e24:	e006      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004e26:	2304      	movs	r3, #4
 8004e28:	e004      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	e002      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004e2e:	2304      	movs	r3, #4
 8004e30:	e000      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004e32:	2304      	movs	r3, #4
 8004e34:	4a63      	ldr	r2, [pc, #396]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004e36:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4b6e      	ldr	r3, [pc, #440]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d95c      	bls.n	8004efe <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5f      	ldr	r2, [pc, #380]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d053      	beq.n	8004ef6 <HAL_DMAEx_MultiBufferStart_IT+0xf3e>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a5e      	ldr	r2, [pc, #376]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d04c      	beq.n	8004ef2 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5c      	ldr	r2, [pc, #368]	; (8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d045      	beq.n	8004eee <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a5b      	ldr	r2, [pc, #364]	; (8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d03e      	beq.n	8004eea <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a59      	ldr	r2, [pc, #356]	; (8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d037      	beq.n	8004ee6 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a58      	ldr	r2, [pc, #352]	; (8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d030      	beq.n	8004ee2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a56      	ldr	r2, [pc, #344]	; (8004fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d029      	beq.n	8004ede <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a55      	ldr	r2, [pc, #340]	; (8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d022      	beq.n	8004eda <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a53      	ldr	r2, [pc, #332]	; (8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01a      	beq.n	8004ed4 <HAL_DMAEx_MultiBufferStart_IT+0xf1c>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a52      	ldr	r2, [pc, #328]	; (8004fec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d012      	beq.n	8004ece <HAL_DMAEx_MultiBufferStart_IT+0xf16>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a50      	ldr	r2, [pc, #320]	; (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf10>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a4f      	ldr	r2, [pc, #316]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d102      	bne.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0xf0a>
 8004ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ec0:	e01a      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004ec2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ec6:	e017      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ecc:	e014      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ed2:	e011      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ed8:	e00e      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	e00c      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004ede:	2340      	movs	r3, #64	; 0x40
 8004ee0:	e00a      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004ee2:	2340      	movs	r3, #64	; 0x40
 8004ee4:	e008      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004ee6:	2340      	movs	r3, #64	; 0x40
 8004ee8:	e006      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e004      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e002      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4a40      	ldr	r2, [pc, #256]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004efa:	60d3      	str	r3, [r2, #12]
 8004efc:	e141      	b.n	8005182 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d97c      	bls.n	8005004 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2e      	ldr	r2, [pc, #184]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d053      	beq.n	8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x1004>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2c      	ldr	r2, [pc, #176]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d04c      	beq.n	8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d045      	beq.n	8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a29      	ldr	r2, [pc, #164]	; (8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d03e      	beq.n	8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0xff8>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a28      	ldr	r2, [pc, #160]	; (8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d037      	beq.n	8004fac <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a26      	ldr	r2, [pc, #152]	; (8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d030      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d029      	beq.n	8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0xfec>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a23      	ldr	r2, [pc, #140]	; (8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d022      	beq.n	8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d01a      	beq.n	8004f9a <HAL_DMAEx_MultiBufferStart_IT+0xfe2>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a20      	ldr	r2, [pc, #128]	; (8004fec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d012      	beq.n	8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xfdc>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00a      	beq.n	8004f8e <HAL_DMAEx_MultiBufferStart_IT+0xfd6>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d102      	bne.n	8004f88 <HAL_DMAEx_MultiBufferStart_IT+0xfd0>
 8004f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f86:	e01a      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004f88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f8c:	e017      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f92:	e014      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f98:	e011      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f9e:	e00e      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004fa0:	2340      	movs	r3, #64	; 0x40
 8004fa2:	e00c      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004fa4:	2340      	movs	r3, #64	; 0x40
 8004fa6:	e00a      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004fa8:	2340      	movs	r3, #64	; 0x40
 8004faa:	e008      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004fac:	2340      	movs	r3, #64	; 0x40
 8004fae:	e006      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e004      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e002      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4a0f      	ldr	r2, [pc, #60]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004fc0:	6093      	str	r3, [r2, #8]
 8004fc2:	e0de      	b.n	8005182 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8004fc4:	40026000 	.word	0x40026000
 8004fc8:	40026010 	.word	0x40026010
 8004fcc:	40026410 	.word	0x40026410
 8004fd0:	40026070 	.word	0x40026070
 8004fd4:	40026470 	.word	0x40026470
 8004fd8:	40026028 	.word	0x40026028
 8004fdc:	40026428 	.word	0x40026428
 8004fe0:	40026088 	.word	0x40026088
 8004fe4:	40026488 	.word	0x40026488
 8004fe8:	40026040 	.word	0x40026040
 8004fec:	40026440 	.word	0x40026440
 8004ff0:	400260a0 	.word	0x400260a0
 8004ff4:	400264a0 	.word	0x400264a0
 8004ff8:	40026458 	.word	0x40026458
 8004ffc:	40026400 	.word	0x40026400
 8005000:	400260b8 	.word	0x400260b8
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	4b78      	ldr	r3, [pc, #480]	; (80051ec <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 800500c:	429a      	cmp	r2, r3
 800500e:	d95c      	bls.n	80050ca <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a76      	ldr	r2, [pc, #472]	; (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d053      	beq.n	80050c2 <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a75      	ldr	r2, [pc, #468]	; (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d04c      	beq.n	80050be <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a73      	ldr	r2, [pc, #460]	; (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d045      	beq.n	80050ba <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a72      	ldr	r2, [pc, #456]	; (80051fc <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d03e      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a70      	ldr	r2, [pc, #448]	; (8005200 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d037      	beq.n	80050b2 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a6f      	ldr	r2, [pc, #444]	; (8005204 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d030      	beq.n	80050ae <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a6d      	ldr	r2, [pc, #436]	; (8005208 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d029      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a6c      	ldr	r2, [pc, #432]	; (800520c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d022      	beq.n	80050a6 <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a6a      	ldr	r2, [pc, #424]	; (8005210 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d01a      	beq.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a69      	ldr	r2, [pc, #420]	; (8005214 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d012      	beq.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a67      	ldr	r2, [pc, #412]	; (8005218 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00a      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a66      	ldr	r2, [pc, #408]	; (800521c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d102      	bne.n	800508e <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
 8005088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800508c:	e01a      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800508e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005092:	e017      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005098:	e014      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800509a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800509e:	e011      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80050a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050a4:	e00e      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80050a6:	2340      	movs	r3, #64	; 0x40
 80050a8:	e00c      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80050aa:	2340      	movs	r3, #64	; 0x40
 80050ac:	e00a      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80050ae:	2340      	movs	r3, #64	; 0x40
 80050b0:	e008      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80050b2:	2340      	movs	r3, #64	; 0x40
 80050b4:	e006      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e004      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e002      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80050c2:	2301      	movs	r3, #1
 80050c4:	4a56      	ldr	r2, [pc, #344]	; (8005220 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80050c6:	60d3      	str	r3, [r2, #12]
 80050c8:	e05b      	b.n	8005182 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a48      	ldr	r2, [pc, #288]	; (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d053      	beq.n	800517c <HAL_DMAEx_MultiBufferStart_IT+0x11c4>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a46      	ldr	r2, [pc, #280]	; (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d04c      	beq.n	8005178 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a45      	ldr	r2, [pc, #276]	; (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d045      	beq.n	8005174 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a43      	ldr	r2, [pc, #268]	; (80051fc <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d03e      	beq.n	8005170 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a42      	ldr	r2, [pc, #264]	; (8005200 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d037      	beq.n	800516c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a40      	ldr	r2, [pc, #256]	; (8005204 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d030      	beq.n	8005168 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a3f      	ldr	r2, [pc, #252]	; (8005208 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d029      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a3d      	ldr	r2, [pc, #244]	; (800520c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d022      	beq.n	8005160 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a3c      	ldr	r2, [pc, #240]	; (8005210 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d01a      	beq.n	800515a <HAL_DMAEx_MultiBufferStart_IT+0x11a2>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a3a      	ldr	r2, [pc, #232]	; (8005214 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d012      	beq.n	8005154 <HAL_DMAEx_MultiBufferStart_IT+0x119c>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a39      	ldr	r2, [pc, #228]	; (8005218 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00a      	beq.n	800514e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a37      	ldr	r2, [pc, #220]	; (800521c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d102      	bne.n	8005148 <HAL_DMAEx_MultiBufferStart_IT+0x1190>
 8005142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005146:	e01a      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005148:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800514c:	e017      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800514e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005152:	e014      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005158:	e011      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800515a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800515e:	e00e      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005160:	2340      	movs	r3, #64	; 0x40
 8005162:	e00c      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005164:	2340      	movs	r3, #64	; 0x40
 8005166:	e00a      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	e008      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800516c:	2340      	movs	r3, #64	; 0x40
 800516e:	e006      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005170:	2301      	movs	r3, #1
 8005172:	e004      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005174:	2301      	movs	r3, #1
 8005176:	e002      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800517c:	2301      	movs	r3, #1
 800517e:	4a28      	ldr	r2, [pc, #160]	; (8005220 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005180:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0216 	orr.w	r2, r2, #22
 8005190:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <HAL_DMAEx_MultiBufferStart_IT+0x11fa>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <HAL_DMAEx_MultiBufferStart_IT+0x120a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0208 	orr.w	r2, r2, #8
 80051c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e005      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x1228>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
 80051de:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40026058 	.word	0x40026058
 80051f0:	40026010 	.word	0x40026010
 80051f4:	40026410 	.word	0x40026410
 80051f8:	40026070 	.word	0x40026070
 80051fc:	40026470 	.word	0x40026470
 8005200:	40026028 	.word	0x40026028
 8005204:	40026428 	.word	0x40026428
 8005208:	40026088 	.word	0x40026088
 800520c:	40026488 	.word	0x40026488
 8005210:	40026040 	.word	0x40026040
 8005214:	40026440 	.word	0x40026440
 8005218:	400260a0 	.word	0x400260a0
 800521c:	400264a0 	.word	0x400264a0
 8005220:	40026000 	.word	0x40026000

08005224 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	e003      	b.n	800524a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b40      	cmp	r3, #64	; 0x40
 8005274:	d108      	bne.n	8005288 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005286:	e007      	b.n	8005298 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	60da      	str	r2, [r3, #12]
}
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b089      	sub	sp, #36	; 0x24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	e175      	b.n	80055b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052c4:	2201      	movs	r2, #1
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4013      	ands	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	f040 8164 	bne.w	80055aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d00b      	beq.n	8005302 <HAL_GPIO_Init+0x5e>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d007      	beq.n	8005302 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052f6:	2b11      	cmp	r3, #17
 80052f8:	d003      	beq.n	8005302 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b12      	cmp	r3, #18
 8005300:	d130      	bne.n	8005364 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	2203      	movs	r2, #3
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	43db      	mvns	r3, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4013      	ands	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	4313      	orrs	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005338:	2201      	movs	r2, #1
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43db      	mvns	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4013      	ands	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	091b      	lsrs	r3, r3, #4
 800534e:	f003 0201 	and.w	r2, r3, #1
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4313      	orrs	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	2203      	movs	r2, #3
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4313      	orrs	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d003      	beq.n	80053a4 <HAL_GPIO_Init+0x100>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b12      	cmp	r3, #18
 80053a2:	d123      	bne.n	80053ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	08da      	lsrs	r2, r3, #3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3208      	adds	r2, #8
 80053ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	220f      	movs	r2, #15
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	08da      	lsrs	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3208      	adds	r2, #8
 80053e6:	69b9      	ldr	r1, [r7, #24]
 80053e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	2203      	movs	r2, #3
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	4013      	ands	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f003 0203 	and.w	r2, r3, #3
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	4313      	orrs	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80be 	beq.w	80055aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800542e:	4b65      	ldr	r3, [pc, #404]	; (80055c4 <HAL_GPIO_Init+0x320>)
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	4a64      	ldr	r2, [pc, #400]	; (80055c4 <HAL_GPIO_Init+0x320>)
 8005434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005438:	6453      	str	r3, [r2, #68]	; 0x44
 800543a:	4b62      	ldr	r3, [pc, #392]	; (80055c4 <HAL_GPIO_Init+0x320>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005446:	4a60      	ldr	r2, [pc, #384]	; (80055c8 <HAL_GPIO_Init+0x324>)
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	3302      	adds	r3, #2
 800544e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005452:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	220f      	movs	r2, #15
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a57      	ldr	r2, [pc, #348]	; (80055cc <HAL_GPIO_Init+0x328>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d037      	beq.n	80054e2 <HAL_GPIO_Init+0x23e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a56      	ldr	r2, [pc, #344]	; (80055d0 <HAL_GPIO_Init+0x32c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d031      	beq.n	80054de <HAL_GPIO_Init+0x23a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a55      	ldr	r2, [pc, #340]	; (80055d4 <HAL_GPIO_Init+0x330>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d02b      	beq.n	80054da <HAL_GPIO_Init+0x236>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a54      	ldr	r2, [pc, #336]	; (80055d8 <HAL_GPIO_Init+0x334>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d025      	beq.n	80054d6 <HAL_GPIO_Init+0x232>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a53      	ldr	r2, [pc, #332]	; (80055dc <HAL_GPIO_Init+0x338>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01f      	beq.n	80054d2 <HAL_GPIO_Init+0x22e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a52      	ldr	r2, [pc, #328]	; (80055e0 <HAL_GPIO_Init+0x33c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d019      	beq.n	80054ce <HAL_GPIO_Init+0x22a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a51      	ldr	r2, [pc, #324]	; (80055e4 <HAL_GPIO_Init+0x340>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d013      	beq.n	80054ca <HAL_GPIO_Init+0x226>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a50      	ldr	r2, [pc, #320]	; (80055e8 <HAL_GPIO_Init+0x344>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00d      	beq.n	80054c6 <HAL_GPIO_Init+0x222>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a4f      	ldr	r2, [pc, #316]	; (80055ec <HAL_GPIO_Init+0x348>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d007      	beq.n	80054c2 <HAL_GPIO_Init+0x21e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a4e      	ldr	r2, [pc, #312]	; (80055f0 <HAL_GPIO_Init+0x34c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <HAL_GPIO_Init+0x21a>
 80054ba:	2309      	movs	r3, #9
 80054bc:	e012      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054be:	230a      	movs	r3, #10
 80054c0:	e010      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054c2:	2308      	movs	r3, #8
 80054c4:	e00e      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054c6:	2307      	movs	r3, #7
 80054c8:	e00c      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054ca:	2306      	movs	r3, #6
 80054cc:	e00a      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054ce:	2305      	movs	r3, #5
 80054d0:	e008      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054d2:	2304      	movs	r3, #4
 80054d4:	e006      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054d6:	2303      	movs	r3, #3
 80054d8:	e004      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054da:	2302      	movs	r3, #2
 80054dc:	e002      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054e2:	2300      	movs	r3, #0
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	f002 0203 	and.w	r2, r2, #3
 80054ea:	0092      	lsls	r2, r2, #2
 80054ec:	4093      	lsls	r3, r2
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80054f4:	4934      	ldr	r1, [pc, #208]	; (80055c8 <HAL_GPIO_Init+0x324>)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	3302      	adds	r3, #2
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005502:	4b3c      	ldr	r3, [pc, #240]	; (80055f4 <HAL_GPIO_Init+0x350>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005526:	4a33      	ldr	r2, [pc, #204]	; (80055f4 <HAL_GPIO_Init+0x350>)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800552c:	4b31      	ldr	r3, [pc, #196]	; (80055f4 <HAL_GPIO_Init+0x350>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	43db      	mvns	r3, r3
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	4013      	ands	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005550:	4a28      	ldr	r2, [pc, #160]	; (80055f4 <HAL_GPIO_Init+0x350>)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005556:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <HAL_GPIO_Init+0x350>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	43db      	mvns	r3, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4013      	ands	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <HAL_GPIO_Init+0x350>)
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005580:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <HAL_GPIO_Init+0x350>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <HAL_GPIO_Init+0x350>)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b0f      	cmp	r3, #15
 80055b4:	f67f ae86 	bls.w	80052c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80055b8:	bf00      	nop
 80055ba:	3724      	adds	r7, #36	; 0x24
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40023800 	.word	0x40023800
 80055c8:	40013800 	.word	0x40013800
 80055cc:	40020000 	.word	0x40020000
 80055d0:	40020400 	.word	0x40020400
 80055d4:	40020800 	.word	0x40020800
 80055d8:	40020c00 	.word	0x40020c00
 80055dc:	40021000 	.word	0x40021000
 80055e0:	40021400 	.word	0x40021400
 80055e4:	40021800 	.word	0x40021800
 80055e8:	40021c00 	.word	0x40021c00
 80055ec:	40022000 	.word	0x40022000
 80055f0:	40022400 	.word	0x40022400
 80055f4:	40013c00 	.word	0x40013c00

080055f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	807b      	strh	r3, [r7, #2]
 8005604:	4613      	mov	r3, r2
 8005606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005608:	787b      	ldrb	r3, [r7, #1]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800560e:	887a      	ldrh	r2, [r7, #2]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005614:	e003      	b.n	800561e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005616:	887b      	ldrh	r3, [r7, #2]
 8005618:	041a      	lsls	r2, r3, #16
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	619a      	str	r2, [r3, #24]
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	4013      	ands	r3, r2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005642:	887b      	ldrh	r3, [r7, #2]
 8005644:	041a      	lsls	r2, r3, #16
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800564a:	e002      	b.n	8005652 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800564c:	887a      	ldrh	r2, [r7, #2]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	619a      	str	r2, [r3, #24]
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e07f      	b.n	8005772 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f8a9 	bl	80057de <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2224      	movs	r2, #36	; 0x24
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d107      	bne.n	80056da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056d6:	609a      	str	r2, [r3, #8]
 80056d8:	e006      	b.n	80056e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d104      	bne.n	80056fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6859      	ldr	r1, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4b1d      	ldr	r3, [pc, #116]	; (800577c <HAL_I2C_Init+0x11c>)
 8005706:	430b      	orrs	r3, r1
 8005708:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005718:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	ea42 0103 	orr.w	r1, r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	021a      	lsls	r2, r3, #8
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69d9      	ldr	r1, [r3, #28]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1a      	ldr	r2, [r3, #32]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	02008000 	.word	0x02008000

08005780 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e021      	b.n	80057d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2224      	movs	r2, #36	; 0x24
 8005796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f821 	bl	80057f2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	4608      	mov	r0, r1
 8005812:	4611      	mov	r1, r2
 8005814:	461a      	mov	r2, r3
 8005816:	4603      	mov	r3, r0
 8005818:	817b      	strh	r3, [r7, #10]
 800581a:	460b      	mov	r3, r1
 800581c:	813b      	strh	r3, [r7, #8]
 800581e:	4613      	mov	r3, r2
 8005820:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b20      	cmp	r3, #32
 800582c:	f040 80f9 	bne.w	8005a22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_I2C_Mem_Write+0x34>
 8005836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005842:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0ed      	b.n	8005a24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_I2C_Mem_Write+0x4e>
 8005852:	2302      	movs	r3, #2
 8005854:	e0e6      	b.n	8005a24 <HAL_I2C_Mem_Write+0x21c>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800585e:	f7fd fae3 	bl	8002e28 <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	2319      	movs	r3, #25
 800586a:	2201      	movs	r2, #1
 800586c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fad1 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0d1      	b.n	8005a24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2221      	movs	r2, #33	; 0x21
 8005884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2240      	movs	r2, #64	; 0x40
 800588c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058a8:	88f8      	ldrh	r0, [r7, #6]
 80058aa:	893a      	ldrh	r2, [r7, #8]
 80058ac:	8979      	ldrh	r1, [r7, #10]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	4603      	mov	r3, r0
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 f9e1 	bl	8005c80 <I2C_RequestMemoryWrite>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0a9      	b.n	8005a24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2bff      	cmp	r3, #255	; 0xff
 80058d8:	d90e      	bls.n	80058f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	22ff      	movs	r2, #255	; 0xff
 80058de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	8979      	ldrh	r1, [r7, #10]
 80058e8:	2300      	movs	r3, #0
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fbb3 	bl	800605c <I2C_TransferConfig>
 80058f6:	e00f      	b.n	8005918 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	b2da      	uxtb	r2, r3
 8005908:	8979      	ldrh	r1, [r7, #10]
 800590a:	2300      	movs	r3, #0
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fba2 	bl	800605c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fabb 	bl	8005e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e07b      	b.n	8005a24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d034      	beq.n	80059d0 <HAL_I2C_Mem_Write+0x1c8>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596a:	2b00      	cmp	r3, #0
 800596c:	d130      	bne.n	80059d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	2200      	movs	r2, #0
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fa4d 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e04d      	b.n	8005a24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	2bff      	cmp	r3, #255	; 0xff
 8005990:	d90e      	bls.n	80059b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	22ff      	movs	r2, #255	; 0xff
 8005996:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599c:	b2da      	uxtb	r2, r3
 800599e:	8979      	ldrh	r1, [r7, #10]
 80059a0:	2300      	movs	r3, #0
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fb57 	bl	800605c <I2C_TransferConfig>
 80059ae:	e00f      	b.n	80059d0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	8979      	ldrh	r1, [r7, #10]
 80059c2:	2300      	movs	r3, #0
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fb46 	bl	800605c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d19e      	bne.n	8005918 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fa9a 	bl	8005f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e01a      	b.n	8005a24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2220      	movs	r2, #32
 80059f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6859      	ldr	r1, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <HAL_I2C_Mem_Write+0x224>)
 8005a02:	400b      	ands	r3, r1
 8005a04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e000      	b.n	8005a24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
  }
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	fe00e800 	.word	0xfe00e800

08005a30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	817b      	strh	r3, [r7, #10]
 8005a42:	460b      	mov	r3, r1
 8005a44:	813b      	strh	r3, [r7, #8]
 8005a46:	4613      	mov	r3, r2
 8005a48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	f040 80fd 	bne.w	8005c52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_I2C_Mem_Read+0x34>
 8005a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0f1      	b.n	8005c54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_I2C_Mem_Read+0x4e>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e0ea      	b.n	8005c54 <HAL_I2C_Mem_Read+0x224>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a86:	f7fd f9cf 	bl	8002e28 <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	2319      	movs	r3, #25
 8005a92:	2201      	movs	r2, #1
 8005a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f9bd 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0d5      	b.n	8005c54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2222      	movs	r2, #34	; 0x22
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2240      	movs	r2, #64	; 0x40
 8005ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a3a      	ldr	r2, [r7, #32]
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ad0:	88f8      	ldrh	r0, [r7, #6]
 8005ad2:	893a      	ldrh	r2, [r7, #8]
 8005ad4:	8979      	ldrh	r1, [r7, #10]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	9301      	str	r3, [sp, #4]
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	4603      	mov	r3, r0
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f921 	bl	8005d28 <I2C_RequestMemoryRead>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0ad      	b.n	8005c54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2bff      	cmp	r3, #255	; 0xff
 8005b00:	d90e      	bls.n	8005b20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	22ff      	movs	r2, #255	; 0xff
 8005b06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	8979      	ldrh	r1, [r7, #10]
 8005b10:	4b52      	ldr	r3, [pc, #328]	; (8005c5c <HAL_I2C_Mem_Read+0x22c>)
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 fa9f 	bl	800605c <I2C_TransferConfig>
 8005b1e:	e00f      	b.n	8005b40 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	8979      	ldrh	r1, [r7, #10]
 8005b32:	4b4a      	ldr	r3, [pc, #296]	; (8005c5c <HAL_I2C_Mem_Read+0x22c>)
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 fa8e 	bl	800605c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	2200      	movs	r2, #0
 8005b48:	2104      	movs	r1, #4
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f964 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e07c      	b.n	8005c54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d034      	beq.n	8005c00 <HAL_I2C_Mem_Read+0x1d0>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d130      	bne.n	8005c00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2180      	movs	r1, #128	; 0x80
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f935 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e04d      	b.n	8005c54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2bff      	cmp	r3, #255	; 0xff
 8005bc0:	d90e      	bls.n	8005be0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	22ff      	movs	r2, #255	; 0xff
 8005bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	8979      	ldrh	r1, [r7, #10]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fa3f 	bl	800605c <I2C_TransferConfig>
 8005bde:	e00f      	b.n	8005c00 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	8979      	ldrh	r1, [r7, #10]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 fa2e 	bl	800605c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d19a      	bne.n	8005b40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f982 	bl	8005f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e01a      	b.n	8005c54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2220      	movs	r2, #32
 8005c24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6859      	ldr	r1, [r3, #4]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <HAL_I2C_Mem_Read+0x230>)
 8005c32:	400b      	ands	r3, r1
 8005c34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e000      	b.n	8005c54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c52:	2302      	movs	r3, #2
  }
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	80002400 	.word	0x80002400
 8005c60:	fe00e800 	.word	0xfe00e800

08005c64 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c72:	b2db      	uxtb	r3, r3
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	4608      	mov	r0, r1
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4603      	mov	r3, r0
 8005c90:	817b      	strh	r3, [r7, #10]
 8005c92:	460b      	mov	r3, r1
 8005c94:	813b      	strh	r3, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	8979      	ldrh	r1, [r7, #10]
 8005ca0:	4b20      	ldr	r3, [pc, #128]	; (8005d24 <I2C_RequestMemoryWrite+0xa4>)
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f9d7 	bl	800605c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	69b9      	ldr	r1, [r7, #24]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f8f0 	bl	8005e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e02c      	b.n	8005d1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d105      	bne.n	8005cd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cc8:	893b      	ldrh	r3, [r7, #8]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8005cd2:	e015      	b.n	8005d00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cd4:	893b      	ldrh	r3, [r7, #8]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	69b9      	ldr	r1, [r7, #24]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f8d6 	bl	8005e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e012      	b.n	8005d1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf6:	893b      	ldrh	r3, [r7, #8]
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2200      	movs	r2, #0
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f884 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	80002000 	.word	0x80002000

08005d28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	4608      	mov	r0, r1
 8005d32:	4611      	mov	r1, r2
 8005d34:	461a      	mov	r2, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	817b      	strh	r3, [r7, #10]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	813b      	strh	r3, [r7, #8]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	8979      	ldrh	r1, [r7, #10]
 8005d48:	4b20      	ldr	r3, [pc, #128]	; (8005dcc <I2C_RequestMemoryRead+0xa4>)
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 f984 	bl	800605c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	69b9      	ldr	r1, [r7, #24]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f89d 	bl	8005e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e02c      	b.n	8005dc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d68:	88fb      	ldrh	r3, [r7, #6]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d105      	bne.n	8005d7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d6e:	893b      	ldrh	r3, [r7, #8]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	629a      	str	r2, [r3, #40]	; 0x28
 8005d78:	e015      	b.n	8005da6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d7a:	893b      	ldrh	r3, [r7, #8]
 8005d7c:	0a1b      	lsrs	r3, r3, #8
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	69b9      	ldr	r1, [r7, #24]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f883 	bl	8005e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e012      	b.n	8005dc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2200      	movs	r2, #0
 8005dae:	2140      	movs	r1, #64	; 0x40
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f831 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e000      	b.n	8005dc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	80002000 	.word	0x80002000

08005dd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d103      	bne.n	8005dee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d007      	beq.n	8005e0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	619a      	str	r2, [r3, #24]
  }
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e28:	e022      	b.n	8005e70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d01e      	beq.n	8005e70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e32:	f7fc fff9 	bl	8002e28 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d302      	bcc.n	8005e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d113      	bne.n	8005e70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	f043 0220 	orr.w	r2, r3, #32
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e00f      	b.n	8005e90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d0cd      	beq.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ea4:	e02c      	b.n	8005f00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 f870 	bl	8005f90 <I2C_IsAcknowledgeFailed>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e02a      	b.n	8005f10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d01e      	beq.n	8005f00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec2:	f7fc ffb1 	bl	8002e28 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d302      	bcc.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d113      	bne.n	8005f00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e007      	b.n	8005f10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d1cb      	bne.n	8005ea6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f24:	e028      	b.n	8005f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f830 	bl	8005f90 <I2C_IsAcknowledgeFailed>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e026      	b.n	8005f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3a:	f7fc ff75 	bl	8002e28 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d302      	bcc.n	8005f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d113      	bne.n	8005f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f54:	f043 0220 	orr.w	r2, r3, #32
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e007      	b.n	8005f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d1cf      	bne.n	8005f26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d151      	bne.n	800604e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005faa:	e022      	b.n	8005ff2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb2:	d01e      	beq.n	8005ff2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb4:	f7fc ff38 	bl	8002e28 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d302      	bcc.n	8005fca <I2C_IsAcknowledgeFailed+0x3a>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d113      	bne.n	8005ff2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fce:	f043 0220 	orr.w	r2, r3, #32
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e02e      	b.n	8006050 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d1d5      	bne.n	8005fac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2210      	movs	r2, #16
 8006006:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2220      	movs	r2, #32
 800600e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fedd 	bl	8005dd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6859      	ldr	r1, [r3, #4]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b0d      	ldr	r3, [pc, #52]	; (8006058 <I2C_IsAcknowledgeFailed+0xc8>)
 8006022:	400b      	ands	r3, r1
 8006024:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	f043 0204 	orr.w	r2, r3, #4
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	fe00e800 	.word	0xfe00e800

0800605c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	607b      	str	r3, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	817b      	strh	r3, [r7, #10]
 800606a:	4613      	mov	r3, r2
 800606c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	0d5b      	lsrs	r3, r3, #21
 8006078:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800607c:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <I2C_TransferConfig+0x58>)
 800607e:	430b      	orrs	r3, r1
 8006080:	43db      	mvns	r3, r3
 8006082:	ea02 0103 	and.w	r1, r2, r3
 8006086:	897b      	ldrh	r3, [r7, #10]
 8006088:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800608c:	7a7b      	ldrb	r3, [r7, #9]
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	431a      	orrs	r2, r3
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	431a      	orrs	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	03ff63ff 	.word	0x03ff63ff

080060b8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e0bf      	b.n	800624a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fc fbaa 	bl	8002838 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80060fa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6999      	ldr	r1, [r3, #24]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006110:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6899      	ldr	r1, [r3, #8]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4b4a      	ldr	r3, [pc, #296]	; (8006254 <HAL_LTDC_Init+0x19c>)
 800612c:	400b      	ands	r3, r1
 800612e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	041b      	lsls	r3, r3, #16
 8006136:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6899      	ldr	r1, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68d9      	ldr	r1, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4b3e      	ldr	r3, [pc, #248]	; (8006254 <HAL_LTDC_Init+0x19c>)
 800615a:	400b      	ands	r3, r1
 800615c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68d9      	ldr	r1, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6919      	ldr	r1, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b33      	ldr	r3, [pc, #204]	; (8006254 <HAL_LTDC_Init+0x19c>)
 8006188:	400b      	ands	r3, r1
 800618a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6919      	ldr	r1, [r3, #16]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6959      	ldr	r1, [r3, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	4b27      	ldr	r3, [pc, #156]	; (8006254 <HAL_LTDC_Init+0x19c>)
 80061b6:	400b      	ands	r3, r1
 80061b8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	041b      	lsls	r3, r3, #16
 80061c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6959      	ldr	r1, [r3, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061e8:	041b      	lsls	r3, r3, #16
 80061ea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0206 	orr.w	r2, r2, #6
 8006226:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	f000f800 	.word	0xf000f800

08006258 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_LTDC_ConfigLayer+0x1a>
 800626e:	2302      	movs	r3, #2
 8006270:	e02c      	b.n	80062cc <HAL_LTDC_ConfigLayer+0x74>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2134      	movs	r1, #52	; 0x34
 8006288:	fb01 f303 	mul.w	r3, r1, r3
 800628c:	4413      	add	r3, r2
 800628e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4614      	mov	r4, r2
 8006296:	461d      	mov	r5, r3
 8006298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800629a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800629c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800629e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f81f 	bl	80062f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2201      	movs	r2, #1
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bdb0      	pop	{r4, r5, r7, pc}

080062d4 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80062e2:	b2db      	uxtb	r3, r3
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b089      	sub	sp, #36	; 0x24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	0c1b      	lsrs	r3, r3, #16
 8006308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630c:	4413      	add	r3, r2
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	01db      	lsls	r3, r3, #7
 800631c:	4413      	add	r3, r2
 800631e:	3384      	adds	r3, #132	; 0x84
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	4611      	mov	r1, r2
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	01d2      	lsls	r2, r2, #7
 800632c:	440a      	add	r2, r1
 800632e:	3284      	adds	r2, #132	; 0x84
 8006330:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006334:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	0c1b      	lsrs	r3, r3, #16
 8006342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006346:	4413      	add	r3, r2
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	01db      	lsls	r3, r3, #7
 8006354:	440b      	add	r3, r1
 8006356:	3384      	adds	r3, #132	; 0x84
 8006358:	4619      	mov	r1, r3
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	4313      	orrs	r3, r2
 800635e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800636e:	4413      	add	r3, r2
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	01db      	lsls	r3, r3, #7
 800637e:	4413      	add	r3, r2
 8006380:	3384      	adds	r3, #132	; 0x84
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	4611      	mov	r1, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	01d2      	lsls	r2, r2, #7
 800638e:	440a      	add	r2, r1
 8006390:	3284      	adds	r2, #132	; 0x84
 8006392:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006396:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063a6:	4413      	add	r3, r2
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	01db      	lsls	r3, r3, #7
 80063b4:	440b      	add	r3, r1
 80063b6:	3384      	adds	r3, #132	; 0x84
 80063b8:	4619      	mov	r1, r3
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4313      	orrs	r3, r2
 80063be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	01db      	lsls	r3, r3, #7
 80063ca:	4413      	add	r3, r2
 80063cc:	3384      	adds	r3, #132	; 0x84
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	4611      	mov	r1, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	01d2      	lsls	r2, r2, #7
 80063da:	440a      	add	r2, r1
 80063dc:	3284      	adds	r2, #132	; 0x84
 80063de:	f023 0307 	bic.w	r3, r3, #7
 80063e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	01db      	lsls	r3, r3, #7
 80063ee:	4413      	add	r3, r2
 80063f0:	3384      	adds	r3, #132	; 0x84
 80063f2:	461a      	mov	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800640a:	041b      	lsls	r3, r3, #16
 800640c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	061b      	lsls	r3, r3, #24
 8006414:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	01db      	lsls	r3, r3, #7
 8006420:	4413      	add	r3, r2
 8006422:	3384      	adds	r3, #132	; 0x84
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	01db      	lsls	r3, r3, #7
 8006430:	4413      	add	r3, r2
 8006432:	3384      	adds	r3, #132	; 0x84
 8006434:	461a      	mov	r2, r3
 8006436:	2300      	movs	r3, #0
 8006438:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006440:	461a      	mov	r2, r3
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	431a      	orrs	r2, r3
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	431a      	orrs	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4619      	mov	r1, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	01db      	lsls	r3, r3, #7
 8006454:	440b      	add	r3, r1
 8006456:	3384      	adds	r3, #132	; 0x84
 8006458:	4619      	mov	r1, r3
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	01db      	lsls	r3, r3, #7
 800646a:	4413      	add	r3, r2
 800646c:	3384      	adds	r3, #132	; 0x84
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	4611      	mov	r1, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	01d2      	lsls	r2, r2, #7
 800647a:	440a      	add	r2, r1
 800647c:	3284      	adds	r2, #132	; 0x84
 800647e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006482:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	01db      	lsls	r3, r3, #7
 800648e:	4413      	add	r3, r2
 8006490:	3384      	adds	r3, #132	; 0x84
 8006492:	461a      	mov	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	01db      	lsls	r3, r3, #7
 80064a4:	4413      	add	r3, r2
 80064a6:	3384      	adds	r3, #132	; 0x84
 80064a8:	69da      	ldr	r2, [r3, #28]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4619      	mov	r1, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	01db      	lsls	r3, r3, #7
 80064b4:	440b      	add	r3, r1
 80064b6:	3384      	adds	r3, #132	; 0x84
 80064b8:	4619      	mov	r1, r3
 80064ba:	4b58      	ldr	r3, [pc, #352]	; (800661c <LTDC_SetConfig+0x32c>)
 80064bc:	4013      	ands	r3, r2
 80064be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	68f9      	ldr	r1, [r7, #12]
 80064ca:	6809      	ldr	r1, [r1, #0]
 80064cc:	4608      	mov	r0, r1
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	01c9      	lsls	r1, r1, #7
 80064d2:	4401      	add	r1, r0
 80064d4:	3184      	adds	r1, #132	; 0x84
 80064d6:	4313      	orrs	r3, r2
 80064d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	01db      	lsls	r3, r3, #7
 80064e4:	4413      	add	r3, r2
 80064e6:	3384      	adds	r3, #132	; 0x84
 80064e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	01db      	lsls	r3, r3, #7
 80064f4:	4413      	add	r3, r2
 80064f6:	3384      	adds	r3, #132	; 0x84
 80064f8:	461a      	mov	r2, r3
 80064fa:	2300      	movs	r3, #0
 80064fc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	01db      	lsls	r3, r3, #7
 8006508:	4413      	add	r3, r2
 800650a:	3384      	adds	r3, #132	; 0x84
 800650c:	461a      	mov	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d102      	bne.n	8006522 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800651c:	2304      	movs	r3, #4
 800651e:	61fb      	str	r3, [r7, #28]
 8006520:	e01b      	b.n	800655a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d102      	bne.n	8006530 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800652a:	2303      	movs	r3, #3
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	e014      	b.n	800655a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b04      	cmp	r3, #4
 8006536:	d00b      	beq.n	8006550 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800653c:	2b02      	cmp	r3, #2
 800653e:	d007      	beq.n	8006550 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006544:	2b03      	cmp	r3, #3
 8006546:	d003      	beq.n	8006550 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800654c:	2b07      	cmp	r3, #7
 800654e:	d102      	bne.n	8006556 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006550:	2302      	movs	r3, #2
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	e001      	b.n	800655a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006556:	2301      	movs	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	01db      	lsls	r3, r3, #7
 8006564:	4413      	add	r3, r2
 8006566:	3384      	adds	r3, #132	; 0x84
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	4611      	mov	r1, r2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	01d2      	lsls	r2, r2, #7
 8006574:	440a      	add	r2, r1
 8006576:	3284      	adds	r2, #132	; 0x84
 8006578:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800657c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	fb02 f303 	mul.w	r3, r2, r3
 8006588:	041a      	lsls	r2, r3, #16
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6859      	ldr	r1, [r3, #4]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	1acb      	subs	r3, r1, r3
 8006594:	69f9      	ldr	r1, [r7, #28]
 8006596:	fb01 f303 	mul.w	r3, r1, r3
 800659a:	3303      	adds	r3, #3
 800659c:	68f9      	ldr	r1, [r7, #12]
 800659e:	6809      	ldr	r1, [r1, #0]
 80065a0:	4608      	mov	r0, r1
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	01c9      	lsls	r1, r1, #7
 80065a6:	4401      	add	r1, r0
 80065a8:	3184      	adds	r1, #132	; 0x84
 80065aa:	4313      	orrs	r3, r2
 80065ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	01db      	lsls	r3, r3, #7
 80065b8:	4413      	add	r3, r2
 80065ba:	3384      	adds	r3, #132	; 0x84
 80065bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4619      	mov	r1, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	01db      	lsls	r3, r3, #7
 80065c8:	440b      	add	r3, r1
 80065ca:	3384      	adds	r3, #132	; 0x84
 80065cc:	4619      	mov	r1, r3
 80065ce:	4b14      	ldr	r3, [pc, #80]	; (8006620 <LTDC_SetConfig+0x330>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	01db      	lsls	r3, r3, #7
 80065de:	4413      	add	r3, r2
 80065e0:	3384      	adds	r3, #132	; 0x84
 80065e2:	461a      	mov	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	01db      	lsls	r3, r3, #7
 80065f4:	4413      	add	r3, r2
 80065f6:	3384      	adds	r3, #132	; 0x84
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	6812      	ldr	r2, [r2, #0]
 80065fe:	4611      	mov	r1, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	01d2      	lsls	r2, r2, #7
 8006604:	440a      	add	r2, r1
 8006606:	3284      	adds	r2, #132	; 0x84
 8006608:	f043 0301 	orr.w	r3, r3, #1
 800660c:	6013      	str	r3, [r2, #0]
}
 800660e:	bf00      	nop
 8006610:	3724      	adds	r7, #36	; 0x24
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	fffff8f8 	.word	0xfffff8f8
 8006620:	fffff800 	.word	0xfffff800

08006624 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800662e:	4b23      	ldr	r3, [pc, #140]	; (80066bc <HAL_PWREx_EnableOverDrive+0x98>)
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	4a22      	ldr	r2, [pc, #136]	; (80066bc <HAL_PWREx_EnableOverDrive+0x98>)
 8006634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006638:	6413      	str	r3, [r2, #64]	; 0x40
 800663a:	4b20      	ldr	r3, [pc, #128]	; (80066bc <HAL_PWREx_EnableOverDrive+0x98>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006646:	4b1e      	ldr	r3, [pc, #120]	; (80066c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800664c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006650:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006652:	f7fc fbe9 	bl	8002e28 <HAL_GetTick>
 8006656:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006658:	e009      	b.n	800666e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800665a:	f7fc fbe5 	bl	8002e28 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006668:	d901      	bls.n	800666e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e022      	b.n	80066b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800666e:	4b14      	ldr	r3, [pc, #80]	; (80066c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800667a:	d1ee      	bne.n	800665a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800667c:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a0f      	ldr	r2, [pc, #60]	; (80066c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006686:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006688:	f7fc fbce 	bl	8002e28 <HAL_GetTick>
 800668c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800668e:	e009      	b.n	80066a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006690:	f7fc fbca 	bl	8002e28 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800669e:	d901      	bls.n	80066a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e007      	b.n	80066b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066a4:	4b06      	ldr	r3, [pc, #24]	; (80066c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b0:	d1ee      	bne.n	8006690 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	40023800 	.word	0x40023800
 80066c0:	40007000 	.word	0x40007000

080066c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80066cc:	2300      	movs	r3, #0
 80066ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e291      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8087 	beq.w	80067f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066e8:	4b96      	ldr	r3, [pc, #600]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 030c 	and.w	r3, r3, #12
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d00c      	beq.n	800670e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066f4:	4b93      	ldr	r3, [pc, #588]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 030c 	and.w	r3, r3, #12
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d112      	bne.n	8006726 <HAL_RCC_OscConfig+0x62>
 8006700:	4b90      	ldr	r3, [pc, #576]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800670c:	d10b      	bne.n	8006726 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670e:	4b8d      	ldr	r3, [pc, #564]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d06c      	beq.n	80067f4 <HAL_RCC_OscConfig+0x130>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d168      	bne.n	80067f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e26b      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800672e:	d106      	bne.n	800673e <HAL_RCC_OscConfig+0x7a>
 8006730:	4b84      	ldr	r3, [pc, #528]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a83      	ldr	r2, [pc, #524]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	e02e      	b.n	800679c <HAL_RCC_OscConfig+0xd8>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10c      	bne.n	8006760 <HAL_RCC_OscConfig+0x9c>
 8006746:	4b7f      	ldr	r3, [pc, #508]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a7e      	ldr	r2, [pc, #504]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 800674c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	4b7c      	ldr	r3, [pc, #496]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a7b      	ldr	r2, [pc, #492]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e01d      	b.n	800679c <HAL_RCC_OscConfig+0xd8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006768:	d10c      	bne.n	8006784 <HAL_RCC_OscConfig+0xc0>
 800676a:	4b76      	ldr	r3, [pc, #472]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a75      	ldr	r2, [pc, #468]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	4b73      	ldr	r3, [pc, #460]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a72      	ldr	r2, [pc, #456]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 800677c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	e00b      	b.n	800679c <HAL_RCC_OscConfig+0xd8>
 8006784:	4b6f      	ldr	r3, [pc, #444]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a6e      	ldr	r2, [pc, #440]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 800678a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	4b6c      	ldr	r3, [pc, #432]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a6b      	ldr	r2, [pc, #428]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800679a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d013      	beq.n	80067cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fc fb40 	bl	8002e28 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067ac:	f7fc fb3c 	bl	8002e28 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b64      	cmp	r3, #100	; 0x64
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e21f      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067be:	4b61      	ldr	r3, [pc, #388]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0f0      	beq.n	80067ac <HAL_RCC_OscConfig+0xe8>
 80067ca:	e014      	b.n	80067f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fc fb2c 	bl	8002e28 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067d4:	f7fc fb28 	bl	8002e28 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b64      	cmp	r3, #100	; 0x64
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e20b      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067e6:	4b57      	ldr	r3, [pc, #348]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f0      	bne.n	80067d4 <HAL_RCC_OscConfig+0x110>
 80067f2:	e000      	b.n	80067f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d069      	beq.n	80068d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006802:	4b50      	ldr	r3, [pc, #320]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00b      	beq.n	8006826 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800680e:	4b4d      	ldr	r3, [pc, #308]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 030c 	and.w	r3, r3, #12
 8006816:	2b08      	cmp	r3, #8
 8006818:	d11c      	bne.n	8006854 <HAL_RCC_OscConfig+0x190>
 800681a:	4b4a      	ldr	r3, [pc, #296]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d116      	bne.n	8006854 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006826:	4b47      	ldr	r3, [pc, #284]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d005      	beq.n	800683e <HAL_RCC_OscConfig+0x17a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d001      	beq.n	800683e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e1df      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800683e:	4b41      	ldr	r3, [pc, #260]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	493d      	ldr	r1, [pc, #244]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 800684e:	4313      	orrs	r3, r2
 8006850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006852:	e040      	b.n	80068d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d023      	beq.n	80068a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800685c:	4b39      	ldr	r3, [pc, #228]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a38      	ldr	r2, [pc, #224]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006868:	f7fc fade 	bl	8002e28 <HAL_GetTick>
 800686c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006870:	f7fc fada 	bl	8002e28 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e1bd      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006882:	4b30      	ldr	r3, [pc, #192]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0f0      	beq.n	8006870 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800688e:	4b2d      	ldr	r3, [pc, #180]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	4929      	ldr	r1, [pc, #164]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	600b      	str	r3, [r1, #0]
 80068a2:	e018      	b.n	80068d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068a4:	4b27      	ldr	r3, [pc, #156]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a26      	ldr	r2, [pc, #152]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b0:	f7fc faba 	bl	8002e28 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068b8:	f7fc fab6 	bl	8002e28 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e199      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ca:	4b1e      	ldr	r3, [pc, #120]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f0      	bne.n	80068b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d038      	beq.n	8006954 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d019      	beq.n	800691e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ea:	4b16      	ldr	r3, [pc, #88]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 80068ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ee:	4a15      	ldr	r2, [pc, #84]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fc fa97 	bl	8002e28 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068fe:	f7fc fa93 	bl	8002e28 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e176      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006910:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0f0      	beq.n	80068fe <HAL_RCC_OscConfig+0x23a>
 800691c:	e01a      	b.n	8006954 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006922:	4a08      	ldr	r2, [pc, #32]	; (8006944 <HAL_RCC_OscConfig+0x280>)
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692a:	f7fc fa7d 	bl	8002e28 <HAL_GetTick>
 800692e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006930:	e00a      	b.n	8006948 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006932:	f7fc fa79 	bl	8002e28 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d903      	bls.n	8006948 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e15c      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
 8006944:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006948:	4b91      	ldr	r3, [pc, #580]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 800694a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1ee      	bne.n	8006932 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80a4 	beq.w	8006aaa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006962:	4b8b      	ldr	r3, [pc, #556]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10d      	bne.n	800698a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800696e:	4b88      	ldr	r3, [pc, #544]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	4a87      	ldr	r2, [pc, #540]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006978:	6413      	str	r3, [r2, #64]	; 0x40
 800697a:	4b85      	ldr	r3, [pc, #532]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006982:	60bb      	str	r3, [r7, #8]
 8006984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006986:	2301      	movs	r3, #1
 8006988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800698a:	4b82      	ldr	r3, [pc, #520]	; (8006b94 <HAL_RCC_OscConfig+0x4d0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006992:	2b00      	cmp	r3, #0
 8006994:	d118      	bne.n	80069c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006996:	4b7f      	ldr	r3, [pc, #508]	; (8006b94 <HAL_RCC_OscConfig+0x4d0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a7e      	ldr	r2, [pc, #504]	; (8006b94 <HAL_RCC_OscConfig+0x4d0>)
 800699c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069a2:	f7fc fa41 	bl	8002e28 <HAL_GetTick>
 80069a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069a8:	e008      	b.n	80069bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069aa:	f7fc fa3d 	bl	8002e28 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b64      	cmp	r3, #100	; 0x64
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e120      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069bc:	4b75      	ldr	r3, [pc, #468]	; (8006b94 <HAL_RCC_OscConfig+0x4d0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0f0      	beq.n	80069aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d106      	bne.n	80069de <HAL_RCC_OscConfig+0x31a>
 80069d0:	4b6f      	ldr	r3, [pc, #444]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 80069d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d4:	4a6e      	ldr	r2, [pc, #440]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 80069d6:	f043 0301 	orr.w	r3, r3, #1
 80069da:	6713      	str	r3, [r2, #112]	; 0x70
 80069dc:	e02d      	b.n	8006a3a <HAL_RCC_OscConfig+0x376>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10c      	bne.n	8006a00 <HAL_RCC_OscConfig+0x33c>
 80069e6:	4b6a      	ldr	r3, [pc, #424]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 80069e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ea:	4a69      	ldr	r2, [pc, #420]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 80069ec:	f023 0301 	bic.w	r3, r3, #1
 80069f0:	6713      	str	r3, [r2, #112]	; 0x70
 80069f2:	4b67      	ldr	r3, [pc, #412]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f6:	4a66      	ldr	r2, [pc, #408]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 80069f8:	f023 0304 	bic.w	r3, r3, #4
 80069fc:	6713      	str	r3, [r2, #112]	; 0x70
 80069fe:	e01c      	b.n	8006a3a <HAL_RCC_OscConfig+0x376>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b05      	cmp	r3, #5
 8006a06:	d10c      	bne.n	8006a22 <HAL_RCC_OscConfig+0x35e>
 8006a08:	4b61      	ldr	r3, [pc, #388]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0c:	4a60      	ldr	r2, [pc, #384]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006a0e:	f043 0304 	orr.w	r3, r3, #4
 8006a12:	6713      	str	r3, [r2, #112]	; 0x70
 8006a14:	4b5e      	ldr	r3, [pc, #376]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a18:	4a5d      	ldr	r2, [pc, #372]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a20:	e00b      	b.n	8006a3a <HAL_RCC_OscConfig+0x376>
 8006a22:	4b5b      	ldr	r3, [pc, #364]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	4a5a      	ldr	r2, [pc, #360]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a2e:	4b58      	ldr	r3, [pc, #352]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	4a57      	ldr	r2, [pc, #348]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006a34:	f023 0304 	bic.w	r3, r3, #4
 8006a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d015      	beq.n	8006a6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a42:	f7fc f9f1 	bl	8002e28 <HAL_GetTick>
 8006a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a48:	e00a      	b.n	8006a60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a4a:	f7fc f9ed 	bl	8002e28 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e0ce      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a60:	4b4b      	ldr	r3, [pc, #300]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0ee      	beq.n	8006a4a <HAL_RCC_OscConfig+0x386>
 8006a6c:	e014      	b.n	8006a98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a6e:	f7fc f9db 	bl	8002e28 <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a74:	e00a      	b.n	8006a8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a76:	f7fc f9d7 	bl	8002e28 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e0b8      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a8c:	4b40      	ldr	r3, [pc, #256]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1ee      	bne.n	8006a76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d105      	bne.n	8006aaa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a9e:	4b3c      	ldr	r3, [pc, #240]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	4a3b      	ldr	r2, [pc, #236]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80a4 	beq.w	8006bfc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ab4:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 030c 	and.w	r3, r3, #12
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d06b      	beq.n	8006b98 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d149      	bne.n	8006b5c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac8:	4b31      	ldr	r3, [pc, #196]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a30      	ldr	r2, [pc, #192]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad4:	f7fc f9a8 	bl	8002e28 <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006adc:	f7fc f9a4 	bl	8002e28 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e087      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aee:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f0      	bne.n	8006adc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69da      	ldr	r2, [r3, #28]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	431a      	orrs	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	019b      	lsls	r3, r3, #6
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	3b01      	subs	r3, #1
 8006b14:	041b      	lsls	r3, r3, #16
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	061b      	lsls	r3, r3, #24
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	4a1b      	ldr	r2, [pc, #108]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006b22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b26:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b28:	4b19      	ldr	r3, [pc, #100]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a18      	ldr	r2, [pc, #96]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fc f978 	bl	8002e28 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b3c:	f7fc f974 	bl	8002e28 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e057      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b4e:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0x478>
 8006b5a:	e04f      	b.n	8006bfc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a0b      	ldr	r2, [pc, #44]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b68:	f7fc f95e 	bl	8002e28 <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b70:	f7fc f95a 	bl	8002e28 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e03d      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b82:	4b03      	ldr	r3, [pc, #12]	; (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f0      	bne.n	8006b70 <HAL_RCC_OscConfig+0x4ac>
 8006b8e:	e035      	b.n	8006bfc <HAL_RCC_OscConfig+0x538>
 8006b90:	40023800 	.word	0x40023800
 8006b94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006b98:	4b1b      	ldr	r3, [pc, #108]	; (8006c08 <HAL_RCC_OscConfig+0x544>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d028      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d121      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d11a      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bc8:	4013      	ands	r3, r2
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d111      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	085b      	lsrs	r3, r3, #1
 8006be0:	3b01      	subs	r3, #1
 8006be2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d107      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d001      	beq.n	8006bfc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e000      	b.n	8006bfe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40023800 	.word	0x40023800

08006c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0d0      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c24:	4b6a      	ldr	r3, [pc, #424]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d910      	bls.n	8006c54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c32:	4b67      	ldr	r3, [pc, #412]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f023 020f 	bic.w	r2, r3, #15
 8006c3a:	4965      	ldr	r1, [pc, #404]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c42:	4b63      	ldr	r3, [pc, #396]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d001      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0b8      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d020      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c6c:	4b59      	ldr	r3, [pc, #356]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	4a58      	ldr	r2, [pc, #352]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c84:	4b53      	ldr	r3, [pc, #332]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	4a52      	ldr	r2, [pc, #328]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c90:	4b50      	ldr	r3, [pc, #320]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	494d      	ldr	r1, [pc, #308]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d040      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb6:	4b47      	ldr	r3, [pc, #284]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d115      	bne.n	8006cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e07f      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cce:	4b41      	ldr	r3, [pc, #260]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e073      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cde:	4b3d      	ldr	r3, [pc, #244]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e06b      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cee:	4b39      	ldr	r3, [pc, #228]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f023 0203 	bic.w	r2, r3, #3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	4936      	ldr	r1, [pc, #216]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d00:	f7fc f892 	bl	8002e28 <HAL_GetTick>
 8006d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d06:	e00a      	b.n	8006d1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d08:	f7fc f88e 	bl	8002e28 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e053      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1e:	4b2d      	ldr	r3, [pc, #180]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 020c 	and.w	r2, r3, #12
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d1eb      	bne.n	8006d08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d30:	4b27      	ldr	r3, [pc, #156]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d210      	bcs.n	8006d60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3e:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f023 020f 	bic.w	r2, r3, #15
 8006d46:	4922      	ldr	r1, [pc, #136]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4e:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d001      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e032      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d6c:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	4916      	ldr	r1, [pc, #88]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d8a:	4b12      	ldr	r3, [pc, #72]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	490e      	ldr	r1, [pc, #56]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d9e:	f000 f821 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8006da2:	4601      	mov	r1, r0
 8006da4:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	091b      	lsrs	r3, r3, #4
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	4a0a      	ldr	r2, [pc, #40]	; (8006dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8006db0:	5cd3      	ldrb	r3, [r2, r3]
 8006db2:	fa21 f303 	lsr.w	r3, r1, r3
 8006db6:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <HAL_RCC_ClockConfig+0x1d0>)
 8006db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006dba:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <HAL_RCC_ClockConfig+0x1d4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fb ffee 	bl	8002da0 <HAL_InitTick>

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40023c00 	.word	0x40023c00
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	0800ab84 	.word	0x0800ab84
 8006ddc:	20000020 	.word	0x20000020
 8006de0:	20000024 	.word	0x20000024

08006de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	607b      	str	r3, [r7, #4]
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	2300      	movs	r3, #0
 8006df4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dfa:	4b50      	ldr	r3, [pc, #320]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 030c 	and.w	r3, r3, #12
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d007      	beq.n	8006e16 <HAL_RCC_GetSysClockFreq+0x32>
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d008      	beq.n	8006e1c <HAL_RCC_GetSysClockFreq+0x38>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 808d 	bne.w	8006f2a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e10:	4b4b      	ldr	r3, [pc, #300]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006e12:	60bb      	str	r3, [r7, #8]
      break;
 8006e14:	e08c      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e16:	4b4b      	ldr	r3, [pc, #300]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e18:	60bb      	str	r3, [r7, #8]
      break;
 8006e1a:	e089      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e1c:	4b47      	ldr	r3, [pc, #284]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e24:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006e26:	4b45      	ldr	r3, [pc, #276]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d023      	beq.n	8006e7a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e32:	4b42      	ldr	r3, [pc, #264]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	f04f 0400 	mov.w	r4, #0
 8006e3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	ea03 0501 	and.w	r5, r3, r1
 8006e48:	ea04 0602 	and.w	r6, r4, r2
 8006e4c:	4a3d      	ldr	r2, [pc, #244]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e4e:	fb02 f106 	mul.w	r1, r2, r6
 8006e52:	2200      	movs	r2, #0
 8006e54:	fb02 f205 	mul.w	r2, r2, r5
 8006e58:	440a      	add	r2, r1
 8006e5a:	493a      	ldr	r1, [pc, #232]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e5c:	fba5 0101 	umull	r0, r1, r5, r1
 8006e60:	1853      	adds	r3, r2, r1
 8006e62:	4619      	mov	r1, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f04f 0400 	mov.w	r4, #0
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4623      	mov	r3, r4
 8006e6e:	f7f9 f9cb 	bl	8000208 <__aeabi_uldivmod>
 8006e72:	4603      	mov	r3, r0
 8006e74:	460c      	mov	r4, r1
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e049      	b.n	8006f0e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e7a:	4b30      	ldr	r3, [pc, #192]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	099b      	lsrs	r3, r3, #6
 8006e80:	f04f 0400 	mov.w	r4, #0
 8006e84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	ea03 0501 	and.w	r5, r3, r1
 8006e90:	ea04 0602 	and.w	r6, r4, r2
 8006e94:	4629      	mov	r1, r5
 8006e96:	4632      	mov	r2, r6
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	f04f 0400 	mov.w	r4, #0
 8006ea0:	0154      	lsls	r4, r2, #5
 8006ea2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ea6:	014b      	lsls	r3, r1, #5
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4622      	mov	r2, r4
 8006eac:	1b49      	subs	r1, r1, r5
 8006eae:	eb62 0206 	sbc.w	r2, r2, r6
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	f04f 0400 	mov.w	r4, #0
 8006eba:	0194      	lsls	r4, r2, #6
 8006ebc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ec0:	018b      	lsls	r3, r1, #6
 8006ec2:	1a5b      	subs	r3, r3, r1
 8006ec4:	eb64 0402 	sbc.w	r4, r4, r2
 8006ec8:	f04f 0100 	mov.w	r1, #0
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	00e2      	lsls	r2, r4, #3
 8006ed2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006ed6:	00d9      	lsls	r1, r3, #3
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4614      	mov	r4, r2
 8006edc:	195b      	adds	r3, r3, r5
 8006ede:	eb44 0406 	adc.w	r4, r4, r6
 8006ee2:	f04f 0100 	mov.w	r1, #0
 8006ee6:	f04f 0200 	mov.w	r2, #0
 8006eea:	02a2      	lsls	r2, r4, #10
 8006eec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ef0:	0299      	lsls	r1, r3, #10
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4614      	mov	r4, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	4621      	mov	r1, r4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f04f 0400 	mov.w	r4, #0
 8006f00:	461a      	mov	r2, r3
 8006f02:	4623      	mov	r3, r4
 8006f04:	f7f9 f980 	bl	8000208 <__aeabi_uldivmod>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006f0e:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	0c1b      	lsrs	r3, r3, #16
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	3301      	adds	r3, #1
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f26:	60bb      	str	r3, [r7, #8]
      break;
 8006f28:	e002      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006f2c:	60bb      	str	r3, [r7, #8]
      break;
 8006f2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f30:	68bb      	ldr	r3, [r7, #8]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	00f42400 	.word	0x00f42400
 8006f44:	017d7840 	.word	0x017d7840

08006f48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f4c:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000020 	.word	0x20000020

08006f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f64:	f7ff fff0 	bl	8006f48 <HAL_RCC_GetHCLKFreq>
 8006f68:	4601      	mov	r1, r0
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	0a9b      	lsrs	r3, r3, #10
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4a03      	ldr	r2, [pc, #12]	; (8006f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f76:	5cd3      	ldrb	r3, [r2, r3]
 8006f78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40023800 	.word	0x40023800
 8006f84:	0800ab94 	.word	0x0800ab94

08006f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f8c:	f7ff ffdc 	bl	8006f48 <HAL_RCC_GetHCLKFreq>
 8006f90:	4601      	mov	r1, r0
 8006f92:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	0b5b      	lsrs	r3, r3, #13
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	4a03      	ldr	r2, [pc, #12]	; (8006fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f9e:	5cd3      	ldrb	r3, [r2, r3]
 8006fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	0800ab94 	.word	0x0800ab94

08006fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d012      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fd8:	4b69      	ldr	r3, [pc, #420]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	4a68      	ldr	r2, [pc, #416]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006fe2:	6093      	str	r3, [r2, #8]
 8006fe4:	4b66      	ldr	r3, [pc, #408]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fec:	4964      	ldr	r1, [pc, #400]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d017      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800700a:	4b5d      	ldr	r3, [pc, #372]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007010:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007018:	4959      	ldr	r1, [pc, #356]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701a:	4313      	orrs	r3, r2
 800701c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007028:	d101      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800702a:	2301      	movs	r3, #1
 800702c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007036:	2301      	movs	r3, #1
 8007038:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d017      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007046:	4b4e      	ldr	r3, [pc, #312]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800704c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	494a      	ldr	r1, [pc, #296]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007064:	d101      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007066:	2301      	movs	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007072:	2301      	movs	r3, #1
 8007074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007082:	2301      	movs	r3, #1
 8007084:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 808b 	beq.w	80071aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007094:	4b3a      	ldr	r3, [pc, #232]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007098:	4a39      	ldr	r2, [pc, #228]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800709a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800709e:	6413      	str	r3, [r2, #64]	; 0x40
 80070a0:	4b37      	ldr	r3, [pc, #220]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a8:	60bb      	str	r3, [r7, #8]
 80070aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80070ac:	4b35      	ldr	r3, [pc, #212]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a34      	ldr	r2, [pc, #208]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070b8:	f7fb feb6 	bl	8002e28 <HAL_GetTick>
 80070bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070c0:	f7fb feb2 	bl	8002e28 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b64      	cmp	r3, #100	; 0x64
 80070cc:	d901      	bls.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e355      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80070d2:	4b2c      	ldr	r3, [pc, #176]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0f0      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070de:	4b28      	ldr	r3, [pc, #160]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d035      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d02e      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070fc:	4b20      	ldr	r3, [pc, #128]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007104:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007106:	4b1e      	ldr	r3, [pc, #120]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710a:	4a1d      	ldr	r2, [pc, #116]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800710c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007110:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007112:	4b1b      	ldr	r3, [pc, #108]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007116:	4a1a      	ldr	r2, [pc, #104]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800711e:	4a18      	ldr	r2, [pc, #96]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007124:	4b16      	ldr	r3, [pc, #88]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b01      	cmp	r3, #1
 800712e:	d114      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fb fe7a 	bl	8002e28 <HAL_GetTick>
 8007134:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007136:	e00a      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007138:	f7fb fe76 	bl	8002e28 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	; 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e317      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714e:	4b0c      	ldr	r3, [pc, #48]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0ee      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007166:	d111      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007174:	4b04      	ldr	r3, [pc, #16]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007176:	400b      	ands	r3, r1
 8007178:	4901      	ldr	r1, [pc, #4]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800717a:	4313      	orrs	r3, r2
 800717c:	608b      	str	r3, [r1, #8]
 800717e:	e00b      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007180:	40023800 	.word	0x40023800
 8007184:	40007000 	.word	0x40007000
 8007188:	0ffffcff 	.word	0x0ffffcff
 800718c:	4bb0      	ldr	r3, [pc, #704]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	4aaf      	ldr	r2, [pc, #700]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007192:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007196:	6093      	str	r3, [r2, #8]
 8007198:	4bad      	ldr	r3, [pc, #692]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800719a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071a4:	49aa      	ldr	r1, [pc, #680]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d010      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071b6:	4ba6      	ldr	r3, [pc, #664]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071bc:	4aa4      	ldr	r2, [pc, #656]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80071c6:	4ba2      	ldr	r3, [pc, #648]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	499f      	ldr	r1, [pc, #636]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071e4:	4b9a      	ldr	r3, [pc, #616]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f2:	4997      	ldr	r1, [pc, #604]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007206:	4b92      	ldr	r3, [pc, #584]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007214:	498e      	ldr	r1, [pc, #568]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007228:	4b89      	ldr	r3, [pc, #548]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007236:	4986      	ldr	r1, [pc, #536]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007238:	4313      	orrs	r3, r2
 800723a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800724a:	4b81      	ldr	r3, [pc, #516]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007250:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	497d      	ldr	r1, [pc, #500]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800725a:	4313      	orrs	r3, r2
 800725c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800726c:	4b78      	ldr	r3, [pc, #480]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007272:	f023 0203 	bic.w	r2, r3, #3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	4975      	ldr	r1, [pc, #468]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800727c:	4313      	orrs	r3, r2
 800727e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800728e:	4b70      	ldr	r3, [pc, #448]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	f023 020c 	bic.w	r2, r3, #12
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729c:	496c      	ldr	r1, [pc, #432]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072b0:	4b67      	ldr	r3, [pc, #412]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072be:	4964      	ldr	r1, [pc, #400]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80072d2:	4b5f      	ldr	r3, [pc, #380]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e0:	495b      	ldr	r1, [pc, #364]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00a      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072f4:	4b56      	ldr	r3, [pc, #344]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	4953      	ldr	r1, [pc, #332]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007304:	4313      	orrs	r3, r2
 8007306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007316:	4b4e      	ldr	r3, [pc, #312]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007324:	494a      	ldr	r1, [pc, #296]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007338:	4b45      	ldr	r3, [pc, #276]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007346:	4942      	ldr	r1, [pc, #264]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007348:	4313      	orrs	r3, r2
 800734a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800735a:	4b3d      	ldr	r3, [pc, #244]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800735c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007360:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007368:	4939      	ldr	r1, [pc, #228]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800737c:	4b34      	ldr	r3, [pc, #208]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800737e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007382:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800738a:	4931      	ldr	r1, [pc, #196]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800738c:	4313      	orrs	r3, r2
 800738e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d011      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800739e:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ac:	4928      	ldr	r1, [pc, #160]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073bc:	d101      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80073be:	2301      	movs	r3, #1
 80073c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80073ce:	2301      	movs	r3, #1
 80073d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073de:	4b1c      	ldr	r3, [pc, #112]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ec:	4918      	ldr	r1, [pc, #96]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007400:	4b13      	ldr	r3, [pc, #76]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007410:	490f      	ldr	r1, [pc, #60]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d005      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007426:	f040 80d8 	bne.w	80075da <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800742a:	4b09      	ldr	r3, [pc, #36]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a08      	ldr	r2, [pc, #32]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007430:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007436:	f7fb fcf7 	bl	8002e28 <HAL_GetTick>
 800743a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800743c:	e00a      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800743e:	f7fb fcf3 	bl	8002e28 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2b64      	cmp	r3, #100	; 0x64
 800744a:	d903      	bls.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e196      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007450:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007454:	4b6c      	ldr	r3, [pc, #432]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1ee      	bne.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d021      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007470:	2b00      	cmp	r3, #0
 8007472:	d11d      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007474:	4b64      	ldr	r3, [pc, #400]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747a:	0c1b      	lsrs	r3, r3, #16
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007482:	4b61      	ldr	r3, [pc, #388]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007488:	0e1b      	lsrs	r3, r3, #24
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	019a      	lsls	r2, r3, #6
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	041b      	lsls	r3, r3, #16
 800749a:	431a      	orrs	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	061b      	lsls	r3, r3, #24
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	071b      	lsls	r3, r3, #28
 80074a8:	4957      	ldr	r1, [pc, #348]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074c4:	d00a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d02e      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074da:	d129      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074dc:	4b4a      	ldr	r3, [pc, #296]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074ea:	4b47      	ldr	r3, [pc, #284]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f0:	0f1b      	lsrs	r3, r3, #28
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	019a      	lsls	r2, r3, #6
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	041b      	lsls	r3, r3, #16
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	061b      	lsls	r3, r3, #24
 800750a:	431a      	orrs	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	071b      	lsls	r3, r3, #28
 8007510:	493d      	ldr	r1, [pc, #244]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007518:	4b3b      	ldr	r3, [pc, #236]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800751a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800751e:	f023 021f 	bic.w	r2, r3, #31
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	3b01      	subs	r3, #1
 8007528:	4937      	ldr	r1, [pc, #220]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01d      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800753c:	4b32      	ldr	r3, [pc, #200]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800753e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007542:	0e1b      	lsrs	r3, r3, #24
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800754a:	4b2f      	ldr	r3, [pc, #188]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800754c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007550:	0f1b      	lsrs	r3, r3, #28
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	019a      	lsls	r2, r3, #6
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	041b      	lsls	r3, r3, #16
 8007564:	431a      	orrs	r2, r3
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	061b      	lsls	r3, r3, #24
 800756a:	431a      	orrs	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	071b      	lsls	r3, r3, #28
 8007570:	4925      	ldr	r1, [pc, #148]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d011      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	019a      	lsls	r2, r3, #6
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	431a      	orrs	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	061b      	lsls	r3, r3, #24
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	071b      	lsls	r3, r3, #28
 80075a0:	4919      	ldr	r1, [pc, #100]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075a8:	4b17      	ldr	r3, [pc, #92]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a16      	ldr	r2, [pc, #88]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b4:	f7fb fc38 	bl	8002e28 <HAL_GetTick>
 80075b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075ba:	e008      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075bc:	f7fb fc34 	bl	8002e28 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b64      	cmp	r3, #100	; 0x64
 80075c8:	d901      	bls.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e0d7      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075ce:	4b0e      	ldr	r3, [pc, #56]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0f0      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	f040 80cd 	bne.w	800777c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80075e2:	4b09      	ldr	r3, [pc, #36]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a08      	ldr	r2, [pc, #32]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ee:	f7fb fc1b 	bl	8002e28 <HAL_GetTick>
 80075f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075f4:	e00a      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075f6:	f7fb fc17 	bl	8002e28 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b64      	cmp	r3, #100	; 0x64
 8007602:	d903      	bls.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e0ba      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007608:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800760c:	4b5e      	ldr	r3, [pc, #376]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007618:	d0ed      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007636:	2b00      	cmp	r3, #0
 8007638:	d02e      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	2b00      	cmp	r3, #0
 8007640:	d12a      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007642:	4b51      	ldr	r3, [pc, #324]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007648:	0c1b      	lsrs	r3, r3, #16
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007650:	4b4d      	ldr	r3, [pc, #308]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007656:	0f1b      	lsrs	r3, r3, #28
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	019a      	lsls	r2, r3, #6
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	041b      	lsls	r3, r3, #16
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	061b      	lsls	r3, r3, #24
 8007670:	431a      	orrs	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	071b      	lsls	r3, r3, #28
 8007676:	4944      	ldr	r1, [pc, #272]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007678:	4313      	orrs	r3, r2
 800767a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800767e:	4b42      	ldr	r3, [pc, #264]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007684:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768c:	3b01      	subs	r3, #1
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	493d      	ldr	r1, [pc, #244]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d022      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076ac:	d11d      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076ae:	4b36      	ldr	r3, [pc, #216]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b4:	0e1b      	lsrs	r3, r3, #24
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80076bc:	4b32      	ldr	r3, [pc, #200]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c2:	0f1b      	lsrs	r3, r3, #28
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	019a      	lsls	r2, r3, #6
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	041b      	lsls	r3, r3, #16
 80076d6:	431a      	orrs	r2, r3
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	061b      	lsls	r3, r3, #24
 80076dc:	431a      	orrs	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	071b      	lsls	r3, r3, #28
 80076e2:	4929      	ldr	r1, [pc, #164]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d028      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076f6:	4b24      	ldr	r3, [pc, #144]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fc:	0e1b      	lsrs	r3, r3, #24
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007704:	4b20      	ldr	r3, [pc, #128]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770a:	0c1b      	lsrs	r3, r3, #16
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	019a      	lsls	r2, r3, #6
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	041b      	lsls	r3, r3, #16
 800771c:	431a      	orrs	r2, r3
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	061b      	lsls	r3, r3, #24
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	071b      	lsls	r3, r3, #28
 800772a:	4917      	ldr	r1, [pc, #92]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800772c:	4313      	orrs	r3, r2
 800772e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007732:	4b15      	ldr	r3, [pc, #84]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007738:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	4911      	ldr	r1, [pc, #68]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007748:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a0e      	ldr	r2, [pc, #56]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800774e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007754:	f7fb fb68 	bl	8002e28 <HAL_GetTick>
 8007758:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800775a:	e008      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800775c:	f7fb fb64 	bl	8002e28 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b64      	cmp	r3, #100	; 0x64
 8007768:	d901      	bls.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e007      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800776e:	4b06      	ldr	r3, [pc, #24]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800777a:	d1ef      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3720      	adds	r7, #32
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	40023800 	.word	0x40023800

0800778c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e025      	b.n	80077ec <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d106      	bne.n	80077ba <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7fb fa51 	bl	8002c5c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2202      	movs	r2, #2
 80077be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3304      	adds	r3, #4
 80077ca:	4619      	mov	r1, r3
 80077cc:	4610      	mov	r0, r2
 80077ce:	f001 f95f 	bl	8008a90 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	461a      	mov	r2, r3
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	f001 f9c9 	bl	8008b74 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_SDRAM_Read_32b+0x20>
 8007810:	2302      	movs	r3, #2
 8007812:	e028      	b.n	8007866 <HAL_SDRAM_Read_32b+0x72>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d101      	bne.n	800782c <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 8007828:	2302      	movs	r3, #2
 800782a:	e01c      	b.n	8007866 <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b05      	cmp	r3, #5
 8007836:	d10e      	bne.n	8007856 <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 8007838:	2301      	movs	r3, #1
 800783a:	e014      	b.n	8007866 <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	3304      	adds	r3, #4
 800784e:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	3b01      	subs	r3, #1
 8007854:	603b      	str	r3, [r7, #0]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1ef      	bne.n	800783c <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8007872:	b480      	push	{r7}
 8007874:	b087      	sub	sp, #28
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 8007884:	2300      	movs	r3, #0
 8007886:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800788e:	2b01      	cmp	r3, #1
 8007890:	d101      	bne.n	8007896 <HAL_SDRAM_Write_32b+0x24>
 8007892:	2302      	movs	r3, #2
 8007894:	e02a      	b.n	80078ec <HAL_SDRAM_Write_32b+0x7a>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d101      	bne.n	80078b2 <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
 80078b0:	e01c      	b.n	80078ec <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b05      	cmp	r3, #5
 80078b6:	d002      	beq.n	80078be <HAL_SDRAM_Write_32b+0x4c>
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d10e      	bne.n	80078dc <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 80078be:	2301      	movs	r3, #1
 80078c0:	e014      	b.n	80078ec <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3304      	adds	r3, #4
 80078ce:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	3304      	adds	r3, #4
 80078d4:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	3b01      	subs	r3, #1
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1ef      	bne.n	80078c2 <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	371c      	adds	r7, #28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d101      	bne.n	8007914 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007910:	2302      	movs	r3, #2
 8007912:	e018      	b.n	8007946 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	4618      	mov	r0, r3
 8007926:	f001 f9a5 	bl	8008c74 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d104      	bne.n	800793c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2205      	movs	r2, #5
 8007936:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800793a:	e003      	b.n	8007944 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d101      	bne.n	8007968 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007964:	2302      	movs	r3, #2
 8007966:	e00e      	b.n	8007986 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f001 f99d 	bl	8008cb6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e01d      	b.n	80079dc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d106      	bne.n	80079ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7fa ffff 	bl	80029b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f000 fa35 	bl	8007e3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <HAL_TIM_Base_Start_IT+0x50>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b06      	cmp	r3, #6
 8007a0c:	d00b      	beq.n	8007a26 <HAL_TIM_Base_Start_IT+0x42>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a14:	d007      	beq.n	8007a26 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0201 	orr.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	00010007 	.word	0x00010007

08007a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d122      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d11b      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0202 	mvn.w	r2, #2
 8007a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f003 0303 	and.w	r3, r3, #3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f9c0 	bl	8007e00 <HAL_TIM_IC_CaptureCallback>
 8007a80:	e005      	b.n	8007a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f9b2 	bl	8007dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f9c3 	bl	8007e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0304 	and.w	r3, r3, #4
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d122      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d11b      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0204 	mvn.w	r2, #4
 8007ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2202      	movs	r2, #2
 8007abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f996 	bl	8007e00 <HAL_TIM_IC_CaptureCallback>
 8007ad4:	e005      	b.n	8007ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f988 	bl	8007dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f999 	bl	8007e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d122      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d11b      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0208 	mvn.w	r2, #8
 8007b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2204      	movs	r2, #4
 8007b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f96c 	bl	8007e00 <HAL_TIM_IC_CaptureCallback>
 8007b28:	e005      	b.n	8007b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f95e 	bl	8007dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f96f 	bl	8007e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f003 0310 	and.w	r3, r3, #16
 8007b46:	2b10      	cmp	r3, #16
 8007b48:	d122      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b10      	cmp	r3, #16
 8007b56:	d11b      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f06f 0210 	mvn.w	r2, #16
 8007b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2208      	movs	r2, #8
 8007b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f942 	bl	8007e00 <HAL_TIM_IC_CaptureCallback>
 8007b7c:	e005      	b.n	8007b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f934 	bl	8007dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f945 	bl	8007e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d10e      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d107      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f06f 0201 	mvn.w	r2, #1
 8007bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7f9 ff32 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc6:	2b80      	cmp	r3, #128	; 0x80
 8007bc8:	d10e      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd4:	2b80      	cmp	r3, #128	; 0x80
 8007bd6:	d107      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fafc 	bl	80081e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf6:	d10e      	bne.n	8007c16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c02:	2b80      	cmp	r3, #128	; 0x80
 8007c04:	d107      	bne.n	8007c16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 faef 	bl	80081f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b40      	cmp	r3, #64	; 0x40
 8007c22:	d10e      	bne.n	8007c42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2e:	2b40      	cmp	r3, #64	; 0x40
 8007c30:	d107      	bne.n	8007c42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f8f3 	bl	8007e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d10e      	bne.n	8007c6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d107      	bne.n	8007c6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f06f 0220 	mvn.w	r2, #32
 8007c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 faaf 	bl	80081cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_TIM_ConfigClockSource+0x18>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e0a6      	b.n	8007dde <HAL_TIM_ConfigClockSource+0x166>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4b4f      	ldr	r3, [pc, #316]	; (8007de8 <HAL_TIM_ConfigClockSource+0x170>)
 8007cac:	4013      	ands	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b40      	cmp	r3, #64	; 0x40
 8007cc6:	d067      	beq.n	8007d98 <HAL_TIM_ConfigClockSource+0x120>
 8007cc8:	2b40      	cmp	r3, #64	; 0x40
 8007cca:	d80b      	bhi.n	8007ce4 <HAL_TIM_ConfigClockSource+0x6c>
 8007ccc:	2b10      	cmp	r3, #16
 8007cce:	d073      	beq.n	8007db8 <HAL_TIM_ConfigClockSource+0x140>
 8007cd0:	2b10      	cmp	r3, #16
 8007cd2:	d802      	bhi.n	8007cda <HAL_TIM_ConfigClockSource+0x62>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d06f      	beq.n	8007db8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007cd8:	e078      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d06c      	beq.n	8007db8 <HAL_TIM_ConfigClockSource+0x140>
 8007cde:	2b30      	cmp	r3, #48	; 0x30
 8007ce0:	d06a      	beq.n	8007db8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007ce2:	e073      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007ce4:	2b70      	cmp	r3, #112	; 0x70
 8007ce6:	d00d      	beq.n	8007d04 <HAL_TIM_ConfigClockSource+0x8c>
 8007ce8:	2b70      	cmp	r3, #112	; 0x70
 8007cea:	d804      	bhi.n	8007cf6 <HAL_TIM_ConfigClockSource+0x7e>
 8007cec:	2b50      	cmp	r3, #80	; 0x50
 8007cee:	d033      	beq.n	8007d58 <HAL_TIM_ConfigClockSource+0xe0>
 8007cf0:	2b60      	cmp	r3, #96	; 0x60
 8007cf2:	d041      	beq.n	8007d78 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007cf4:	e06a      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfa:	d066      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0x152>
 8007cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d00:	d017      	beq.n	8007d32 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007d02:	e063      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6818      	ldr	r0, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	6899      	ldr	r1, [r3, #8]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f000 f9ac 	bl	8008070 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	609a      	str	r2, [r3, #8]
      break;
 8007d30:	e04c      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6818      	ldr	r0, [r3, #0]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	6899      	ldr	r1, [r3, #8]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f000 f995 	bl	8008070 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689a      	ldr	r2, [r3, #8]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d54:	609a      	str	r2, [r3, #8]
      break;
 8007d56:	e039      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6818      	ldr	r0, [r3, #0]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	6859      	ldr	r1, [r3, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	461a      	mov	r2, r3
 8007d66:	f000 f909 	bl	8007f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2150      	movs	r1, #80	; 0x50
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 f962 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 8007d76:	e029      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	6859      	ldr	r1, [r3, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	461a      	mov	r2, r3
 8007d86:	f000 f928 	bl	8007fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2160      	movs	r1, #96	; 0x60
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 f952 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 8007d96:	e019      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	6859      	ldr	r1, [r3, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	461a      	mov	r2, r3
 8007da6:	f000 f8e9 	bl	8007f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2140      	movs	r1, #64	; 0x40
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 f942 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 8007db6:	e009      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f000 f939 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 8007dc8:	e000      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	fffeff88 	.word	0xfffeff88

08007dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a40      	ldr	r2, [pc, #256]	; (8007f50 <TIM_Base_SetConfig+0x114>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d013      	beq.n	8007e7c <TIM_Base_SetConfig+0x40>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5a:	d00f      	beq.n	8007e7c <TIM_Base_SetConfig+0x40>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a3d      	ldr	r2, [pc, #244]	; (8007f54 <TIM_Base_SetConfig+0x118>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00b      	beq.n	8007e7c <TIM_Base_SetConfig+0x40>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a3c      	ldr	r2, [pc, #240]	; (8007f58 <TIM_Base_SetConfig+0x11c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d007      	beq.n	8007e7c <TIM_Base_SetConfig+0x40>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a3b      	ldr	r2, [pc, #236]	; (8007f5c <TIM_Base_SetConfig+0x120>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d003      	beq.n	8007e7c <TIM_Base_SetConfig+0x40>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a3a      	ldr	r2, [pc, #232]	; (8007f60 <TIM_Base_SetConfig+0x124>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d108      	bne.n	8007e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a2f      	ldr	r2, [pc, #188]	; (8007f50 <TIM_Base_SetConfig+0x114>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d02b      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9c:	d027      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a2c      	ldr	r2, [pc, #176]	; (8007f54 <TIM_Base_SetConfig+0x118>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d023      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a2b      	ldr	r2, [pc, #172]	; (8007f58 <TIM_Base_SetConfig+0x11c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d01f      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a2a      	ldr	r2, [pc, #168]	; (8007f5c <TIM_Base_SetConfig+0x120>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d01b      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a29      	ldr	r2, [pc, #164]	; (8007f60 <TIM_Base_SetConfig+0x124>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d017      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a28      	ldr	r2, [pc, #160]	; (8007f64 <TIM_Base_SetConfig+0x128>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d013      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a27      	ldr	r2, [pc, #156]	; (8007f68 <TIM_Base_SetConfig+0x12c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00f      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a26      	ldr	r2, [pc, #152]	; (8007f6c <TIM_Base_SetConfig+0x130>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00b      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a25      	ldr	r2, [pc, #148]	; (8007f70 <TIM_Base_SetConfig+0x134>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d007      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a24      	ldr	r2, [pc, #144]	; (8007f74 <TIM_Base_SetConfig+0x138>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d003      	beq.n	8007eee <TIM_Base_SetConfig+0xb2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a23      	ldr	r2, [pc, #140]	; (8007f78 <TIM_Base_SetConfig+0x13c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d108      	bne.n	8007f00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a0a      	ldr	r2, [pc, #40]	; (8007f50 <TIM_Base_SetConfig+0x114>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_Base_SetConfig+0xf8>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a0c      	ldr	r2, [pc, #48]	; (8007f60 <TIM_Base_SetConfig+0x124>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d103      	bne.n	8007f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	691a      	ldr	r2, [r3, #16]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	615a      	str	r2, [r3, #20]
}
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	40010000 	.word	0x40010000
 8007f54:	40000400 	.word	0x40000400
 8007f58:	40000800 	.word	0x40000800
 8007f5c:	40000c00 	.word	0x40000c00
 8007f60:	40010400 	.word	0x40010400
 8007f64:	40014000 	.word	0x40014000
 8007f68:	40014400 	.word	0x40014400
 8007f6c:	40014800 	.word	0x40014800
 8007f70:	40001800 	.word	0x40001800
 8007f74:	40001c00 	.word	0x40001c00
 8007f78:	40002000 	.word	0x40002000

08007f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	f023 0201 	bic.w	r2, r3, #1
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	011b      	lsls	r3, r3, #4
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f023 030a 	bic.w	r3, r3, #10
 8007fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	621a      	str	r2, [r3, #32]
}
 8007fce:	bf00      	nop
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b087      	sub	sp, #28
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	f023 0210 	bic.w	r2, r3, #16
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	031b      	lsls	r3, r3, #12
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	4313      	orrs	r3, r2
 800800e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	621a      	str	r2, [r3, #32]
}
 800802e:	bf00      	nop
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	f043 0307 	orr.w	r3, r3, #7
 800805c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	609a      	str	r2, [r3, #8]
}
 8008064:	bf00      	nop
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800808a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	021a      	lsls	r2, r3, #8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	431a      	orrs	r2, r3
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4313      	orrs	r3, r2
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	4313      	orrs	r3, r2
 800809c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	609a      	str	r2, [r3, #8]
}
 80080a4:	bf00      	nop
 80080a6:	371c      	adds	r7, #28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e06d      	b.n	80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a30      	ldr	r2, [pc, #192]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d004      	beq.n	80080fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a2f      	ldr	r2, [pc, #188]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d108      	bne.n	800810e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008102:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008114:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a20      	ldr	r2, [pc, #128]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d022      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813a:	d01d      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1d      	ldr	r2, [pc, #116]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d018      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a1c      	ldr	r2, [pc, #112]	; (80081bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d013      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a1a      	ldr	r2, [pc, #104]	; (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00e      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d009      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a16      	ldr	r2, [pc, #88]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d004      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d10c      	bne.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800817e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	4313      	orrs	r3, r2
 8008188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	40010000 	.word	0x40010000
 80081b4:	40010400 	.word	0x40010400
 80081b8:	40000400 	.word	0x40000400
 80081bc:	40000800 	.word	0x40000800
 80081c0:	40000c00 	.word	0x40000c00
 80081c4:	40014000 	.word	0x40014000
 80081c8:	40001800 	.word	0x40001800

080081cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e040      	b.n	800829c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7fa fc24 	bl	8002a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2224      	movs	r2, #36	; 0x24
 8008234:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 0201 	bic.w	r2, r2, #1
 8008244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f82c 	bl	80082a4 <UART_SetConfig>
 800824c:	4603      	mov	r3, r0
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e022      	b.n	800829c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 faca 	bl	80087f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fb51 	bl	800893c <UART_CheckIdleState>
 800829a:	4603      	mov	r3, r0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	431a      	orrs	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	4bb1      	ldr	r3, [pc, #708]	; (8008598 <UART_SetConfig+0x2f4>)
 80082d4:	4013      	ands	r3, r2
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	6812      	ldr	r2, [r2, #0]
 80082da:	6939      	ldr	r1, [r7, #16]
 80082dc:	430b      	orrs	r3, r1
 80082de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4313      	orrs	r3, r2
 8008304:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	430a      	orrs	r2, r1
 8008318:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a9f      	ldr	r2, [pc, #636]	; (800859c <UART_SetConfig+0x2f8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d121      	bne.n	8008368 <UART_SetConfig+0xc4>
 8008324:	4b9e      	ldr	r3, [pc, #632]	; (80085a0 <UART_SetConfig+0x2fc>)
 8008326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	2b03      	cmp	r3, #3
 8008330:	d816      	bhi.n	8008360 <UART_SetConfig+0xbc>
 8008332:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <UART_SetConfig+0x94>)
 8008334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008338:	08008349 	.word	0x08008349
 800833c:	08008355 	.word	0x08008355
 8008340:	0800834f 	.word	0x0800834f
 8008344:	0800835b 	.word	0x0800835b
 8008348:	2301      	movs	r3, #1
 800834a:	77fb      	strb	r3, [r7, #31]
 800834c:	e151      	b.n	80085f2 <UART_SetConfig+0x34e>
 800834e:	2302      	movs	r3, #2
 8008350:	77fb      	strb	r3, [r7, #31]
 8008352:	e14e      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008354:	2304      	movs	r3, #4
 8008356:	77fb      	strb	r3, [r7, #31]
 8008358:	e14b      	b.n	80085f2 <UART_SetConfig+0x34e>
 800835a:	2308      	movs	r3, #8
 800835c:	77fb      	strb	r3, [r7, #31]
 800835e:	e148      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008360:	2310      	movs	r3, #16
 8008362:	77fb      	strb	r3, [r7, #31]
 8008364:	bf00      	nop
 8008366:	e144      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a8d      	ldr	r2, [pc, #564]	; (80085a4 <UART_SetConfig+0x300>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d134      	bne.n	80083dc <UART_SetConfig+0x138>
 8008372:	4b8b      	ldr	r3, [pc, #556]	; (80085a0 <UART_SetConfig+0x2fc>)
 8008374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008378:	f003 030c 	and.w	r3, r3, #12
 800837c:	2b0c      	cmp	r3, #12
 800837e:	d829      	bhi.n	80083d4 <UART_SetConfig+0x130>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <UART_SetConfig+0xe4>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	080083bd 	.word	0x080083bd
 800838c:	080083d5 	.word	0x080083d5
 8008390:	080083d5 	.word	0x080083d5
 8008394:	080083d5 	.word	0x080083d5
 8008398:	080083c9 	.word	0x080083c9
 800839c:	080083d5 	.word	0x080083d5
 80083a0:	080083d5 	.word	0x080083d5
 80083a4:	080083d5 	.word	0x080083d5
 80083a8:	080083c3 	.word	0x080083c3
 80083ac:	080083d5 	.word	0x080083d5
 80083b0:	080083d5 	.word	0x080083d5
 80083b4:	080083d5 	.word	0x080083d5
 80083b8:	080083cf 	.word	0x080083cf
 80083bc:	2300      	movs	r3, #0
 80083be:	77fb      	strb	r3, [r7, #31]
 80083c0:	e117      	b.n	80085f2 <UART_SetConfig+0x34e>
 80083c2:	2302      	movs	r3, #2
 80083c4:	77fb      	strb	r3, [r7, #31]
 80083c6:	e114      	b.n	80085f2 <UART_SetConfig+0x34e>
 80083c8:	2304      	movs	r3, #4
 80083ca:	77fb      	strb	r3, [r7, #31]
 80083cc:	e111      	b.n	80085f2 <UART_SetConfig+0x34e>
 80083ce:	2308      	movs	r3, #8
 80083d0:	77fb      	strb	r3, [r7, #31]
 80083d2:	e10e      	b.n	80085f2 <UART_SetConfig+0x34e>
 80083d4:	2310      	movs	r3, #16
 80083d6:	77fb      	strb	r3, [r7, #31]
 80083d8:	bf00      	nop
 80083da:	e10a      	b.n	80085f2 <UART_SetConfig+0x34e>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a71      	ldr	r2, [pc, #452]	; (80085a8 <UART_SetConfig+0x304>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d120      	bne.n	8008428 <UART_SetConfig+0x184>
 80083e6:	4b6e      	ldr	r3, [pc, #440]	; (80085a0 <UART_SetConfig+0x2fc>)
 80083e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d00f      	beq.n	8008414 <UART_SetConfig+0x170>
 80083f4:	2b10      	cmp	r3, #16
 80083f6:	d802      	bhi.n	80083fe <UART_SetConfig+0x15a>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <UART_SetConfig+0x164>
 80083fc:	e010      	b.n	8008420 <UART_SetConfig+0x17c>
 80083fe:	2b20      	cmp	r3, #32
 8008400:	d005      	beq.n	800840e <UART_SetConfig+0x16a>
 8008402:	2b30      	cmp	r3, #48	; 0x30
 8008404:	d009      	beq.n	800841a <UART_SetConfig+0x176>
 8008406:	e00b      	b.n	8008420 <UART_SetConfig+0x17c>
 8008408:	2300      	movs	r3, #0
 800840a:	77fb      	strb	r3, [r7, #31]
 800840c:	e0f1      	b.n	80085f2 <UART_SetConfig+0x34e>
 800840e:	2302      	movs	r3, #2
 8008410:	77fb      	strb	r3, [r7, #31]
 8008412:	e0ee      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008414:	2304      	movs	r3, #4
 8008416:	77fb      	strb	r3, [r7, #31]
 8008418:	e0eb      	b.n	80085f2 <UART_SetConfig+0x34e>
 800841a:	2308      	movs	r3, #8
 800841c:	77fb      	strb	r3, [r7, #31]
 800841e:	e0e8      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008420:	2310      	movs	r3, #16
 8008422:	77fb      	strb	r3, [r7, #31]
 8008424:	bf00      	nop
 8008426:	e0e4      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a5f      	ldr	r2, [pc, #380]	; (80085ac <UART_SetConfig+0x308>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d120      	bne.n	8008474 <UART_SetConfig+0x1d0>
 8008432:	4b5b      	ldr	r3, [pc, #364]	; (80085a0 <UART_SetConfig+0x2fc>)
 8008434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008438:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800843c:	2b40      	cmp	r3, #64	; 0x40
 800843e:	d00f      	beq.n	8008460 <UART_SetConfig+0x1bc>
 8008440:	2b40      	cmp	r3, #64	; 0x40
 8008442:	d802      	bhi.n	800844a <UART_SetConfig+0x1a6>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <UART_SetConfig+0x1b0>
 8008448:	e010      	b.n	800846c <UART_SetConfig+0x1c8>
 800844a:	2b80      	cmp	r3, #128	; 0x80
 800844c:	d005      	beq.n	800845a <UART_SetConfig+0x1b6>
 800844e:	2bc0      	cmp	r3, #192	; 0xc0
 8008450:	d009      	beq.n	8008466 <UART_SetConfig+0x1c2>
 8008452:	e00b      	b.n	800846c <UART_SetConfig+0x1c8>
 8008454:	2300      	movs	r3, #0
 8008456:	77fb      	strb	r3, [r7, #31]
 8008458:	e0cb      	b.n	80085f2 <UART_SetConfig+0x34e>
 800845a:	2302      	movs	r3, #2
 800845c:	77fb      	strb	r3, [r7, #31]
 800845e:	e0c8      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008460:	2304      	movs	r3, #4
 8008462:	77fb      	strb	r3, [r7, #31]
 8008464:	e0c5      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008466:	2308      	movs	r3, #8
 8008468:	77fb      	strb	r3, [r7, #31]
 800846a:	e0c2      	b.n	80085f2 <UART_SetConfig+0x34e>
 800846c:	2310      	movs	r3, #16
 800846e:	77fb      	strb	r3, [r7, #31]
 8008470:	bf00      	nop
 8008472:	e0be      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a4d      	ldr	r2, [pc, #308]	; (80085b0 <UART_SetConfig+0x30c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d124      	bne.n	80084c8 <UART_SetConfig+0x224>
 800847e:	4b48      	ldr	r3, [pc, #288]	; (80085a0 <UART_SetConfig+0x2fc>)
 8008480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800848c:	d012      	beq.n	80084b4 <UART_SetConfig+0x210>
 800848e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008492:	d802      	bhi.n	800849a <UART_SetConfig+0x1f6>
 8008494:	2b00      	cmp	r3, #0
 8008496:	d007      	beq.n	80084a8 <UART_SetConfig+0x204>
 8008498:	e012      	b.n	80084c0 <UART_SetConfig+0x21c>
 800849a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800849e:	d006      	beq.n	80084ae <UART_SetConfig+0x20a>
 80084a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084a4:	d009      	beq.n	80084ba <UART_SetConfig+0x216>
 80084a6:	e00b      	b.n	80084c0 <UART_SetConfig+0x21c>
 80084a8:	2300      	movs	r3, #0
 80084aa:	77fb      	strb	r3, [r7, #31]
 80084ac:	e0a1      	b.n	80085f2 <UART_SetConfig+0x34e>
 80084ae:	2302      	movs	r3, #2
 80084b0:	77fb      	strb	r3, [r7, #31]
 80084b2:	e09e      	b.n	80085f2 <UART_SetConfig+0x34e>
 80084b4:	2304      	movs	r3, #4
 80084b6:	77fb      	strb	r3, [r7, #31]
 80084b8:	e09b      	b.n	80085f2 <UART_SetConfig+0x34e>
 80084ba:	2308      	movs	r3, #8
 80084bc:	77fb      	strb	r3, [r7, #31]
 80084be:	e098      	b.n	80085f2 <UART_SetConfig+0x34e>
 80084c0:	2310      	movs	r3, #16
 80084c2:	77fb      	strb	r3, [r7, #31]
 80084c4:	bf00      	nop
 80084c6:	e094      	b.n	80085f2 <UART_SetConfig+0x34e>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a39      	ldr	r2, [pc, #228]	; (80085b4 <UART_SetConfig+0x310>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d124      	bne.n	800851c <UART_SetConfig+0x278>
 80084d2:	4b33      	ldr	r3, [pc, #204]	; (80085a0 <UART_SetConfig+0x2fc>)
 80084d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084e0:	d012      	beq.n	8008508 <UART_SetConfig+0x264>
 80084e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084e6:	d802      	bhi.n	80084ee <UART_SetConfig+0x24a>
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d007      	beq.n	80084fc <UART_SetConfig+0x258>
 80084ec:	e012      	b.n	8008514 <UART_SetConfig+0x270>
 80084ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084f2:	d006      	beq.n	8008502 <UART_SetConfig+0x25e>
 80084f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084f8:	d009      	beq.n	800850e <UART_SetConfig+0x26a>
 80084fa:	e00b      	b.n	8008514 <UART_SetConfig+0x270>
 80084fc:	2301      	movs	r3, #1
 80084fe:	77fb      	strb	r3, [r7, #31]
 8008500:	e077      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008502:	2302      	movs	r3, #2
 8008504:	77fb      	strb	r3, [r7, #31]
 8008506:	e074      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008508:	2304      	movs	r3, #4
 800850a:	77fb      	strb	r3, [r7, #31]
 800850c:	e071      	b.n	80085f2 <UART_SetConfig+0x34e>
 800850e:	2308      	movs	r3, #8
 8008510:	77fb      	strb	r3, [r7, #31]
 8008512:	e06e      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008514:	2310      	movs	r3, #16
 8008516:	77fb      	strb	r3, [r7, #31]
 8008518:	bf00      	nop
 800851a:	e06a      	b.n	80085f2 <UART_SetConfig+0x34e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a25      	ldr	r2, [pc, #148]	; (80085b8 <UART_SetConfig+0x314>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d124      	bne.n	8008570 <UART_SetConfig+0x2cc>
 8008526:	4b1e      	ldr	r3, [pc, #120]	; (80085a0 <UART_SetConfig+0x2fc>)
 8008528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008534:	d012      	beq.n	800855c <UART_SetConfig+0x2b8>
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853a:	d802      	bhi.n	8008542 <UART_SetConfig+0x29e>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d007      	beq.n	8008550 <UART_SetConfig+0x2ac>
 8008540:	e012      	b.n	8008568 <UART_SetConfig+0x2c4>
 8008542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008546:	d006      	beq.n	8008556 <UART_SetConfig+0x2b2>
 8008548:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800854c:	d009      	beq.n	8008562 <UART_SetConfig+0x2be>
 800854e:	e00b      	b.n	8008568 <UART_SetConfig+0x2c4>
 8008550:	2300      	movs	r3, #0
 8008552:	77fb      	strb	r3, [r7, #31]
 8008554:	e04d      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008556:	2302      	movs	r3, #2
 8008558:	77fb      	strb	r3, [r7, #31]
 800855a:	e04a      	b.n	80085f2 <UART_SetConfig+0x34e>
 800855c:	2304      	movs	r3, #4
 800855e:	77fb      	strb	r3, [r7, #31]
 8008560:	e047      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008562:	2308      	movs	r3, #8
 8008564:	77fb      	strb	r3, [r7, #31]
 8008566:	e044      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008568:	2310      	movs	r3, #16
 800856a:	77fb      	strb	r3, [r7, #31]
 800856c:	bf00      	nop
 800856e:	e040      	b.n	80085f2 <UART_SetConfig+0x34e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a11      	ldr	r2, [pc, #68]	; (80085bc <UART_SetConfig+0x318>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d139      	bne.n	80085ee <UART_SetConfig+0x34a>
 800857a:	4b09      	ldr	r3, [pc, #36]	; (80085a0 <UART_SetConfig+0x2fc>)
 800857c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008588:	d027      	beq.n	80085da <UART_SetConfig+0x336>
 800858a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800858e:	d817      	bhi.n	80085c0 <UART_SetConfig+0x31c>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d01c      	beq.n	80085ce <UART_SetConfig+0x32a>
 8008594:	e027      	b.n	80085e6 <UART_SetConfig+0x342>
 8008596:	bf00      	nop
 8008598:	efff69f3 	.word	0xefff69f3
 800859c:	40011000 	.word	0x40011000
 80085a0:	40023800 	.word	0x40023800
 80085a4:	40004400 	.word	0x40004400
 80085a8:	40004800 	.word	0x40004800
 80085ac:	40004c00 	.word	0x40004c00
 80085b0:	40005000 	.word	0x40005000
 80085b4:	40011400 	.word	0x40011400
 80085b8:	40007800 	.word	0x40007800
 80085bc:	40007c00 	.word	0x40007c00
 80085c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085c4:	d006      	beq.n	80085d4 <UART_SetConfig+0x330>
 80085c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80085ca:	d009      	beq.n	80085e0 <UART_SetConfig+0x33c>
 80085cc:	e00b      	b.n	80085e6 <UART_SetConfig+0x342>
 80085ce:	2300      	movs	r3, #0
 80085d0:	77fb      	strb	r3, [r7, #31]
 80085d2:	e00e      	b.n	80085f2 <UART_SetConfig+0x34e>
 80085d4:	2302      	movs	r3, #2
 80085d6:	77fb      	strb	r3, [r7, #31]
 80085d8:	e00b      	b.n	80085f2 <UART_SetConfig+0x34e>
 80085da:	2304      	movs	r3, #4
 80085dc:	77fb      	strb	r3, [r7, #31]
 80085de:	e008      	b.n	80085f2 <UART_SetConfig+0x34e>
 80085e0:	2308      	movs	r3, #8
 80085e2:	77fb      	strb	r3, [r7, #31]
 80085e4:	e005      	b.n	80085f2 <UART_SetConfig+0x34e>
 80085e6:	2310      	movs	r3, #16
 80085e8:	77fb      	strb	r3, [r7, #31]
 80085ea:	bf00      	nop
 80085ec:	e001      	b.n	80085f2 <UART_SetConfig+0x34e>
 80085ee:	2310      	movs	r3, #16
 80085f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085fa:	d17f      	bne.n	80086fc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80085fc:	7ffb      	ldrb	r3, [r7, #31]
 80085fe:	2b08      	cmp	r3, #8
 8008600:	d85c      	bhi.n	80086bc <UART_SetConfig+0x418>
 8008602:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <UART_SetConfig+0x364>)
 8008604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008608:	0800862d 	.word	0x0800862d
 800860c:	0800864d 	.word	0x0800864d
 8008610:	0800866d 	.word	0x0800866d
 8008614:	080086bd 	.word	0x080086bd
 8008618:	08008685 	.word	0x08008685
 800861c:	080086bd 	.word	0x080086bd
 8008620:	080086bd 	.word	0x080086bd
 8008624:	080086bd 	.word	0x080086bd
 8008628:	080086a5 	.word	0x080086a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800862c:	f7fe fc98 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 8008630:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	005a      	lsls	r2, r3, #1
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	441a      	add	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	fbb2 f3f3 	udiv	r3, r2, r3
 8008646:	b29b      	uxth	r3, r3
 8008648:	61bb      	str	r3, [r7, #24]
        break;
 800864a:	e03a      	b.n	80086c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800864c:	f7fe fc9c 	bl	8006f88 <HAL_RCC_GetPCLK2Freq>
 8008650:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	005a      	lsls	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	441a      	add	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	fbb2 f3f3 	udiv	r3, r2, r3
 8008666:	b29b      	uxth	r3, r3
 8008668:	61bb      	str	r3, [r7, #24]
        break;
 800866a:	e02a      	b.n	80086c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	085a      	lsrs	r2, r3, #1
 8008672:	4b5f      	ldr	r3, [pc, #380]	; (80087f0 <UART_SetConfig+0x54c>)
 8008674:	4413      	add	r3, r2
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	6852      	ldr	r2, [r2, #4]
 800867a:	fbb3 f3f2 	udiv	r3, r3, r2
 800867e:	b29b      	uxth	r3, r3
 8008680:	61bb      	str	r3, [r7, #24]
        break;
 8008682:	e01e      	b.n	80086c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008684:	f7fe fbae 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8008688:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	005a      	lsls	r2, r3, #1
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	085b      	lsrs	r3, r3, #1
 8008694:	441a      	add	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	fbb2 f3f3 	udiv	r3, r2, r3
 800869e:	b29b      	uxth	r3, r3
 80086a0:	61bb      	str	r3, [r7, #24]
        break;
 80086a2:	e00e      	b.n	80086c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	085b      	lsrs	r3, r3, #1
 80086aa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	61bb      	str	r3, [r7, #24]
        break;
 80086ba:	e002      	b.n	80086c2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	75fb      	strb	r3, [r7, #23]
        break;
 80086c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	2b0f      	cmp	r3, #15
 80086c6:	d916      	bls.n	80086f6 <UART_SetConfig+0x452>
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ce:	d212      	bcs.n	80086f6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	f023 030f 	bic.w	r3, r3, #15
 80086d8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	897b      	ldrh	r3, [r7, #10]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	897a      	ldrh	r2, [r7, #10]
 80086f2:	60da      	str	r2, [r3, #12]
 80086f4:	e070      	b.n	80087d8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	75fb      	strb	r3, [r7, #23]
 80086fa:	e06d      	b.n	80087d8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80086fc:	7ffb      	ldrb	r3, [r7, #31]
 80086fe:	2b08      	cmp	r3, #8
 8008700:	d859      	bhi.n	80087b6 <UART_SetConfig+0x512>
 8008702:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <UART_SetConfig+0x464>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	0800872d 	.word	0x0800872d
 800870c:	0800874b 	.word	0x0800874b
 8008710:	08008769 	.word	0x08008769
 8008714:	080087b7 	.word	0x080087b7
 8008718:	08008781 	.word	0x08008781
 800871c:	080087b7 	.word	0x080087b7
 8008720:	080087b7 	.word	0x080087b7
 8008724:	080087b7 	.word	0x080087b7
 8008728:	0800879f 	.word	0x0800879f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800872c:	f7fe fc18 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 8008730:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	085a      	lsrs	r2, r3, #1
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	441a      	add	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	fbb2 f3f3 	udiv	r3, r2, r3
 8008744:	b29b      	uxth	r3, r3
 8008746:	61bb      	str	r3, [r7, #24]
        break;
 8008748:	e038      	b.n	80087bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800874a:	f7fe fc1d 	bl	8006f88 <HAL_RCC_GetPCLK2Freq>
 800874e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	085a      	lsrs	r2, r3, #1
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	441a      	add	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008762:	b29b      	uxth	r3, r3
 8008764:	61bb      	str	r3, [r7, #24]
        break;
 8008766:	e029      	b.n	80087bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	085a      	lsrs	r2, r3, #1
 800876e:	4b21      	ldr	r3, [pc, #132]	; (80087f4 <UART_SetConfig+0x550>)
 8008770:	4413      	add	r3, r2
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6852      	ldr	r2, [r2, #4]
 8008776:	fbb3 f3f2 	udiv	r3, r3, r2
 800877a:	b29b      	uxth	r3, r3
 800877c:	61bb      	str	r3, [r7, #24]
        break;
 800877e:	e01d      	b.n	80087bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008780:	f7fe fb30 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8008784:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	085a      	lsrs	r2, r3, #1
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	441a      	add	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	fbb2 f3f3 	udiv	r3, r2, r3
 8008798:	b29b      	uxth	r3, r3
 800879a:	61bb      	str	r3, [r7, #24]
        break;
 800879c:	e00e      	b.n	80087bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	085b      	lsrs	r3, r3, #1
 80087a4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	61bb      	str	r3, [r7, #24]
        break;
 80087b4:	e002      	b.n	80087bc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	75fb      	strb	r3, [r7, #23]
        break;
 80087ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d908      	bls.n	80087d4 <UART_SetConfig+0x530>
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c8:	d204      	bcs.n	80087d4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	60da      	str	r2, [r3, #12]
 80087d2:	e001      	b.n	80087d8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	01e84800 	.word	0x01e84800
 80087f4:	00f42400 	.word	0x00f42400

080087f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	430a      	orrs	r2, r1
 8008842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00a      	beq.n	8008888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	f003 0310 	and.w	r3, r3, #16
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00a      	beq.n	80088aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d01a      	beq.n	800890e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088f6:	d10a      	bne.n	800890e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	605a      	str	r2, [r3, #4]
  }
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af02      	add	r7, sp, #8
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800894a:	f7fa fa6d 	bl	8002e28 <HAL_GetTick>
 800894e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	2b08      	cmp	r3, #8
 800895c:	d10e      	bne.n	800897c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800895e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f814 	bl	800899a <UART_WaitOnFlagUntilTimeout>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e00a      	b.n	8008992 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2220      	movs	r2, #32
 8008986:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	4613      	mov	r3, r2
 80089a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089aa:	e05d      	b.n	8008a68 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b2:	d059      	beq.n	8008a68 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089b4:	f7fa fa38 	bl	8002e28 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d302      	bcc.n	80089ca <UART_WaitOnFlagUntilTimeout+0x30>
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d11b      	bne.n	8008a02 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0201 	bic.w	r2, r2, #1
 80089e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2220      	movs	r2, #32
 80089ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2220      	movs	r2, #32
 80089f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e042      	b.n	8008a88 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d02b      	beq.n	8008a68 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a1e:	d123      	bne.n	8008a68 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a28:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0201 	bic.w	r2, r2, #1
 8008a48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2220      	movs	r2, #32
 8008a54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e00f      	b.n	8008a88 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69da      	ldr	r2, [r3, #28]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	4013      	ands	r3, r2
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	bf0c      	ite	eq
 8008a78:	2301      	moveq	r3, #1
 8008a7a:	2300      	movne	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d092      	beq.n	80089ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d027      	beq.n	8008afa <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4b2f      	ldr	r3, [pc, #188]	; (8008b70 <FMC_SDRAM_Init+0xe0>)
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ac0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008ac6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008acc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008ad2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008ad8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008ade:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008ae4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008aea:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	e032      	b.n	8008b60 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b06:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b10:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008b16:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <FMC_SDRAM_Init+0xe0>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b34:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008b3a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008b40:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008b46:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008b4c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	ffff8000 	.word	0xffff8000

08008b74 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d02e      	beq.n	8008bec <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b9a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008baa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008bb4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008bbe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008bc8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008bd2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	609a      	str	r2, [r3, #8]
 8008bea:	e039      	b.n	8008c60 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4b1e      	ldr	r3, [pc, #120]	; (8008c70 <FMC_SDRAM_Timing_Init+0xfc>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c1e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c2e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008c38:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008c42:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	ff0f0fff 	.word	0xff0f0fff

08008c74 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008c8c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008c96:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	695a      	ldr	r2, [r3, #20]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <__libc_init_array>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	4e0d      	ldr	r6, [pc, #52]	; (8008d14 <__libc_init_array+0x38>)
 8008ce0:	4c0d      	ldr	r4, [pc, #52]	; (8008d18 <__libc_init_array+0x3c>)
 8008ce2:	1ba4      	subs	r4, r4, r6
 8008ce4:	10a4      	asrs	r4, r4, #2
 8008ce6:	2500      	movs	r5, #0
 8008ce8:	42a5      	cmp	r5, r4
 8008cea:	d109      	bne.n	8008d00 <__libc_init_array+0x24>
 8008cec:	4e0b      	ldr	r6, [pc, #44]	; (8008d1c <__libc_init_array+0x40>)
 8008cee:	4c0c      	ldr	r4, [pc, #48]	; (8008d20 <__libc_init_array+0x44>)
 8008cf0:	f000 f820 	bl	8008d34 <_init>
 8008cf4:	1ba4      	subs	r4, r4, r6
 8008cf6:	10a4      	asrs	r4, r4, #2
 8008cf8:	2500      	movs	r5, #0
 8008cfa:	42a5      	cmp	r5, r4
 8008cfc:	d105      	bne.n	8008d0a <__libc_init_array+0x2e>
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
 8008d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d04:	4798      	blx	r3
 8008d06:	3501      	adds	r5, #1
 8008d08:	e7ee      	b.n	8008ce8 <__libc_init_array+0xc>
 8008d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d0e:	4798      	blx	r3
 8008d10:	3501      	adds	r5, #1
 8008d12:	e7f2      	b.n	8008cfa <__libc_init_array+0x1e>
 8008d14:	0800abac 	.word	0x0800abac
 8008d18:	0800abac 	.word	0x0800abac
 8008d1c:	0800abac 	.word	0x0800abac
 8008d20:	0800abb0 	.word	0x0800abb0

08008d24 <memset>:
 8008d24:	4402      	add	r2, r0
 8008d26:	4603      	mov	r3, r0
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d100      	bne.n	8008d2e <memset+0xa>
 8008d2c:	4770      	bx	lr
 8008d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d32:	e7f9      	b.n	8008d28 <memset+0x4>

08008d34 <_init>:
 8008d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d36:	bf00      	nop
 8008d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d3a:	bc08      	pop	{r3}
 8008d3c:	469e      	mov	lr, r3
 8008d3e:	4770      	bx	lr

08008d40 <_fini>:
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d42:	bf00      	nop
 8008d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d46:	bc08      	pop	{r3}
 8008d48:	469e      	mov	lr, r3
 8008d4a:	4770      	bx	lr
